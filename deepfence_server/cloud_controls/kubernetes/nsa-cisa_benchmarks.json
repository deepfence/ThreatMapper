[
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1",
    "description": "",
    "title": "NSA and CISA Kubernetes Hardening Guidance v1.0",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "To get the latest version of the official guide, please visit [here](https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/1/CTR_KUBERNETES%20HARDENING%20GUIDANCE.PDF).\n\n## Overview\n\nKubernetes is an open-source system that automates the deployment, scaling, and management of applications run in containers, and is often hosted in a cloud environment. The hardening guidance detailed in this report is designed to help organizations handle associated risks and enjoy the benefits of using this technology.\n\n## Control Categories\n\nThese are the available categories for Kubernetes Compliance controls. The category for a control reflects the security function that the control applies to.\n\n### Kubernetes Pod Security\n\nA Pod Security Policy is a cluster-level resource that controls security sensitive aspects of the pod specification. The PodSecurityPolicy objects define a set of conditions that a pod must run with in order to be accepted into the system, as well as defaults for the related fields.\n\n### Network Separation and Hardening\n\nCluster networking is a central concept of Kubernetes. Communication between containers, Pods, services, and external services must be taken into consideration. By default, there are few network policies in place to separate resources and prevent lateral movement or escalation if a cluster is compromised. Resource separation and encryption can be an effective way to limit a cyber actor’s movement and escalation within a cluster.\n",
    "children": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
    "description": "",
    "title": "Kubernetes Pod Security",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_disallow_host_path",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_security_service_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_service_account_token_disabled"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_disallow_host_path",
    "description": "Containers should not able to access any specific paths of the host file system. There are many ways a container with unrestricted access to the host filesystem can escalate privileges, including reading data from other containers, and abusing the credentials of system services, such as Kubelet.",
    "title": "Containers should not use hostPath mounts",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.pod_security_policy_allowed_host_path",
      "kubernetes_compliance.control.pod_volume_host_path"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
    "description": "Containers should not have privileged access. To prevent security issues, it is recommended that you do not run privileged containers in your environment. Instead, provide granular permissions and capabilities to the container environment. Giving containers full access to the host can create security flaws in your production environment.",
    "title": "Containers should not have privileged access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.cronjob_container_privilege_disabled",
      "kubernetes_compliance.control.daemonset_container_privilege_disabled",
      "kubernetes_compliance.control.deployment_container_privilege_disabled",
      "kubernetes_compliance.control.job_container_privilege_disabled",
      "kubernetes_compliance.control.pod_container_privilege_disabled",
      "kubernetes_compliance.control.pod_security_policy_container_privilege_disabled",
      "kubernetes_compliance.control.replicaset_container_privilege_disabled",
      "kubernetes_compliance.control.replication_controller_container_privilege_disabled",
      "kubernetes_compliance.control.statefulset_container_privilege_disabled"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
    "description": "Containers should not allow privilege escalation. A container running with the `allowPrivilegeEscalation` flag set to true may have processes that can gain more privileges than their parent.",
    "title": "Containers should not allow privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.cronjob_container_privilege_escalation_disabled",
      "kubernetes_compliance.control.daemonset_container_privilege_escalation_disabled",
      "kubernetes_compliance.control.deployment_container_privilege_escalation_disabled",
      "kubernetes_compliance.control.job_container_privilege_escalation_disabled",
      "kubernetes_compliance.control.pod_container_privilege_escalation_disabled",
      "kubernetes_compliance.control.pod_security_policy_container_privilege_escalation_disabled",
      "kubernetes_compliance.control.replicaset_container_privilege_escalation_disabled",
      "kubernetes_compliance.control.replication_controller_container_privilege_escalation_disabled",
      "kubernetes_compliance.control.statefulset_container_privilege_escalation_disabled"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_security_service_hardening",
    "description": "Linux provides several out-of-the-box security modules. Some of the popular ones are SELinux, AppArmor and Seccomp. Containerized applications should use these security services.",
    "title": "Containerized applications should use security services",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.pod_security_policy_security_services_hardening"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
    "description": "Pod host network controls whether the Pod may use the node network namespace. Doing so gives the Pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other Pods on the same node.",
    "title": "Containers should not run with host network access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.cronjob_host_network_access_disabled",
      "kubernetes_compliance.control.daemonset_host_network_access_disabled",
      "kubernetes_compliance.control.deployment_host_network_access_disabled",
      "kubernetes_compliance.control.job_host_network_access_disabled",
      "kubernetes_compliance.control.pod_host_network_access_disabled",
      "kubernetes_compliance.control.pod_security_policy_host_network_access_disabled",
      "kubernetes_compliance.control.replicaset_host_network_access_disabled",
      "kubernetes_compliance.control.replication_controller_host_network_access_disabled",
      "kubernetes_compliance.control.statefulset_host_network_access_disabled"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
    "description": "Containers should not share the host process PID or IPC namespace. Sharing the host’s process namespace allows the container to see all of the processes on the host system. This reduces the benefit of process level isolation between the host and the containers. Under these circumstances a malicious user who has access to a container could get access to processes on the host itself, manipulate them, and even be able to kill them.",
    "title": "Containers should not share the host process namespace",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.cronjob_hostpid_hostipc_sharing_disabled",
      "kubernetes_compliance.control.daemonset_hostpid_hostipc_sharing_disabled",
      "kubernetes_compliance.control.deployment_hostpid_hostipc_sharing_disabled",
      "kubernetes_compliance.control.job_hostpid_hostipc_sharing_disabled",
      "kubernetes_compliance.control.pod_hostpid_hostipc_sharing_disabled",
      "kubernetes_compliance.control.pod_security_policy_hostpid_hostipc_sharing_disabled",
      "kubernetes_compliance.control.replicaset_hostpid_hostipc_sharing_disabled",
      "kubernetes_compliance.control.replication_controller_hostpid_hostipc_sharing_disabled",
      "kubernetes_compliance.control.statefulset_hostpid_hostipc_sharing_disabled"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
    "description": "Containers should always run with a read only root file system. Using an immutable root filesystem and a verified boot mechanism prevents against attackers from owning the machine through permanent local changes. An immutable root filesystem can also prevent malicious binaries from writing to the host system.",
    "title": "Containers should run with a read only root file system",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.cronjob_immutable_container_filesystem",
      "kubernetes_compliance.control.daemonset_immutable_container_filesystem",
      "kubernetes_compliance.control.deployment_immutable_container_filesystem",
      "kubernetes_compliance.control.job_immutable_container_filesystem",
      "kubernetes_compliance.control.pod_immutable_container_filesystem",
      "kubernetes_compliance.control.pod_security_policy_immutable_container_filesystem",
      "kubernetes_compliance.control.replicaset_immutable_container_filesystem",
      "kubernetes_compliance.control.replication_controller_immutable_container_filesystem",
      "kubernetes_compliance.control.statefulset_immutable_container_filesystem"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
    "description": "Containers should not be deployed with root privileges. By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise.",
    "title": "Containers should not run with root privileges",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.cronjob_non_root_container",
      "kubernetes_compliance.control.daemonset_non_root_container",
      "kubernetes_compliance.control.deployment_non_root_container",
      "kubernetes_compliance.control.job_non_root_container",
      "kubernetes_compliance.control.pod_non_root_container",
      "kubernetes_compliance.control.pod_security_policy_non_root_container",
      "kubernetes_compliance.control.replicaset_non_root_container",
      "kubernetes_compliance.control.replication_controller_non_root_container",
      "kubernetes_compliance.control.statefulset_non_root_container"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_service_account_token_disabled",
    "description": "Automatic mapping of service account token should be disabled. By default, Kubernetes automatically provisions a service account when creating a Pod and mounts the account’s secret token within the Pod at runtime. Many containerized applications do not require direct access to the service account as Kubernetes orchestration occurs transparently in the background. If an application is compromised, account tokens in Pods can be gleaned by cyber actors and used to further compromise the cluster. When an application does not need to access the service account directly, Kubernetes administrators should ensure that Pod specifications disable the secret token being mounted. This can be accomplished using the `automountServiceAccountToken: false` directive in the Pod's YAML specification.",
    "title": "Automatic mapping of the service account tokens should be disabled",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.pod_service_account_token_disabled",
      "kubernetes_compliance.control.service_account_token_disabled"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
    "description": "",
    "title": "Network Separation and Hardening",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_api_serve_on_secure_port_endpoint",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_default_deny_network_policy"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
    "description": "Containers should have CPU limit which restricts the container to use no more than a given amount of CPU.",
    "title": "Containers should have a CPU limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.cronjob_cpu_limit",
      "kubernetes_compliance.control.daemonset_cpu_limit",
      "kubernetes_compliance.control.deployment_cpu_limit",
      "kubernetes_compliance.control.job_cpu_limit",
      "kubernetes_compliance.control.namespace_limit_range_default_cpu_limit",
      "kubernetes_compliance.control.namespace_resource_quota_cpu_limit",
      "kubernetes_compliance.control.replicaset_cpu_limit",
      "kubernetes_compliance.control.replication_controller_cpu_limit",
      "kubernetes_compliance.control.statefulset_cpu_limit"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
    "description": "Containers should have CPU request. If required Kubernetes will make sure your containers get the CPU they requested.",
    "title": "Containers should have a CPU request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.cronjob_cpu_request",
      "kubernetes_compliance.control.daemonset_cpu_request",
      "kubernetes_compliance.control.deployment_cpu_request",
      "kubernetes_compliance.control.job_cpu_request",
      "kubernetes_compliance.control.namespace_limit_range_default_cpu_request",
      "kubernetes_compliance.control.namespace_resource_quota_cpu_request",
      "kubernetes_compliance.control.replicaset_cpu_request",
      "kubernetes_compliance.control.replication_controller_cpu_request",
      "kubernetes_compliance.control.statefulset_cpu_request"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_api_serve_on_secure_port_endpoint",
    "description": "Kubernetes API should serve on port 443 or port 6443, protected by TLS. Once TLS is established, the HTTP request moves to the authentication step. If the request cannot be authenticated, it is rejected with HTTP status code 401.",
    "title": "Kubernetes API should serve on secure port",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.endpoint_api_serve_on_secure_port"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
    "description": "Containers should have a memory limit which restricts the container to use no more than a given amount of user or system memory.",
    "title": "Containers should have a memory limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.cronjob_memory_limit",
      "kubernetes_compliance.control.daemonset_memory_limit",
      "kubernetes_compliance.control.deployment_memory_limit",
      "kubernetes_compliance.control.job_memory_limit",
      "kubernetes_compliance.control.namespace_limit_range_default_memory_limit",
      "kubernetes_compliance.control.namespace_resource_quota_memory_limit",
      "kubernetes_compliance.control.replicaset_memory_limit",
      "kubernetes_compliance.control.replication_controller_memory_limit",
      "kubernetes_compliance.control.statefulset_memory_limit"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
    "description": "Containers should have memory request. If required Kubernetes will make sure your containers get the memory they requested.",
    "title": "Containers should have a memory request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.cronjob_memory_request",
      "kubernetes_compliance.control.daemonset_memory_request",
      "kubernetes_compliance.control.deployment_memory_request",
      "kubernetes_compliance.control.job_memory_request",
      "kubernetes_compliance.control.namespace_limit_range_default_memory_request",
      "kubernetes_compliance.control.namespace_resource_quota_memory_request",
      "kubernetes_compliance.control.replicaset_memory_request",
      "kubernetes_compliance.control.replication_controller_memory_request",
      "kubernetes_compliance.control.statefulset_memory_request"
    ]
  },
  {
    "benchmark_id": "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_default_deny_network_policy",
    "description": "Administrators should use a default policy selecting all Pods to deny all ingress and egress traffic and ensure any unselected Pods are isolated. Additional policies could then relax these restrictions for permissible connections.",
    "title": "Network policy should have a default policy to deny all ingress and egress traffic",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes",
      "type": "Benchmark"
    },
    "documentation": "",
    "children": [
      "kubernetes_compliance.control.network_policy_default_deny_egress",
      "kubernetes_compliance.control.network_policy_default_deny_ingress",
      "kubernetes_compliance.control.network_policy_default_dont_allow_egress",
      "kubernetes_compliance.control.network_policy_default_dont_allow_ingress"
    ]
  }
]