[
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not use hostPath mounts",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not use hostPath mounts"
    ],
    "control_id": "kubernetes_compliance.control.pod_security_policy_allowed_host_path",
    "description": "The Pod Security Policy `allowedHostPaths` specifies a list of host paths that are allowed to be used by hostPath volumes. An empty list means there is no restriction on host paths used. This is defined as a list of objects with a single pathPrefix field, which allows hostPath volumes to mount a path that begins with an allowed prefix, and a readOnly field indicating it must be mounted read-only.",
    "title": "Pod Security Policy should prohibit hostPaths volumes",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/PodSecurityPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_disallow_host_path"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_disallow_host_path",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not use hostPath mounts",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not use hostPath mounts"
    ],
    "control_id": "kubernetes_compliance.control.pod_volume_host_path",
    "description": "Containers in a Pod should not able to access any specific paths of the host file system. There are many ways a container with unrestricted access to the host filesystem can escalate privileges, including reading data from other containers, and abusing the credentials of system services, such as Kubelet.",
    "title": "Pod containers should not allow privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Pod"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_disallow_host_path"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_disallow_host_path",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not have privileged access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not have privileged access"
    ],
    "control_id": "kubernetes_compliance.control.cronjob_container_privilege_disabled",
    "description": "Containers in a CronJob should not have privileged access. To prevent security issues, it is recommended that you do not run privileged containers in your environment. Instead, provide granular permissions and capabilities to the container environment. Giving containers full access to the host can create security flaws in your production environment.",
    "title": "CronJob containers should not have privileged access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/CronJob"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not have privileged access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not have privileged access"
    ],
    "control_id": "kubernetes_compliance.control.daemonset_container_privilege_disabled",
    "description": "Containers in a DaemonSet should not have privileged access. To prevent security issues, it is recommended that you do not run privileged containers in your environment. Instead, provide granular permissions and capabilities to the container environment. Giving containers full access to the host can create security flaws in your production environment.",
    "title": "DaemonSet containers should not have privileged access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/DaemonSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not have privileged access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not have privileged access"
    ],
    "control_id": "kubernetes_compliance.control.deployment_container_privilege_disabled",
    "description": "Containers in a Deployment should not have privileged access. To prevent security issues, it is recommended that you do not run privileged containers in your environment. Instead, provide granular permissions and capabilities to the container environment. Giving containers full access to the host can create security flaws in your production environment.",
    "title": "Deployment containers should not have privileged access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Deployment"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not have privileged access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not have privileged access"
    ],
    "control_id": "kubernetes_compliance.control.job_container_privilege_disabled",
    "description": "Containers in a Job should not have privileged access. To prevent security issues, it is recommended that you do not run privileged containers in your environment. Instead, provide granular permissions and capabilities to the container environment. Giving containers full access to the host can create security flaws in your production environment.",
    "title": "Job containers should not have privileged access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Job"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not have privileged access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not have privileged access"
    ],
    "control_id": "kubernetes_compliance.control.pod_container_privilege_disabled",
    "description": "Containers in a Pod should not have privileged access. To prevent security issues, it is recommended that you do not run privileged containers in your environment. Instead, provide granular permissions and capabilities to the container environment. Giving containers full access to the host can create security flaws in your production environment.",
    "title": "Pod containers should not have privileged access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Pod"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not have privileged access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not have privileged access"
    ],
    "control_id": "kubernetes_compliance.control.pod_security_policy_container_privilege_disabled",
    "description": "Pod Security Policy `privileged` controls whether the Pod containers may run with `privileged` access. Containers in a Pod should not have privileged access. To prevent security issues, it is recommended that you do not run privileged containers in your environment. Instead, provide granular permissions and capabilities to the container environment. Giving containers full access to the host can create security flaws in your production environment.",
    "title": "Pod Security Policy should prohibit containers to run with privilege access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/PodSecurityPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not have privileged access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not have privileged access"
    ],
    "control_id": "kubernetes_compliance.control.replicaset_container_privilege_disabled",
    "description": "Containers in a ReplicaSet should not have privileged access. To prevent security issues, it is recommended that you do not run privileged containers in your environment. Instead, provide granular permissions and capabilities to the container environment. Giving containers full access to the host can create security flaws in your production environment.",
    "title": "ReplicaSet containers should not have privileged access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicaSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not have privileged access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not have privileged access"
    ],
    "control_id": "kubernetes_compliance.control.replication_controller_container_privilege_disabled",
    "description": "Containers in a ReplicationController should not have privileged access. To prevent security issues, it is recommended that you do not run privileged containers in your environment. Instead, provide granular permissions and capabilities to the container environment. Giving containers full access to the host can create security flaws in your production environment.",
    "title": "ReplicationController containers should not have privileged access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicationController"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not have privileged access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not have privileged access"
    ],
    "control_id": "kubernetes_compliance.control.statefulset_container_privilege_disabled",
    "description": "Containers in a StatefulSet should not have privileged access. To prevent security issues, it is recommended that you do not run privileged containers in your environment. Instead, provide granular permissions and capabilities to the container environment. Giving containers full access to the host can create security flaws in your production environment.",
    "title": "StatefulSet containers should not have privileged access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/StatefulSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not allow privilege escalation",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not allow privilege escalation"
    ],
    "control_id": "kubernetes_compliance.control.cronjob_container_privilege_escalation_disabled",
    "description": "Containers in a CronJob should not allow privilege escalation.  A container running with the `allowPrivilegeEscalation` flag set to true may have processes that can gain more privileges than their parent.",
    "title": "CronJob containers should not allow privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/CronJob"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not allow privilege escalation",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not allow privilege escalation"
    ],
    "control_id": "kubernetes_compliance.control.daemonset_container_privilege_escalation_disabled",
    "description": "Containers in a DaemonSet should not allow privilege escalation.  A container running with the `allowPrivilegeEscalation` flag set to true may have processes that can gain more privileges than their parent.",
    "title": "DaemonSet containers should not allow privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/DaemonSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not allow privilege escalation",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not allow privilege escalation"
    ],
    "control_id": "kubernetes_compliance.control.deployment_container_privilege_escalation_disabled",
    "description": "Containers in a Deployment should not allow privilege escalation.  A container running with the `allowPrivilegeEscalation` flag set to true may have processes that can gain more privileges than their parent.",
    "title": "Deployment containers should not allow privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Deployment"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not allow privilege escalation",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not allow privilege escalation"
    ],
    "control_id": "kubernetes_compliance.control.job_container_privilege_escalation_disabled",
    "description": "Containers in a Job should not allow privilege escalation.  A container running with the `allowPrivilegeEscalation` flag set to true may have processes that can gain more privileges than their parent.",
    "title": "Job containers should not allow privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Job"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not allow privilege escalation",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not allow privilege escalation"
    ],
    "control_id": "kubernetes_compliance.control.pod_container_privilege_escalation_disabled",
    "description": "Containers in a Pod should not allow privilege escalation.  A container running with the `allowPrivilegeEscalation` flag set to true may have processes that can gain more privileges than their parent.",
    "title": "Pod containers should not allow privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Pod"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not allow privilege escalation",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not allow privilege escalation"
    ],
    "control_id": "kubernetes_compliance.control.pod_security_policy_container_privilege_escalation_disabled",
    "description": "Pod Security Policy `allowPrivilegeEscalation` controls whether the Pod containers may request for privilege escalation. Containers in a Pod should not allow privilege escalation.  A container running with the `allowPrivilegeEscalation` flag set to true may have processes that can gain more privileges than their parent.",
    "title": "Pod Security Policy should prohibit privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/PodSecurityPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not allow privilege escalation",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not allow privilege escalation"
    ],
    "control_id": "kubernetes_compliance.control.replicaset_container_privilege_escalation_disabled",
    "description": "Containers in a ReplicaSet should not allow privilege escalation.  A container running with the `allowPrivilegeEscalation` flag set to true may have processes that can gain more privileges than their parent.",
    "title": "ReplicaSet containers should not allow privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicaSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not allow privilege escalation",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not allow privilege escalation"
    ],
    "control_id": "kubernetes_compliance.control.replication_controller_container_privilege_escalation_disabled",
    "description": "Containers in a ReplicationController should not allow privilege escalation.  A container running with the `allowPrivilegeEscalation` flag set to true may have processes that can gain more privileges than their parent.",
    "title": "ReplicationController containers should not allow privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicationController"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not allow privilege escalation",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not allow privilege escalation"
    ],
    "control_id": "kubernetes_compliance.control.statefulset_container_privilege_escalation_disabled",
    "description": "Containers in a StatefulSet should not allow privilege escalation.  A container running with the `allowPrivilegeEscalation` flag set to true may have processes that can gain more privileges than their parent.",
    "title": "StatefulSet containers should not allow privilege escalation",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/StatefulSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_privilege_escalation_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containerized applications should use security services",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containerized applications should use security services"
    ],
    "control_id": "kubernetes_compliance.control.pod_security_policy_security_services_hardening",
    "description": "The underlying host OS needs to be secured in order to prevent container breaches from affecting the host. For this, Linux provides several out-of-the-box security modules. Some of the popular ones are SELinux, AppArmor and Seccomp.",
    "title": "Containerized applications should use security services such as SELinux or AppArmor or Seccomp",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/PodSecurityPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_security_service_hardening"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_container_security_service_hardening",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with host network access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with host network access"
    ],
    "control_id": "kubernetes_compliance.control.cronjob_host_network_access_disabled",
    "description": "Containers in a CronJob should not run in the host network of the node where the pod is deployed.  When running on the host network, the pod can use the network namespace and network resources of the node. In this case, the pod can access loopback devices, listen to addresses, and monitor the traffic of other pods on the node.",
    "title": "CronJob containers should not run with host network access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/CronJob"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with host network access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with host network access"
    ],
    "control_id": "kubernetes_compliance.control.daemonset_host_network_access_disabled",
    "description": "Containers in a DaemonSet should not run in the host network of the node where the pod is deployed.  When running on the host network, the pod can use the network namespace and network resources of the node. In this case, the pod can access loopback devices, listen to addresses, and monitor the traffic of other pods on the node.",
    "title": "DaemonSet containers should not run with host network access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/DaemonSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with host network access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with host network access"
    ],
    "control_id": "kubernetes_compliance.control.deployment_host_network_access_disabled",
    "description": "Containers in a Deployment should not run in the host network of the node where the pod is deployed.  When running on the host network, the pod can use the network namespace and network resources of the node. In this case, the pod can access loopback devices, listen to addresses, and monitor the traffic of other pods on the node.",
    "title": "Deployment containers should not run with host network access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Deployment"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with host network access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with host network access"
    ],
    "control_id": "kubernetes_compliance.control.job_host_network_access_disabled",
    "description": "Containers in a Job should not run in the host network of the node where the pod is deployed.  When running on the host network, the pod can use the network namespace and network resources of the node. In this case, the pod can access loopback devices, listen to addresses, and monitor the traffic of other pods on the node.",
    "title": "Job containers should not run with host network access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Job"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with host network access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with host network access"
    ],
    "control_id": "kubernetes_compliance.control.pod_host_network_access_disabled",
    "description": "Containers in a Pod should not run in the host network of the node where the pod is deployed.  When running on the host network, the pod can use the network namespace and network resources of the node. In this case, the pod can access loopback devices, listen to addresses, and monitor the traffic of other pods on the node.",
    "title": "Pod containers should not run with host network access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with host network access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with host network access"
    ],
    "control_id": "kubernetes_compliance.control.pod_security_policy_host_network_access_disabled",
    "description": "Pod Security Policy host network controls whether the Pod may use the node network namespace. Doing so gives the Pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other Pods on the same node.",
    "title": "Pod Security Policy should prohibit host network access ",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/PodSecurityPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with host network access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with host network access"
    ],
    "control_id": "kubernetes_compliance.control.replicaset_host_network_access_disabled",
    "description": "Containers in a ReplicaSet should not run in the host network of the node where the pod is deployed.  When running on the host network, the pod can use the network namespace and network resources of the node. In this case, the pod can access loopback devices, listen to addresses, and monitor the traffic of other pods on the node.",
    "title": "ReplicaSet containers should not run with host network access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicaSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with host network access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with host network access"
    ],
    "control_id": "kubernetes_compliance.control.replication_controller_host_network_access_disabled",
    "description": "Containers in a ReplicationController should not run in the host network of the node where the pod is deployed.  When running on the host network, the pod can use the network namespace and network resources of the node. In this case, the pod can access loopback devices, listen to addresses, and monitor the traffic of other pods on the node.",
    "title": "ReplicationController containers should not run with host network access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicationController"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with host network access",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with host network access"
    ],
    "control_id": "kubernetes_compliance.control.statefulset_host_network_access_disabled",
    "description": "Containers in a StatefulSet should not run in the host network of the node where the pod is deployed.  When running on the host network, the pod can use the network namespace and network resources of the node. In this case, the pod can access loopback devices, listen to addresses, and monitor the traffic of other pods on the node.",
    "title": "StatefulSet containers should not run with host network access",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/StatefulSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_host_network_access_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not share the host process namespace",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not share the host process namespace"
    ],
    "control_id": "kubernetes_compliance.control.cronjob_hostpid_hostipc_sharing_disabled",
    "description": "Containers in a CronJob should not share the host process PID or IPC namespace.  Sharing the host’s process namespace allows the container to see all of the processes on the host system. This reduces the benefit of process level isolation between the host and the containers. Under these circumstances a malicious user who has access to a container could get access to processes on the host itself, manipulate them, and even be able to kill them.",
    "title": "CronJob containers should not share the host process namespace",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/CronJob"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not share the host process namespace",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not share the host process namespace"
    ],
    "control_id": "kubernetes_compliance.control.daemonset_hostpid_hostipc_sharing_disabled",
    "description": "Containers in a DaemonSet should not share the host process PID or IPC namespace.  Sharing the host’s process namespace allows the container to see all of the processes on the host system. This reduces the benefit of process level isolation between the host and the containers. Under these circumstances a malicious user who has access to a container could get access to processes on the host itself, manipulate them, and even be able to kill them.",
    "title": "DaemonSet containers should not share the host process namespace",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/DaemonSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not share the host process namespace",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not share the host process namespace"
    ],
    "control_id": "kubernetes_compliance.control.deployment_hostpid_hostipc_sharing_disabled",
    "description": "Containers in a Deployment should not share the host process PID or IPC namespace.  Sharing the host’s process namespace allows the container to see all of the processes on the host system. This reduces the benefit of process level isolation between the host and the containers. Under these circumstances a malicious user who has access to a container could get access to processes on the host itself, manipulate them, and even be able to kill them.",
    "title": "Deployment containers should not share the host process namespace",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Deployment"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not share the host process namespace",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not share the host process namespace"
    ],
    "control_id": "kubernetes_compliance.control.job_hostpid_hostipc_sharing_disabled",
    "description": "Containers in a Job should not share the host process PID or IPC namespace.  Sharing the host’s process namespace allows the container to see all of the processes on the host system. This reduces the benefit of process level isolation between the host and the containers. Under these circumstances a malicious user who has access to a container could get access to processes on the host itself, manipulate them, and even be able to kill them.",
    "title": "Job containers should not share the host process namespace",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Job"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not share the host process namespace",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not share the host process namespace"
    ],
    "control_id": "kubernetes_compliance.control.pod_hostpid_hostipc_sharing_disabled",
    "description": "Containers in a Pod should not share the host process PID or IPC namespace.  Sharing the host’s process namespace allows the container to see all of the processes on the host system. This reduces the benefit of process level isolation between the host and the containers. Under these circumstances a malicious user who has access to a container could get access to processes on the host itself, manipulate them, and even be able to kill them.",
    "title": "Pod containers should not share the host process namespace",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Pod"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not share the host process namespace",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not share the host process namespace"
    ],
    "control_id": "kubernetes_compliance.control.pod_security_policy_hostpid_hostipc_sharing_disabled",
    "description": "Pod Security Policy `hostPID` and `hostIPC` controls whether the Pod may share the host process namespaces. Containers in a Pod should not share the host process PID or IPC namespace.  Sharing the host’s process namespace allows the container to see all of the processes on the host system. This reduces the benefit of process level isolation between the host and the containers. Under these circumstances a malicious user who has access to a container could get access to processes on the host itself, manipulate them, and even be able to kill them.",
    "title": "Pod Security Policy should prohibit containers from sharing the host process namespaces",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/PodSecurityPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not share the host process namespace",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not share the host process namespace"
    ],
    "control_id": "kubernetes_compliance.control.replicaset_hostpid_hostipc_sharing_disabled",
    "description": "Containers in a ReplicaSet should not share the host process PID or IPC namespace.  Sharing the host’s process namespace allows the container to see all of the processes on the host system. This reduces the benefit of process level isolation between the host and the containers. Under these circumstances a malicious user who has access to a container could get access to processes on the host itself, manipulate them, and even be able to kill them.",
    "title": "ReplicaSet containers should not share the host process namespace",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicaSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not share the host process namespace",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not share the host process namespace"
    ],
    "control_id": "kubernetes_compliance.control.replication_controller_hostpid_hostipc_sharing_disabled",
    "description": "Containers in a ReplicationController should not share the host process PID or IPC namespace.  Sharing the host’s process namespace allows the container to see all of the processes on the host system. This reduces the benefit of process level isolation between the host and the containers. Under these circumstances a malicious user who has access to a container could get access to processes on the host itself, manipulate them, and even be able to kill them.",
    "title": "ReplicationController containers should not share the host process namespace",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicationController"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not share the host process namespace",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not share the host process namespace"
    ],
    "control_id": "kubernetes_compliance.control.statefulset_hostpid_hostipc_sharing_disabled",
    "description": "Containers in a StatefulSet should not share the host process PID or IPC namespace.  Sharing the host’s process namespace allows the container to see all of the processes on the host system. This reduces the benefit of process level isolation between the host and the containers. Under these circumstances a malicious user who has access to a container could get access to processes on the host itself, manipulate them, and even be able to kill them.",
    "title": "StatefulSet containers should not share the host process namespace",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/StatefulSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_hostpid_hostipc_sharing_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should run with a read only root file system",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should run with a read only root file system"
    ],
    "control_id": "kubernetes_compliance.control.cronjob_immutable_container_filesystem",
    "description": "Containers in a CronJob should always run with a read only root file system. Using an immutable root filesystem and a verified boot mechanism prevents against attackers from owning the machine through permanent local changes. An immutable root filesystem can also prevent malicious binaries from writing to the host system.",
    "title": "CronJob containers should run with a read only root file system",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/CronJob"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should run with a read only root file system",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should run with a read only root file system"
    ],
    "control_id": "kubernetes_compliance.control.daemonset_immutable_container_filesystem",
    "description": "Containers in a DaemonSet should always run with a read only root file system. Using an immutable root filesystem and a verified boot mechanism prevents against attackers from owning the machine through permanent local changes. An immutable root filesystem can also prevent malicious binaries from writing to the host system.",
    "title": "DaemonSet containers should run with a read only root file system",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/DaemonSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should run with a read only root file system",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should run with a read only root file system"
    ],
    "control_id": "kubernetes_compliance.control.deployment_immutable_container_filesystem",
    "description": "Containers in a Deployment should always run with a read only root file system. Using an immutable root filesystem and a verified boot mechanism prevents against attackers from owning the machine through permanent local changes. An immutable root filesystem can also prevent malicious binaries from writing to the host system.",
    "title": "Deployment containers should run with a read only root file system",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Deployment"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should run with a read only root file system",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should run with a read only root file system"
    ],
    "control_id": "kubernetes_compliance.control.job_immutable_container_filesystem",
    "description": "Containers in a Job should always run with a read only root file system. Using an immutable root filesystem and a verified boot mechanism prevents against attackers from owning the machine through permanent local changes. An immutable root filesystem can also prevent malicious binaries from writing to the host system.",
    "title": "Job containers should run with a read only root file system",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Job"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should run with a read only root file system",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should run with a read only root file system"
    ],
    "control_id": "kubernetes_compliance.control.pod_immutable_container_filesystem",
    "description": "Containers in a Pod should always run with a read only root file system. Using an immutable root filesystem and a verified boot mechanism prevents against attackers from owning the machine through permanent local changes. An immutable root filesystem can also prevent malicious binaries from writing to the host system.",
    "title": "Pod containers should run with a read only root file system",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Pod"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should run with a read only root file system",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should run with a read only root file system"
    ],
    "control_id": "kubernetes_compliance.control.pod_security_policy_immutable_container_filesystem",
    "description": "Pod Security Policy `readOnlyRootFilesystem` controls whether the Pod containers run with read only root file system. Containers in a Pod should always run with a read only root file system. Using an immutable root filesystem and a verified boot mechanism prevents against attackers from owning the machine through permanent local changes. An immutable root filesystem can also prevent malicious binaries from writing to the host system.",
    "title": "Pod Security Policy should force containers to run with read only root file system",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/PodSecurityPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should run with a read only root file system",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should run with a read only root file system"
    ],
    "control_id": "kubernetes_compliance.control.replicaset_immutable_container_filesystem",
    "description": "Containers in a ReplicaSet should always run with a read only root file system. Using an immutable root filesystem and a verified boot mechanism prevents against attackers from owning the machine through permanent local changes. An immutable root filesystem can also prevent malicious binaries from writing to the host system.",
    "title": "ReplicaSet containers should run with a read only root file system",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicaSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should run with a read only root file system",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should run with a read only root file system"
    ],
    "control_id": "kubernetes_compliance.control.replication_controller_immutable_container_filesystem",
    "description": "Containers in a ReplicationController should always run with a read only root file system. Using an immutable root filesystem and a verified boot mechanism prevents against attackers from owning the machine through permanent local changes. An immutable root filesystem can also prevent malicious binaries from writing to the host system.",
    "title": "ReplicationController containers should run with a read only root file system",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicationController"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should run with a read only root file system",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should run with a read only root file system"
    ],
    "control_id": "kubernetes_compliance.control.statefulset_immutable_container_filesystem",
    "description": "Containers in a StatefulSet should always run with a read only root file system. Using an immutable root filesystem and a verified boot mechanism prevents against attackers from owning the machine through permanent local changes. An immutable root filesystem can also prevent malicious binaries from writing to the host system.",
    "title": "StatefulSet containers should run with a read only root file system",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/StatefulSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_immutable_container_filesystem",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with root privileges",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with root privileges"
    ],
    "control_id": "kubernetes_compliance.control.cronjob_non_root_container",
    "description": "Containers in a CronJob should not run with root privileges. By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise.",
    "title": "CronJob containers should not run with root privileges",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/CronJob"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with root privileges",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with root privileges"
    ],
    "control_id": "kubernetes_compliance.control.daemonset_non_root_container",
    "description": "Containers in a DaemonSet should not run with root privileges. By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise.",
    "title": "DaemonSet containers should not run with root privileges",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/DaemonSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with root privileges",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with root privileges"
    ],
    "control_id": "kubernetes_compliance.control.deployment_non_root_container",
    "description": "Containers in a Deployment should not run with root privileges. By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise.",
    "title": "Deployment containers should not run with root privileges",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Deployment"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with root privileges",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with root privileges"
    ],
    "control_id": "kubernetes_compliance.control.job_non_root_container",
    "description": "Containers in a Job should not run with root privileges. By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise.",
    "title": "Job containers should not run with root privileges",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Job"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with root privileges",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with root privileges"
    ],
    "control_id": "kubernetes_compliance.control.pod_non_root_container",
    "description": "Containers in a Pod should not run with root privileges. By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise.",
    "title": "Pod containers should not run with root privileges",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Pod"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with root privileges",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with root privileges"
    ],
    "control_id": "kubernetes_compliance.control.pod_security_policy_non_root_container",
    "description": "Pod Security Policy should prohibit containers from running as root. Containers in a Pod should not run with root privileges. By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise.",
    "title": "Pod Security Policy should prohibit containers from running as root",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/PodSecurityPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with root privileges",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with root privileges"
    ],
    "control_id": "kubernetes_compliance.control.replicaset_non_root_container",
    "description": "Containers in a ReplicaSet should not run with root privileges. By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise.",
    "title": "ReplicaSet containers should not run with root privileges",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicaSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with root privileges",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with root privileges"
    ],
    "control_id": "kubernetes_compliance.control.replication_controller_non_root_container",
    "description": "Containers in a ReplicationController should not run with root privileges. By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise.",
    "title": "ReplicationController containers should not run with root privileges",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicationController"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Containers should not run with root privileges",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Containers should not run with root privileges"
    ],
    "control_id": "kubernetes_compliance.control.statefulset_non_root_container",
    "description": "Containers in a StatefulSet should not run with root privileges. By default, many container services run as the privileged root user, and applications execute inside the container as root despite not requiring privileged execution. Preventing root execution by using non-root containers or a rootless container engine limits the impact of a container compromise.",
    "title": "StatefulSet containers should not run with root privileges",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/StatefulSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_non_root_container",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Automatic mapping of the service account tokens should be disabled",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Automatic mapping of the service account tokens should be disabled"
    ],
    "control_id": "kubernetes_compliance.control.pod_service_account_token_disabled",
    "description": "Automatic mapping of service account token should be disabled. By default, Kubernetes automatically provisions a service account when creating a Pod and mounts the account’s secret token within the Pod at runtime. Many containerized applications do not require direct access to the service account as Kubernetes orchestration occurs transparently in the background. If an application is compromised, account tokens in Pods can be gleaned by cyber actors and used to further compromise the cluster. When an application does not need to access the service account directly, Kubernetes administrators should ensure that Pod specifications disable the secret token being mounted. This can be accomplished using the `automountServiceAccountToken: false` directive in the Pod's YAML specification.",
    "title": "Automatic mapping of the service account tokens should be disabled in Pod",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Pod"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_service_account_token_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_service_account_token_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Kubernetes Pod Security \u003e Automatic mapping of the service account tokens should be disabled",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Kubernetes Pod Security",
      "Automatic mapping of the service account tokens should be disabled"
    ],
    "control_id": "kubernetes_compliance.control.service_account_token_disabled",
    "description": "Automatic mapping of service account token should be disabled. By default, Kubernetes automatically provisions a service account when creating a Pod and mounts the account’s secret token within the Pod at runtime. Many containerized applications do not require direct access to the service account as Kubernetes orchestration occurs transparently in the background. If an application is compromised, account tokens in Pods can be gleaned by cyber actors and used to further compromise the cluster. When an application does not need to access the service account directly, Kubernetes administrators should ensure that Pod specifications disable the secret token being mounted. This can be accomplished using the `automountServiceAccountToken: false` directive in the Pod's YAML specification.",
    "title": "Automatic mapping of the service account tokens should be disabled in service account",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ServiceAccount"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_service_account_token_disabled"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security/kubernetes_compliance.benchmark.nsa_cisa_v1_pod_security_service_account_token_disabled",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU limit"
    ],
    "control_id": "kubernetes_compliance.control.cronjob_cpu_limit",
    "description": "Containers in a CronJob  should have CPU limit which restricts the container to use no more than a given amount of CPU.",
    "title": "CronJob containers should have a CPU limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/CronJob"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU limit"
    ],
    "control_id": "kubernetes_compliance.control.daemonset_cpu_limit",
    "description": "Containers in a DaemonSet  should have CPU limit which restricts the container to use no more than a given amount of CPU.",
    "title": "DaemonSet containers should have a CPU limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/DaemonSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU limit"
    ],
    "control_id": "kubernetes_compliance.control.deployment_cpu_limit",
    "description": "Containers in a Deployment  should have CPU limit which restricts the container to use no more than a given amount of CPU.",
    "title": "Deployment containers should have a CPU limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Deployment"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU limit"
    ],
    "control_id": "kubernetes_compliance.control.job_cpu_limit",
    "description": "Containers in a Job  should have CPU limit which restricts the container to use no more than a given amount of CPU.",
    "title": "Job containers should have a CPU limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Job"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU limit"
    ],
    "control_id": "kubernetes_compliance.control.namespace_limit_range_default_cpu_limit",
    "description": "Administrators should use default limitRange policy for CPU limit for each namespace.",
    "title": "Namespaces should have default CPU limit in limitRange policy",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Namespace"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU limit"
    ],
    "control_id": "kubernetes_compliance.control.namespace_resource_quota_cpu_limit",
    "description": "Administrators should use resourceQuota CPU limit to restrict namespaces CPU usage.",
    "title": "Namespaces should be restricted on CPU usage with resourceQuota CPU limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Namespace"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU limit"
    ],
    "control_id": "kubernetes_compliance.control.replicaset_cpu_limit",
    "description": "Containers in a ReplicaSet  should have CPU limit which restricts the container to use no more than a given amount of CPU.",
    "title": "ReplicaSet containers should have a CPU limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicaSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU limit"
    ],
    "control_id": "kubernetes_compliance.control.replication_controller_cpu_limit",
    "description": "Containers in a ReplicationController  should have CPU limit which restricts the container to use no more than a given amount of CPU.",
    "title": "ReplicationController containers should have a CPU limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicationController"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU limit"
    ],
    "control_id": "kubernetes_compliance.control.statefulset_cpu_limit",
    "description": "Containers in a StatefulSet  should have CPU limit which restricts the container to use no more than a given amount of CPU.",
    "title": "StatefulSet containers should have a CPU limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/StatefulSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU request"
    ],
    "control_id": "kubernetes_compliance.control.cronjob_cpu_request",
    "description": "Containers in a CronJob should have CPU request. If required Kubernetes will make sure your containers get the CPU they requested.",
    "title": "CronJob containers should have a CPU request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/CronJob"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU request"
    ],
    "control_id": "kubernetes_compliance.control.daemonset_cpu_request",
    "description": "Containers in a DaemonSet should have CPU request. If required Kubernetes will make sure your containers get the CPU they requested.",
    "title": "DaemonSet containers should have a CPU request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/DaemonSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU request"
    ],
    "control_id": "kubernetes_compliance.control.deployment_cpu_request",
    "description": "Containers in a Deployment should have CPU request. If required Kubernetes will make sure your containers get the CPU they requested.",
    "title": "Deployment containers should have a CPU request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Deployment"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU request"
    ],
    "control_id": "kubernetes_compliance.control.job_cpu_request",
    "description": "Containers in a Job should have CPU request. If required Kubernetes will make sure your containers get the CPU they requested.",
    "title": "Job containers should have a CPU request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Job"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU request"
    ],
    "control_id": "kubernetes_compliance.control.namespace_limit_range_default_cpu_request",
    "description": "Administrators should use default limitRange policy for CPU request for each namespace.",
    "title": "Namespaces should have default CPU request in limitRange policy",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Namespace"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU request"
    ],
    "control_id": "kubernetes_compliance.control.namespace_resource_quota_cpu_request",
    "description": "Administrators should use resourceQuota CPU request for each namespace.",
    "title": "Namespaces should have resourceQuota CPU request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Namespace"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU request"
    ],
    "control_id": "kubernetes_compliance.control.replicaset_cpu_request",
    "description": "Containers in a ReplicaSet should have CPU request. If required Kubernetes will make sure your containers get the CPU they requested.",
    "title": "ReplicaSet containers should have a CPU request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicaSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU request"
    ],
    "control_id": "kubernetes_compliance.control.replication_controller_cpu_request",
    "description": "Containers in a ReplicationController should have CPU request. If required Kubernetes will make sure your containers get the CPU they requested.",
    "title": "ReplicationController containers should have a CPU request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicationController"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a CPU request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a CPU request"
    ],
    "control_id": "kubernetes_compliance.control.statefulset_cpu_request",
    "description": "Containers in a StatefulSet should have CPU request. If required Kubernetes will make sure your containers get the CPU they requested.",
    "title": "StatefulSet containers should have a CPU request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/StatefulSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_cpu_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Kubernetes API should serve on secure port",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Kubernetes API should serve on secure port"
    ],
    "control_id": "kubernetes_compliance.control.endpoint_api_serve_on_secure_port",
    "description": "Kubernetes API should serve on port 443 or port 6443, protected by TLS. Once TLS is established, the HTTP request moves to the authentication step. If the request cannot be authenticated, it is rejected with HTTP status code 401.",
    "title": "Kubernetes API should serve on secure port",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Endpoint"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_api_serve_on_secure_port_endpoint"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_api_serve_on_secure_port_endpoint",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory limit"
    ],
    "control_id": "kubernetes_compliance.control.cronjob_memory_limit",
    "description": "Containers in a CronJob should have memory limit which restricts the container to use no more than a given amount of user or system memory.",
    "title": "CronJob containers should have a memory limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/CronJob"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory limit"
    ],
    "control_id": "kubernetes_compliance.control.daemonset_memory_limit",
    "description": "Containers in a DaemonSet should have memory limit which restricts the container to use no more than a given amount of user or system memory.",
    "title": "DaemonSet containers should have a memory limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/DaemonSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory limit"
    ],
    "control_id": "kubernetes_compliance.control.deployment_memory_limit",
    "description": "Containers in a Deployment should have memory limit which restricts the container to use no more than a given amount of user or system memory.",
    "title": "Deployment containers should have a memory limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Deployment"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory limit"
    ],
    "control_id": "kubernetes_compliance.control.job_memory_limit",
    "description": "Containers in a Job should have memory limit which restricts the container to use no more than a given amount of user or system memory.",
    "title": "Job containers should have a memory limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Job"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory limit"
    ],
    "control_id": "kubernetes_compliance.control.namespace_limit_range_default_memory_limit",
    "description": "Administrators should use default limitRange policy for memory limit for each namespace.",
    "title": "Namespaces should have default memory limit in limitRange policy",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Namespace"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory limit"
    ],
    "control_id": "kubernetes_compliance.control.namespace_resource_quota_memory_limit",
    "description": "Administrators should use resourceQuota memory limit to restrict namespaces memory usage.",
    "title": "Namespaces should be restricted on memory usage with resourceQuota memory limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Namespace"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory limit"
    ],
    "control_id": "kubernetes_compliance.control.replicaset_memory_limit",
    "description": "Containers in a ReplicaSet should have memory limit which restricts the container to use no more than a given amount of user or system memory.",
    "title": "ReplicaSet containers should have a memory limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicaSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory limit"
    ],
    "control_id": "kubernetes_compliance.control.replication_controller_memory_limit",
    "description": "Containers in a ReplicationController should have memory limit which restricts the container to use no more than a given amount of user or system memory.",
    "title": "ReplicationController containers should have a memory limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicationController"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory limit",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory limit"
    ],
    "control_id": "kubernetes_compliance.control.statefulset_memory_limit",
    "description": "Containers in a StatefulSet should have memory limit which restricts the container to use no more than a given amount of user or system memory.",
    "title": "StatefulSet containers should have a memory limit",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/StatefulSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_limit",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory request"
    ],
    "control_id": "kubernetes_compliance.control.cronjob_memory_request",
    "description": "Containers in a CronJob should have memory request. If required Kubernetes will make sure your containers get the memory they requested.",
    "title": "CronJob containers should have a memory request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/CronJob"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory request"
    ],
    "control_id": "kubernetes_compliance.control.daemonset_memory_request",
    "description": "Containers in a DaemonSet should have memory request. If required Kubernetes will make sure your containers get the memory they requested.",
    "title": "DaemonSet containers should have a memory request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/DaemonSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory request"
    ],
    "control_id": "kubernetes_compliance.control.deployment_memory_request",
    "description": "Containers in a Deployment should have memory request. If required Kubernetes will make sure your containers get the memory they requested.",
    "title": "Deployment containers should have a memory request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Deployment"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory request"
    ],
    "control_id": "kubernetes_compliance.control.job_memory_request",
    "description": "Containers in a Job should have memory request. If required Kubernetes will make sure your containers get the memory they requested.",
    "title": "Job containers should have a memory request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Job"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory request"
    ],
    "control_id": "kubernetes_compliance.control.namespace_limit_range_default_memory_request",
    "description": "Administrators should use default limitRange policy for memory request for each namespace.",
    "title": "Namespaces should have default memory request in limitRange policy",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Namespace"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory request"
    ],
    "control_id": "kubernetes_compliance.control.namespace_resource_quota_memory_request",
    "description": "Administrators should use resourceQuota memory request for each namespace.",
    "title": "Namespaces should have resourceQuota memory request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/Namespace"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory request"
    ],
    "control_id": "kubernetes_compliance.control.replicaset_memory_request",
    "description": "Containers in a ReplicaSet should have memory request. If required Kubernetes will make sure your containers get the memory they requested.",
    "title": "ReplicaSet containers should have a memory request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicaSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory request"
    ],
    "control_id": "kubernetes_compliance.control.replication_controller_memory_request",
    "description": "Containers in a ReplicationController should have memory request. If required Kubernetes will make sure your containers get the memory they requested.",
    "title": "ReplicationController containers should have a memory request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/ReplicationController"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Containers should have a memory request",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Containers should have a memory request"
    ],
    "control_id": "kubernetes_compliance.control.statefulset_memory_request",
    "description": "Containers in a StatefulSet should have memory request. If required Kubernetes will make sure your containers get the memory they requested.",
    "title": "StatefulSet containers should have a memory request",
    "tags": {
      "category": "Compliance",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/StatefulSet"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_memory_request",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Network policy should have a default policy to deny all ingress and egress traffic",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Network policy should have a default policy to deny all ingress and egress traffic"
    ],
    "control_id": "kubernetes_compliance.control.network_policy_default_deny_egress",
    "description": "Administrators should use a default policy selecting all Pods to deny all egress traffic and ensure any unselected Pods are isolated. Additional policies could then relax these restrictions for permissible connections.",
    "title": "Namespaces should have a default network policy to deny all egress traffic",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/NetworkPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_default_deny_network_policy"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_default_deny_network_policy",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Network policy should have a default policy to deny all ingress and egress traffic",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Network policy should have a default policy to deny all ingress and egress traffic"
    ],
    "control_id": "kubernetes_compliance.control.network_policy_default_deny_ingress",
    "description": "Administrators should use a default policy selecting all Pods to deny all ingress traffic and ensure any unselected Pods are isolated. Additional policies could then relax these restrictions for permissible connections.",
    "title": "Namespaces should have a default network policy to deny all ingress traffic",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/NetworkPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_default_deny_network_policy"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_default_deny_network_policy",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Network policy should have a default policy to deny all ingress and egress traffic",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Network policy should have a default policy to deny all ingress and egress traffic"
    ],
    "control_id": "kubernetes_compliance.control.network_policy_default_dont_allow_egress",
    "description": "Administrators should use a default policy selecting all Pods to deny all ingress and egress traffic and ensure any unselected Pods are isolated. An 'allow all' policy would override this default and should not be used.  Instead, use specific  policies to relax these restrictions only for permissible connections. ",
    "title": "Network policies should not have a default policy to allow all egress traffic",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/NetworkPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_default_deny_network_policy"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_default_deny_network_policy",
    "executable": false
  },
  {
    "category_breadcrumb": "NSA and CISA Kubernetes Hardening Guidance v1.0 \u003e Network Separation and Hardening \u003e Network policy should have a default policy to deny all ingress and egress traffic",
    "category_hierarchy": [
      "NSA and CISA Kubernetes Hardening Guidance v1.0",
      "Network Separation and Hardening",
      "Network policy should have a default policy to deny all ingress and egress traffic"
    ],
    "control_id": "kubernetes_compliance.control.network_policy_default_dont_allow_ingress",
    "description": "Administrators should use a default policy selecting all Pods to deny all ingress and egress traffic and ensure any unselected Pods are isolated. An 'allow all' policy would override this default and should not be used.  Instead, use specific  policies to relax these restrictions only for permissible connections. ",
    "title": "Network policies should not have a default policy to allow all ingress traffic",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "nsa_cisa_v1": "true",
      "plugin": "kubernetes",
      "service": "Kubernetes/NetworkPolicy"
    },
    "documentation": "",
    "parent_control_hierarchy": [
      "kubernetes_compliance.benchmark.nsa_cisa_v1",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening",
      "kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_default_deny_network_policy"
    ],
    "parent_control_breadcrumb": "kubernetes_compliance.benchmark.nsa_cisa_v1/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening/kubernetes_compliance.benchmark.nsa_cisa_v1_network_hardening_default_deny_network_policy",
    "executable": false
  }
]