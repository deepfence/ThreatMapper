[
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_1",
    "description": "Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organization.",
    "title": "1.1 Maintain current contact details",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.1",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nEnsure your *Contact Information* and *Alternate Contacts* are correct in the AWS account settings page of your AWS account.\n\nIn addition to the primary contact information, you may enter the following contacts:\n\n- **Billing**: When your monthly invoice is available, or your payment method needs to be updated. If your Receive PDF Invoice By Email is turned on in your Billing preferences, your alternate billing contact will receive the PDF invoices as well.\n- **Operations**: When your service is, or will be, temporarily unavailable in one of more Regions. Any notification related to operations.\n- **Security**: When you have notifications from the AWS Abuse team for potentially fraudulent activity on your AWS account. Any notification related to security.\n\nAs a best practice, avoid using contact information for individuals, and instead use group email addresses and shared company phone numbers.\n\nAWS uses the contact information to inform you of important service events, billing issues, and security issues.  Keeping your contact information up to date ensure timely delivery of important information to the relevant stakeholders.  Incorrect contact information may result in communications delays that could impact your ability to operate.\n\n## Remediation\n\nThere is no API available for setting contact information - you must log in to the AWS console to verify and set your contact information.\n\n1. Sign into the AWS console, and navigate to [Account Settings](https://console.aws.amazon.com/billing/home?#/account).\n2. Verify that the information in the **Contact Information** section is correct and complete.  If changes are required, click **Edit**, make your changes, and then click **Update**.\n3. Verify that the information in the **Alternate Contacts** section is correct and complete.  If changes are required, click **Edit**, make your changes, and then click **Update**.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_2",
    "description": "AWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.",
    "title": "1.2 Ensure security contact information is registered",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.2",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nEnsure your *Alternate Contacts* for security are correct in the AWS account settings page of your AWS account.\n\nIn addition to the primary contact information, you must enter the security contacts:\n- **Security**:  When you have notifications from the AWS Abuse team for potentially fraudulent activity on your AWS account. Any notification related to security.\n\nAs a best practice, avoid using contact information for individuals, and instead use group email addresses and shared company phone numbers.\n\nAWS uses the security contact information to inform you of critical service events such as security issues. Keeping your security contact information up to date ensure timely delivery of critical information to the relevant stakeholders. Incorrect security contact information may result in communications delays that could impact your organization security.\n\n## Remediation\n\nThere is no API available for setting security contact information - you must log in to the AWS console to verify and set your security contact information.\n\n1. Sign into the AWS console, and navigate to the [Account Settings](https://console.aws.amazon.com/billing/home?#/account).\n2. Verify that the information in the **Alternate Contacts**  *Security* section is correct and complete. If changes are required, click **Edit**, make your changes and then click **Update**.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_3",
    "description": "The AWS support portal allows account owners to establish security questions that can be used to authenticate individuals calling AWS customer service for support. It is recommended that security questions be established.",
    "title": "1.3 Ensure security questions are registered in the AWS account",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.3",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nEnsure *Security Challenge Questions* are set up in the AWS account settings page of your AWS account.\n\nBy adding security challenge questions improve the security of your account. It can be used to authenticate individuals calling AWS customer service for support. It is highly recommended that security questions be established.\n\nWhen creating a new AWS account, a default super user is automatically created. This account is referred to as the \"root user\" account. It is recommended that the use of this account to be limited. During events in case the root password is no longer accessible or the MFA token associated with root user is lost or destroyed it is possible, through authentication using secret questions and associated answers, root user login access can be recovered.\n\n## Remediation\n\nThere is no API available for setting security questions - you must log in to the AWS console to verify, and set your security questions and answers.\n\n1. Sign into the AWS console as a root user, and navigate to the [Account Settings](https://console.aws.amazon.com/billing/home?#/account).\n2. Verify that the information in the **Configure Security Challenge Questions** section is complete and you have the answers with you. If changes are required, click **Edit**, make your changes, and then click **Update**.\n3. Keep the questions and answers in a secure location.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_4",
    "description": "The 'root' user account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the 'root' user account be removed.",
    "title": "1.4 Ensure no 'root' user account access key exists",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.4",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nThe root user account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the root user account be removed.\n\nBy default IAM *root user* account for us-gov cloud regions is not enabled. However, on request AWS support can enable *root user* access keys only through CLI or API methods.\n\nRemoving access keys associated with the *root user* account limits vectors by which the account can be compromised. Additionally, removing the root access keys encourages the creation and use of role based accounts that are least privileged.\n\n## Remediation\n\n### From Console\n\nPerform the following action to delete or disable active root user access keys:\n\n1. Sign into the AWS console as a root user, and navigate to [Your Security Credentials](https://console.aws.amazon.com/iam/home#/security_credentials).\n2. Click on Access Keys (access key ID and secret access key) section.\n3. Under the Status column if there are any Keys which are Active\n    - Click on **Make Inactive** to make it inactive.\n    - Click **Delete** to delete it permanently (deleted keys cannot be recovered).\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_5",
    "description": "The 'root' user account is the most privileged user in an AWS account. Multi-factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device.",
    "title": "1.5 Ensure MFA is enabled for the 'root' user account",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.5",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nThe root user account is the most privileged user in an AWS account. Multi-factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS console, they will be prompted for their username and password as well as for an authentication code from their MFA device.\n\nIt is recommended that the device which is used for virtual MFA is NOT a personal device, but rather a dedicated device (phone or tablet). That can be managed to be kept charged and secured. It reduces the risks of losing access to the MFA code.\n\nIAM *root user* account for us-gov cloud regions does not have console access. This control is not applicable for us-gov cloud regions.\n\nEnabling virtual MFA provides increased security for console access as it requires the authenticating principal to possess a device that creates a time-sensitive key and have knowledge of a credential.\n\n## Remediation\n\n### From Console\n\nPerform the following action to enabled virtual MFA for the root user account:\n\n1. Sign into the AWS console as a root user, and navigate to [Your Security Credentials](https://console.aws.amazon.com/iam/home#/security_credentials).\n2. Click on Multi-factor authentication (MFA) section and click **Activate MFA**.\n3. In the Manage MFA device wizard, choose **virtual MFA device** and click on **continue**.\n4. IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic.\n5. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](https://aws.amazon.com/iam/features/mfa/?audit=2019q1#Virtual_MFA_Applications). If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n6. Determine whether the MFA app supports QR codes, and then do one of the following:\n    - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n    - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\n7. Once you configure, the virtual MFA device starts generating MFA codes.\n8. Type two consecutive MFA codes, MFA code 1 and MFA code 2 fields. Then click **Assign MFA**. Now the virtual MFA is enabled for the AWS account.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_6",
    "description": "The 'root' user account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. For Level 2, it is recommended that the root user account be protected with a hardware MFA.",
    "title": "1.6 Ensure hardware MFA is enabled for the 'root' user account",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.6",
      "cis_level": "2",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nThe root user account is the most privileged user in an AWS account. Multi-factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS console, they will be prompted for their username and password as well as for an authentication code from their MFA device.\n\nFor Level 2, it is recommended that the root user account can be protected with a hardware MFA.\n\nIt is recommended that the device which is used for virtual MFA is NOT a personal device, but rather a dedicated device (phone or tablet). That can be managed to be kept charged and secured. It reduces the risks of losing access to the MFA code.\n\nIAM *root user* account for us-gov cloud regions does not have console access. This control is not applicable for us-gov cloud regions.\n\nA hardware MFA has a smaller attack surface than a virtual MFA. For example, a hardware MFA does not suffer the attack surface introduced by the smartphone or tablet on which a virtual MFA resides.\n\nUsing hardware MFA for many AWS accounts can create a logistical device management issue. In such cases, consider only implementing this Level 2 recommendation selectively to the highest secured AWS accounts and the Level 1 recommendation applied to the remaining accounts.\n\n## Remediation\n\n### From Console\n\nPerform the following action to enabled hardware MFA for the root user account:\n\n1. Sign into the AWS console as a root user, and navigate to [Your Security Credentials](https://console.aws.amazon.com/iam/home#/security_credentials).\n2. Click on Multi-factor authentication (MFA) section and click **Activate MFA**.\n3. In the Manage MFA device wizard, choose **Other hardware MFA device** and click on **continue**.\n4. In the **Serial number** field, enter the serial number that is found on the back of the MFA device.\n5. Press the button on the front of the device and type the 6-digit number that appears in **MFA code 1** field.\n6. Wait for 30 seconds and then press the button again. Type the second number in **MFA code 2** field.\n7. Click **Assign MFA**. Now the MFA device is assigned to the AWS account.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_7",
    "description": "With the creation of an AWS account, a 'root user' is created that cannot be disabled or deleted. That user has unrestricted access to and control over all resources in the AWS account. It is highly recommended that the use of this account be avoided for everyday tasks.",
    "title": "1.7 Eliminate use of the 'root' user for administrative and daily tasks",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.7",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nWith the creation of an AWS account, a root user account is created. This root user is the most privileged user in an AWS account and has unrestricted access to and control over all resources in the account. It is highly recommended that the use of this root user to be avoided for everyday tasks.\n\nBy default IAM *root user* account for us-gov cloud regions is not enabled. However, on request AWS support can enable *root user* access keys only through CLI or API methods.\n\nAs the root user has unrestricted access to all the resources, it is dangerous to use for daily task. To avoid this it better to deactivate or delete any access keys associated with it. Also to change the root user password as necessary. Use of it, is inconsistent with the principles of least privilege and separation of duties, and can lead to unnecessary harm due to mistakes.\n\n## Remediation\n\nWhen you find that the root user account is being used for daily activity that includes administrative tasks that do not require the root user, perform the following action:\n\n1. Change the root user password.\n2. Deactivate or delete any access keys associated with the root user.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_8",
    "description": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.",
    "title": "1.8 Ensure IAM password policy requires minimum length of 14 or greater",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.8",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nPassword policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure passwords are at least a given length. It is recommended that the password policy require a minimum password length of 14.\n\nSetting a complex password policy increases account resiliency against unethical password hackers.\n\n## Remediation\n\nPerform the following to set the password policy is configured as prescribed:\n\n### From Console:\n\n1. Sign into the AWS console and navigate to the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. Choose **Account settings**.\n3. Click **Change** or **Change password policy** (if no password policy set earlier).\n4. Ensure in the `Enforce minimum password length` field is set to 14, then choose **Save changes**.\n\n### From Command Line:\n\n```bash\naws iam update-account-password-policy --minimum-password-length 14\n```\n\n**Note**: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_9",
    "description": "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.",
    "title": "1.9 Ensure IAM password policy prevents password reuse",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.9",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nIAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.\n\nPreventing password reuse increases account resiliency against unethical password hackers.\n\n## Remediation\n\nPerform the following to set the password policy as prescribed:\n\n### From Console:\n\n1. Sign into the AWS console and navigate to the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. Choose **Account settings**.\n3. Click **Change** or **Change password policy** (if no password policy set earlier).\n4. Ensure `Prevent password reuse` is checked.\n5. Ensure `Remember password(s)` is set to 24 and then choose **Save changes**.\n\n### From Command Line:\n\n```bash\naws iam update-account-password-policy --password-reuse-prevention 24\n```\n\n**Note**: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_10",
    "description": "Multi-Factor Authentication (MFA) adds an extra layer of authentication assurance beyond traditional credentials. With MFA enabled, when a user signs in to the AWS Console, they will be prompted for their user name and password as well as for an authentication code from their physical or virtual MFA token. It is recommended that MFA be enabled for all accounts that have a console password.",
    "title": "1.10 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.10",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nMulti-factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS console, they will be prompted for their username and password as well as for an authentication code from their virtual or physical MFA device. It is recommended that MFA to be enabled for all users that have a console password.\n\nEnabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that creates a time-sensitive key and have knowledge of a credential.\n\n## Remediation\n\n### From Console\n\nPerform the following action to enabled virtual MFA for the intended user:\n\n1. Sign into the AWS console, and navigate to [IAM Console](https://console.aws.amazon.com/iam/home#/).\n2. In the left navigation pane, choose Users.\n3. In the user name list, choose the **name** of the intended user.\n4. Choose the **Security credentials** tab, and then choose **Manage** for `Assigned MFA Device`.\n5. In the Manage MFA device wizard, choose **virtual MFA device** and click on **continue**.\n6. IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic.\n7. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](https://aws.amazon.com/iam/features/mfa/?audit=2019q1#Virtual_MFA_Applications). If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n8. Determine whether the MFA app supports QR codes, and then do one of the following:\n    - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n    - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\n9. Once you configure, the virtual MFA device starts generating MFA codes.\n10. Type two consecutive MFA codes, MFA code 1 and MFA code 2 fields. Then click **Assign MFA**. Now the virtual MFA is enabled for the AWS account.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_11",
    "description": "AWS console defaults to no check boxes selected when creating a new IAM user. When creating the IAM User credentials you have to determine what type of access they require.",
    "title": "1.11 Do not setup access keys during initial user setup for all IAM users that have a console password",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.11",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAWS console defaults to no check boxes selected when creating a new IAM user. When creating the IAM user access type you have to determine what type of access they require.\n\n**Programmatic access**:The IAM user might need to make API calls, use the AWS CLI, or use the tools for windows powershell. In that case, create an access key (access key ID and a secret access key) for that user.\n**AWS Management Console access**: If the user needs to access the AWS Management Console, create a password for the user.\n\nAfter user profile is created, user can create access keys for programmatic access which will provide an indication that it is needed for their work. User can also put a support ticket to have access keys created for them.\n\n## Remediation\n\n### From Console:\n\nPerform the following action to check if an access key is created during user creation:\n\n1. Sign into the AWS console and navigate to the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, choose Users.\n3. Click on the **User name** where column `Password age` and `Access key age` is not set to **None**.\n4. Click on **Security credentials** tab.\n5. Compare the user `Creation time` to the Access Key `Created` date and time.\n6. For any that match, the key was created during initial user setup.\n\n**Note**: Keys that were created at the same time as the user profile and do not have a last used date should be deleted.\n\nPerform the following action to delete access keys:\n\n1. Sign into the AWS console as an **Administrator** and navigate to the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, choose Users.\n3. Click on the **User name** for which access key is to be deleted.\n4. Click on **Security credentials** tab.\n5. Click on the **Make inactive** to `deactivate` the keys that were created at the same time as the user profile but have not been used.\n6. Now click X (delete) for the `Inactive` keys.\n\n### From Command Line:\n\n```bash\naws iam delete-access-key --access-key-id \u003caccess-key-id-listed\u003e --user-name \u003cusers-name\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_12",
    "description": "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.",
    "title": "1.12 Ensure credentials unused for 45 days or greater are disabled",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.12",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days to be deactivated or removed.\n\nDisabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned users to be used.\n\n## Remediation\n\n### From Console:\n\nPerform the following action to disable user console password:\n\n1. Sign into the AWS console and navigate to the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, choose Users.\n3. Select the **User name** whose `Console last sign-in` is greater than 45 days.\n4. Click on **Security credentials** tab.\n5. In section `Sign-in credentials`, `Console password` click **Manage**.\n6. Select `Disable`, click **Apply**\n\nPerform the following action to deactivate access keys:\n\n1. Sign into the AWS console as an **Administrator** and navigate to the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, choose Users.\n3. Click on the **User name** for which access key is over 45 days old.\n4. Click on **Security credentials** tab.\n5. Click on the **Make inactive** to `deactivate` the key that is over 45 days old and that have not been used.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_13",
    "description": "Access keys are long-term credentials for an IAM user or the AWS account root user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK).",
    "title": "1.13 Ensure there is only one active access key available for any single IAM user",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.13",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAccess keys are long-term credentials for an IAM user or the AWS account root user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK).\n\nOne of the best ways to protect your account is to not allow users to have multiple access keys as this is being used for programmatic requests.\n\n## Remediation\n\n### From Console:\n\nPerform the following action to deactivate access keys:\n\n1. Sign into the AWS console as an **Administrator** and navigate to the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, choose Users.\n3. Click on the **User name** for which more than one active access key exists.\n4. Click on **Security credentials** tab.\n5. Click on the **Make inactive** to `deactivate` the non-operational key.\n\n**Note**: Test your application to make sure that the active access key is working.\n\n### From Command Line:\n\nRun the `update-access-key` command below using the IAM user name and the non-operational access key IDs to deactivate the unnecessary key.\n\n```bash\naws iam update-access-key --access-key-id \u003caccess-key-id\u003e --status Inactive - -user-name \u003cuser-name\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_14",
    "description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.",
    "title": "1.14 Ensure access keys are rotated every 90 days or less",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.14",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAccess keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys to be rotated within 90 days.\n\nRotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used. Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.\n\n## Remediation\n\n### From Console:\n\nPerform the following action to deactivate access keys:\n\n1. Sign into the AWS console as an **Administrator** and navigate to the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, choose Users.\n3. Click on the **User name** for which access key exists that have not been rotated in 90 days.\n4. Click on **Security credentials** tab.\n5. Click on the **Make inactive** to `deactivate` the key that have not been rotated in 90 days.\n6. Click **Create access key** and update programmatic call with new key pair.\n\n**Note**: Test your application to make sure that the new key pair is working.\n\n### From Command Line:\n\nWhile the first access key is still active, create a second access key, which is active by default. Run the following command:\n\n```bash\naws iam create-access-key\n```\n\nAt this point, the user has two active access keys.\n  - Update all applications and tools to use the new access key pair.\n  - Change the state of the first access key to `Inactive` using below command:\n ```bash\n aws iam update-access-key\n ```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_15",
    "description": "IAM users are granted access to services, functions, and data through IAM policies. There are three ways to define policies for a user: 1) Edit the user policy directly, aka an inline, or user, policy; 2) attach a policy directly to a user; 3) add the user to an IAM group that has an attached policy. Only the third implementation is recommended.",
    "title": "1.15 Ensure IAM Users Receive Permissions Only Through Groups",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.15",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nIAM users are granted access to services, functions, and data through IAM policies. There are multiple ways to define policies for an user, such as:\n  - Add the user to an IAM group that has an attached policy.\n  - Attach an inline policy directly to an user.\n  - Attach a managed policy directly to an user.\n\nOnly the first implementation is recommended.\n\nAssigning IAM policy only through groups simplifies permissions management to a single, flexible layer consistent with organizational functional roles. By simplifying permissions management, the likelihood of excessive permissions is reduced.\n\n## Remediation\n\n### From Console\n\nPerform the following to create an IAM group and assign a list of policies to it:\n\n1. Sign into the AWS console and open the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, click **User groups** and then click **Create group**.\n3. In the `User group name` box, type the name of the group.\n4. In the list of policies, select the `check box` for each policy that you want to apply to all members of the group (You can attach up to 10 policies to this user group).\n5. Click **Create group**. Group is created with the list of permissions.\n\nPerform the following to add a user to a given group:\n\n1. Sign into the AWS console and open the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, click **User groups**.\n3. Select the `Group name` to add an user to.\n4. Click `Add users` to group.\n5. Select the users to be added to the group.\n6. Click **Add users**. Users are added to the group.\n\nPerform the following to remove a direct association between an user and the policy:\n\n1. Sign into the AWS console and open the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, click on **Users**.\n3. For each user:\n    - Select the user, it will take you to `Permissions` tab.\n    - Expand Permissions policies.\n    - Click `X` for each policy and then click **Remove** (depending on policy type).\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_16",
    "description": "IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.",
    "title": "1.16 Ensure IAM policies that allow full \"*:*\" administrative privileges are not attached",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.16",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nIAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security practice to grant least privilege that is, granting only the permissions required to perform a task. Determine what users need to do what and then accordingly create policies for them instead of allowing full administrative privileges.\n\nIt's more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later.\n\nProviding full administrative privileges instead of restricting to the minimum set of permissions that the user is required to do exposes the resources to potentially unwanted actions.\n\nIAM policies that have a statement with `\"Effect\"`: `\"Allow\"` with `\"Action\"`: `\"*\"` over `\"Resource\"`: `\"*\"` should be removed.\n\n## Remediation\n\n### From Console:\n\nPerform the following action to detach the policy that has full administrative privileges:\n\n1. Sign into the AWS console and open the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, click **Policies** and then search for the policy name having administrative privileges.\n3. Select the policy that needs to be detached. Go to **Policy usage** tab.\n4. Select all `Users`, `Groups`, `Roles` that have this policy attached.\n5. Click **Detach**. It will ask for re-confirmation.\n6. Click **Detach** again.\n\nRepeat the above steps for all the policies having administrative privileges.\n\n### From Command Line:\n\nPerform the following action to detach the policy that has full administrative privileges:\n\n1.  Lists all IAM users, groups, and roles that the specified managed policy is attached to.\n```bash\naws iam list-entities-for-policy --policy-arn \u003cpolicy_arn\u003e\n```\n2. Detach the policy from all IAM Users:\n```bash\naws iam detach-user-policy --user-name \u003ciam_user\u003e --policy-arn \u003cpolicy_arn\u003e\n```\n3. Detach the policy from all IAM Groups:\n```bash\naws iam detach-group-policy --group-name \u003ciam_group\u003e --policy-arn \u003cpolicy_arn\u003e\n```\n4. Detach the policy from all IAM Roles:\n```bash\naws iam detach-role-policy --role-name \u003ciam_role\u003e --policy-arn \u003cpolicy_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_17",
    "description": "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.",
    "title": "1.17 Ensure a support role has been created to manage incidents with AWS Support",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.17",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.\n\nBy implementing least privilege for access control, an IAM Role will require an appropriate IAM Policy to allow Support Center Access in order to manage Incidents with AWS Support.\n\nAll AWS Support plans include an unlimited number of account and billing support cases, with no long-term contracts. Support billing calculations are performed on a per-account basis for all plans. Enterprise Support plan customers have the option to include multiple enabled accounts in an aggregated monthly billing calculation. Monthly charges for the Business and Enterprise support plans are based on each month's AWS usage charges, subject to a monthly minimum, billed in advance.\n\n## Remediation\n\n### From Console\n\nPerform the following action to attach 'AWSSupportAccess' managed policy to the created IAM role :\n\n1. Sign into the AWS console and open the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, click **Roles** and then choose **Create Role**.\n3. For Role type, choose the Another AWS account.\n4. For Account ID, enter the AWS account ID of the AWS account to which you want to grant access to your resources.\n5. Choose **Next: Permissions**.\n6. Search for the managed policy `AWSSupportAccess`.\n7. Select the check box for the `AWSSupportAccess` managed policy.\n8. Choose **Next: Tags**.\n9. Choose **Next: Review**.\n10. For `Role name`, enter a name for your role. Then click **Create role**.\n\nYou can attach the above role to any user you want that is needed.\n\n### From Command Line\n\n1. Create a IAM policy for managing incidents with AWS.\n    - Create a trust relationship policy document that allows \u003ciam_user\u003e to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json.\n      ```json\n      {\n        \"Version\":\"2012-10-17\",\n        \"Statement\":[\n          {\n            \"Effect\":\"Allow\",\n            \"Principal\":{\n              \"AWS\":\"\u003ciam_user\u003e\"\n            },\n            \"Action\":\"sts:AssumeRole\"\n          }\n        ]\n      }\n      ```\n2. Create the IAM role using the above trust policy.\n```bash\naws iam create-role --role-name \u003caws_support_iam_role\u003e --assume-role-policy- document file:///tmp/TrustPolicy.json\n```\n3. Attach 'AWSSupportAccess' managed policy to the created IAM role.\n```bash\naws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSSupportAccess --role-name \u003caws_support_iam_role\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_18",
    "description": "AWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. \"AWS Access\" means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.",
    "title": "1.18 Ensure IAM instance roles are used for AWS resource access from instances",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.18",
      "cis_level": "2",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAWS access from AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. *AWS Access* means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.\n\nAWS IAM roles reduce the risks associated with sharing and rotating credentials that can be used outside of AWS itself. If credentials are compromised, they can be used from outside of the the AWS account they give access to. In contrast, in order to leverage role permissions an attacker would need to gain and maintain access to a specific instance to use the privileges associated with it.\n\nAdditionally, if credentials are encoded into compiled applications or other hard to change mechanisms, then they are even more unlikely to be properly rotated due to service disruption risks. As time goes on, credentials that cannot be rotated are more likely to be known by an increasing number of individuals who no longer work for the organization owning the credentials.\n\n## Remediation\n\n### From Console\n\nPerform the following action to check whether an Instance is associated with a role:\n\n1. Sign into the AWS console as a user(with appropriate permissions to view identity access management account settings).\n2. Open the EC2 Dashboard and choose **Instances**.\n3. Click the EC2 instance that performs AWS actions, in the lower pane details you can find **IAM Role**.\n4. If the IAM Role is blank, the instance is not assigned to any role.\n5. If the Role is filled in, it does not mean the instance might not also have credentials encoded on it for some activities.\n6. Audit all scripts and environment variables to ensure that none of them contain AWS credentials.\n7. Also examine all source code and configuration files of the application to verify if there is any credentials stored.\n\n**Note**: IAM roles can only be associated at the launch of an instance. To add a role to an instance, you must create a new instance.\n\nPerform the following action to create and attach a role to an Instance:\n\n1. In AWS IAM create a new role. Attach the right permissions policy as needed.\n2. In the AWS console launch a new instance with identical settings to the existing instance, and ensure that the newly created role is selected in **Configure Instance Details** page.\n3. Shutdown both the existing and the new instances.\n4. Detach disks from both the instances.\n5. Attach the existing instance disks to the new instance.\n6. Boot the new instance and you should have the same machine, but with the associated role with right level of permissions.\n\n**Note**:\n- When your environment has dependencies on a dynamically assigned **PRIVATE IP** address, you can create an AMI from the existing instance, destroy the old one and then when launching from the AMI, manually assign the previous private IP address.\n- When your environment has dependencies on a dynamically assigned **PUBLIC IP** address, ensure the address is retained and assign an instance role. Dependencies on dynamically assigned public IP addresses are a bad practice and, if possible, you may wish to rebuild the instance with a new elastic IP address and make the investment to remediate affected systems while assigning the system to a role.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_19",
    "description": "To enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. You can use ACM or IAM to store and deploy server certificates. Use IAM as a certificate manager only when you must support HTTPS connections in a region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.",
    "title": "1.19 Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.19",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nSSL/TLS server certificate is required to enable HTTPS connections to your website or application in AWS. You can use ACM or IAM to store and deploy server certificates. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS.\n\nYou cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console. Use IAM as a certificate manager only when you need HTTPS connections in a region that is not supported by ACM.\n\nRemoving expired SSL/TLS certificates eliminates the risk that an invalid certificate will be deployed accidentally to a resource such as AWS Elastic Load Balancer (ELB), which can damage the credibility of the application/website behind the ELB. As a best practice, it is recommended to delete expired certificates.\n\nAlso have to update configurations at respective services to ensure there is no interruption in application/website access.\n\n## Remediation\n\n### From Command Line\n\nRun the following command to delete the expired certificate:\n```bash\naws iam delete-server-certificate --server-certificate-name \u003cCERTIFICATE_NAME\u003e\n```\nWhen the preceding command is successful, it does not return any output.\n\n**Note**: By default, expired certificates never get deleted.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_20",
    "description": "Enable IAM Access analyzer for IAM policies about all resources in each region. IAM Access Analyzer is a technology introduced at AWS reinvent 2019. After the Analyzer is enabled in IAM, scan results are displayed on the console showing the accessible resources. Scans show resources that other accounts and federated users can access, such as KMS keys and IAM roles. So the results allow you to determine if an unintended user is allowed, making it easier for administrators to monitor least privileges access. Access Analyzer analyzes only policies that are applied to resources in the same AWS Region.",
    "title": "1.20 Ensure that IAM Access analyzer is enabled for all regions",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.20",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAccess Analyzer generates a finding when a policy on a resource within your zone of trust allows access from outside your zone of trust.\nEnable IAM Access analyzer for IAM policies about all resources. After the Analyzer is enabled in IAM, scan results are displayed on the console.\n\nAWS IAM Access Analyzer helps you identify the resources in your organization and accounts, such as Amazon S3 buckets or IAM roles, that are shared with an external entity. This lets you identify unintended access to your resources and data. IAM Access Analyzer continuously monitors all policies for S3 bucket, IAM roles, KMS(Key Management Service) keys, AWS Lambda functions, and Amazon SQS(Simple Queue Service) queues.\n\n## Remediation\n\n### From Console\n\nPerform the following to enable IAM Access analyzer for IAM policies:\n\n1. Sign into the AWS console and open the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n2. In the left navigation pane, choose **Access analyzer**.\n3. Click **Create analyzer**.\n4. On the `Create analyzer` page, confirm that the region displayed is the region where you want to enable Access Analyzer.\n5. Enter a name for the analyzer or can keep the system generated.\n6. Optional. add any tags that you want to apply to the analyzer.\n7. Choose **Create analyzer**.\n\n### From Command Line\n\nRun the following command:\n\n```bash\naws accessanalyzer create-analyzer --analyzer-name --type\n```\n\n**Note**: The type of analyzer to create. Only ACCOUNT and ORGANIZATION analyzers are supported. You can create only one analyzer per account per Region. You can create up to 5 analyzers per organization per Region.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v1.5.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v150_1_21",
    "description": "In multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provide via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations.",
    "title": "1.21 Ensure IAM users are managed centrally via identity federation or AWS Organizations for multi-account environments",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.21",
      "cis_level": "2",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nIn multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provide via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations.\n\nCentralizing IAM user management to a single identity provider, reduces complexity and thus less access management errors.\n\n## Remediation\n\n### From Console\n\nPerform the following action to check:\n\nFor multi-account AWS environments with an external identity provider\n\n1. Determine the master account for identity federation or IAM user management.\n2. Sign into the AWS console and open the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n3. In the left navigation pane, choose **Identity providers**.\n4. Verify the configuration.\n\nFor all accounts that should not have local users present. For each account\n\n1. Determine all accounts that should not have local users present\n2. Sign into the AWS console and open the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n3. Switch role into each identified account.\n4. Click **Users**.\n5. Confirm that no IAM users representing individuals are present.\n\nFor multi-account AWS environments implementing AWS Organizations without an external identity provider\n\n1. Determine all accounts that should not have local users present.\n2. Sign into the AWS console and open the [IAM Dashboard](https://console.aws.amazon.com/iam/home#/home).\n3. Switch role into each identified account.\n4. Click **Users**.\n5. Confirm that no IAM users representing individuals are present.\n\n**Note**: The remediation procedure might vary based on the individual organization's implementation of identity federation and/or AWS Organizations with the acceptance criteria that no non-service IAM users, and non-root accounts, are present outside the account providing centralized IAM user management.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 2 Storage \u003e 2.1 Simple Storage Service (S3)",
    "category_hierarchy": [
      "CIS v1.5.0",
      "2 Storage",
      "2.1 Simple Storage Service (S3)"
    ],
    "control_id": "aws_compliance.control.cis_v150_2_1_1",
    "description": "Amazon S3 provides a variety of no, or low, cost encryption options to protect data at rest.",
    "title": "2.1.1 Ensure all S3 buckets employ encryption-at-rest",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.1.1",
      "cis_level": "2",
      "cis_section_id": "2.1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nAmazon S3 provides multiple encryption options to protect data at rest. With default encryption, you can set the behavior for a S3 bucket so that all new objects are encrypted when they are stored in the bucket. The objects can be encrypted using server-side encryption with either Amazon S3-managed keys (SSE-S3) or customer master keys (CMKs) stored in AWS Key Management Service (AWS KMS) (SSE-KMS).\n\nEncrypting data at rest reduces the likelihood that it is unintentionally exposed and can nullify the impact of disclosure if the encryption remains unbroken.\n\n## Remediation\n\n### From Console\n\n1. Open AW S3 console [S3](https://console.aws.amazon.com/s3/).\n2. In the buckets list, choose the **Name** of the bucket that you want.\n3. Go to **Properties** tab and choose **Edit** under **Default encryption**.\n4. Select **Enable** and either select `SSE-S3` or `SSE-KMS`.\n5. Click **Save changes**.\n6. Repeat for all the buckets in your AWS account lacking encryption.\n\n### From Command Line\n\nRun either\n```bash\naws s3api put-bucket-encryption --bucket \u003cbucket name\u003e --server-side-encryption-configuration '{\"Rules\": [{\"ApplyServerSideEncryptionByDefault\":{\"SSEAlgorithm\": \"AES256\"}}]}'\n```\n\nor\n\n```bash\naws s3api put-bucket-encryption --bucket \u003cbucket name\u003e --server-side-encryption-configuration '{\"Rules\": [{\"ApplyServerSideEncryptionByDefault\": {\"SSEAlgorithm\": \"aws:kms\",\"KMSMasterKeyID\": \"aws/s3\"}}]}'\n```\n**Note**: The KMSMasterKeyID can be set to the master key of your choosing; aws/s3 is an AWS preconfigured default.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_2",
      "aws_compliance.benchmark.cis_v150_2_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_2/aws_compliance.benchmark.cis_v150_2_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 2 Storage \u003e 2.1 Simple Storage Service (S3)",
    "category_hierarchy": [
      "CIS v1.5.0",
      "2 Storage",
      "2.1 Simple Storage Service (S3)"
    ],
    "control_id": "aws_compliance.control.cis_v150_2_1_2",
    "description": "At the Amazon S3 bucket level, you can configure permissions through a bucket policy making the objects accessible only through HTTPS.",
    "title": "2.1.2 Ensure S3 Bucket Policy is set to deny HTTP requests",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.1.2",
      "cis_level": "2",
      "cis_section_id": "2.1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nAmazon S3 provides multiple encryption options to protect data at rest, transit \u0026 it's access. At the Amazon S3 bucket level, you can restrict bucket policy making the objects accessible only through HTTPS.\n\nBy default, Amazon S3 allows both HTTP and HTTPS requests. To achieve only allowing access to Amazon S3 objects through HTTPS you also have to explicitly deny access to HTTP requests. Bucket policies that allow HTTPS requests without explicitly denying HTTP requests will not comply with this recommendation.\n\n## Remediation\n\n### From Console\n\n1. Open the Amazon S3 console [S3](https://console.aws.amazon.com/s3/)\n2. Select the **Check box** next to the Bucket.\n3. Click on **Permissions**.\n4. Click **Bucket Policy**\n5. Add this to the existing policy filling in the required information\n```\n{\n   \"Sid\":\"\u003coptional\u003e\",\n   \"Effect\":\"Deny\",\n   \"Principal\":\"*\",\n   \"Action\":\"s3:GetObject\",\n   \"Resource\":\"arn:aws:s3:::\u003cbucket_name\u003e/*\",\n   \"Condition\":{\n      \"Bool\":{\n         \"aws:SecureTransport\":\"false\"\n      }\n..\n```\n6. Choose **Save**\n7. Repeat for all the buckets in your AWS account that contain sensitive data.\n\n### Using AWS Policy Generator\n\n1. Repeat steps 1-4 above.\n2. Click on **Policy Generator** at the bottom of the Bucket Policy Editor\n3. Select Policy Type `S3 Bucket Policy`\n4. Add Statements \n    - Effect = Deny \n    - Principal = * \n    - AWS Service = Amazon S3 \n    - Actions = GetObject \n    - Amazon Resource Name =\n5. Generate Policy\n6. Copy the text and add it to the Bucket Policy.\n\n### From Command Line\n\n1. Export the bucket policy to a json file.\n\n```bash\naws s3api get-bucket-policy --bucket \u003cbucket_name\u003e --query Policy --output text \u003e policy.json\n```\n\n2. Modify the policy.json file by adding in this statement\n\n```\n{\n            \"Sid\": \u003coptional\u003e\",\n            \"Effect\": \"Deny\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::\u003cbucket_name\u003e/*\",\n            \"Condition\": {\n                \"Bool\": {\n                    \"aws:SecureTransport\": \"false\"\n                }\n            }\n        }\n```\n\n3. Apply this modified policy back to the S3 bucket:\n\n```bash\naws s3api put-bucket-policy --bucket \u003cbucket_name\u003e --policy file://policy.json\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_2",
      "aws_compliance.benchmark.cis_v150_2_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_2/aws_compliance.benchmark.cis_v150_2_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 2 Storage \u003e 2.1 Simple Storage Service (S3)",
    "category_hierarchy": [
      "CIS v1.5.0",
      "2 Storage",
      "2.1 Simple Storage Service (S3)"
    ],
    "control_id": "aws_compliance.control.cis_v150_2_1_3",
    "description": "Once MFA Delete is enabled on your sensitive and classified S3 bucket it requires the user to have two forms of authentication.",
    "title": "2.1.3 Ensure MFA Delete is enabled on S3 buckets",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.1.3",
      "cis_level": "1",
      "cis_section_id": "2.1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nOnce MFA Delete is enable on your sensitive and classified S3 bucket it requires the user to have two forms of authentication.\n\nAdding MFA delete to an S3 bucket, requires additional authentication when you change the version state of your bucket or you delete and object version adding another layer of security in the event your security credentials are compromised or unauthorized access is granted.\n\n## Remediation\n\n### From Command Line\n\nPerform the steps below to enable MFA delete on an S3 bucket.\n**Note:** You cannot enable MFA Delete using the AWS Management Console. You must use the AWS CLI or API. You must use your root account to enable MFA Delete on S3 buckets\n\n1. Run the s3ap put-bucket-versioning command\n\n```bash\naws s3api put-bucket-versioning --profile my-root-profile \\\n--bucket Bucket_Name --versioning-configuration Status=Enabled,MFADelete=Enabled --mfa \\\n“arn:aws:iam::aws_account_id:mfa/root-account-mfa-device passcode”\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_2",
      "aws_compliance.benchmark.cis_v150_2_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_2/aws_compliance.benchmark.cis_v150_2_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 2 Storage \u003e 2.1 Simple Storage Service (S3)",
    "category_hierarchy": [
      "CIS v1.5.0",
      "2 Storage",
      "2.1 Simple Storage Service (S3)"
    ],
    "control_id": "aws_compliance.control.cis_v150_2_1_4",
    "description": "Amazon S3 buckets can contain sensitive data, that for security purposes should be discovered, monitored, classified and protected. Macie along with other 3rd party tools can automatically provide an inventory of Amazon S3 buckets.",
    "title": "2.1.4 Ensure all data in Amazon S3 has been discovered, classified and secured when required",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.1.4",
      "cis_level": "2",
      "cis_section_id": "2.1",
      "cis_type": "manual",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nMacie along with other 3rd party tools can be used to discover, monitor, classify, and inventory S3 buckets.\n\nUsing a Cloud service or 3rd Party software to continuously monitor and automate the process of data discovery and classification for S3 buckets using machine learning and pattern matching is a strong defense in protecting that information.\n\n## Remediation\n\n### From Console\n\n1. Enable Macie through the [Macie console](https://console.aws.amazon.com/macie/).\n2. Create an S3 bucket to use as a repository for sensitive data discovery results.\n3. Select the buckets you want Macie to analyze and then create a job.\n4. After the job has run, review the findings by selecting **Findings** in the left pane.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_2",
      "aws_compliance.benchmark.cis_v150_2_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_2/aws_compliance.benchmark.cis_v150_2_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 2 Storage \u003e 2.1 Simple Storage Service (S3)",
    "category_hierarchy": [
      "CIS v1.5.0",
      "2 Storage",
      "2.1 Simple Storage Service (S3)"
    ],
    "control_id": "aws_compliance.control.cis_v150_2_1_5",
    "description": "Amazon S3 provides Block public access (bucket settings) and Block public access (account settings) to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However, an IAM principle with sufficient S3 permissions can enable public access at the bucket and/or object level. While enabled, Block public access (bucket settings) prevents an individual bucket, and its contained objects, from becoming publicly accessible. Similarly, Block public access (account settings) prevents all buckets, and contained objects, from becoming publicly accessible across the entire account.",
    "title": "2.1.5 Ensure that S3 Buckets are configured with 'Block public access (bucket settings)'",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.1.5",
      "cis_level": "1",
      "cis_section_id": "2.1",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nAmazon S3 provides *Block public access (bucket settings)* and *Block public access (account settings)* to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However with an IAM principle with sufficient S3 permissions can enable public access at the bucket and/or object level.\n\nWhile enabled, Block public access (bucket settings) prevents an individual bucket and its objects, from becoming publicly accessible.\nSimilarly, Block public access (account settings) prevents all buckets and it's objects in an account, from becoming publicly accessible.\n\nAmazon S3 *Block public access (bucket settings)* prevents the accidental or malicious public exposure of data contained within the respective bucket(s).\n\nAmazon S3 *Block public access (account settings)* prevents the accidental or malicious public exposure of data contained within all buckets of the respective AWS account.\n\nWhether blocking public access to all or some buckets is an organizational decision that should be based on data sensitivity, least privilege, and use case.\n\nWhen you apply Block Public Access settings to an account, the settings apply to all AWS Regions globally. The settings might not take effect in all Regions immediately or simultaneously, but they eventually propagate to all Regions.\n\n## Remediation\n\n### From Console\n\nBy using Block Public Access (bucket settings):\n\n1. Login to AWS Management Console and open the [Amazon S3 console](https://console.aws.amazon.com/s3/).\n2. Click on the bucket name.\n3. Go to **Permissions** tab.\n4. Click **Edit** for `Block all public access (bucket setting)`.\n5. Ensure that block public access settings are set appropriately for this bucket.\n6. Repeat for all the buckets in your AWS account that contain sensitive data.\n\nBy using Block Public Access (account settings):\n\n1. Login to AWS Management Console and open the [Amazon S3 console](https://console.aws.amazon.com/s3/).\n2. In the left navigation pane, choose **Block Public Access settings for this account**\n3. Ensure that block public access settings are set appropriately for your AWS account.\n\n### From Command Line\n\nTo set Block Public access settings for the buckets, run the following commands:\n\n1. List all of the S3 Buckets\n\n```bash\naws s3 ls\n```\n\n2. Set the public access to true on that bucket\n\n```bash\naws s3api put-public-access-block --bucket \u003cname-of-bucket\u003e --public-access- block-configuration \"BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPu blicBuckets=true\"\n```\n\nTo set Block Public access settings for the account, run the following command:\n\n```bash\naws s3control put-public-access-block --public-access-block-configuration BlockPublicAcls=true, IgnorePublicAcls=true, BlockPublicPolicy=true, RestrictPublicBuckets=true --account-id \u003cvalue\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_2",
      "aws_compliance.benchmark.cis_v150_2_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_2/aws_compliance.benchmark.cis_v150_2_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 2 Storage \u003e 2.2 Elastic Compute Cloud (EC2)",
    "category_hierarchy": [
      "CIS v1.5.0",
      "2 Storage",
      "2.2 Elastic Compute Cloud (EC2)"
    ],
    "control_id": "aws_compliance.control.cis_v150_2_2_1",
    "description": "Elastic Compute Cloud (EC2) supports encryption at rest when using the Elastic Block Store (EBS) service. While disabled by default, forcing encryption at EBS volume creation is supported.",
    "title": "2.2.1 Ensure EBS Volume Encryption is Enabled in all Regions",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.2.1",
      "cis_level": "1",
      "cis_section_id": "2.2",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/EBS"
    },
    "documentation": "## Description\n\nElastic Compute Cloud (EC2) supports encryption at rest when using the Elastic Block Store(EBS) service. While disabled by default, forcing encryption at EBS volume creation is supported.\n\nDefault EBS volume encryption only applies to newly created EBS volumes. Existing EBS volumes are not converted automatically.\n\nEncrypting data at rest reduces the likelihood that it is unintentionally exposed and can nullify the impact of disclosure if the encryption remains unbroken.\n\n## Remediation\n\n### From Console\n\n1. Open the Amazon EC2 console using [EC2](https://console.aws.amazon.com/ec2/)\n2. Under **Account attributes**, click `EBS encryption`.\n3. Click **Manage**.\n4. Click the `Enable` checkbox.\n5. Click `Update EBS encryption`\n6. Repeat for every region requiring the change.\n\n### From Command Line\n\n1. Run\n```bash\naws --region \u003cregion\u003e ec2 enable-ebs-encryption-by-default.\n```\n2. Verify that **EbsEncryptionByDefault**: **true** is displayed.\n3. Review every region in-use.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_2",
      "aws_compliance.benchmark.cis_v150_2_2"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_2/aws_compliance.benchmark.cis_v150_2_2",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 2 Storage \u003e 2.3 Relational Database Service (RDS)",
    "category_hierarchy": [
      "CIS v1.5.0",
      "2 Storage",
      "2.3 Relational Database Service (RDS)"
    ],
    "control_id": "aws_compliance.control.cis_v150_2_3_1",
    "description": "Amazon RDS encrypted DB instances use the industry standard AES-256 encryption algorithm to encrypt your data on the server that hosts your Amazon RDS DB instances. After your data is encrypted, Amazon RDS handles authentication of access and decryption of your data transparently with a minimal impact on performance.",
    "title": "2.3.1 Ensure that encryption is enabled for RDS Instances",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.3.1",
      "cis_level": "1",
      "cis_section_id": "2.3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/RDS"
    },
    "documentation": "## Description\n\nAmazon RDS encrypted DB instances use the industry standard AES-256 encryption algorithm to encrypt your data on the server that hosts your Amazon RDS DB instances. After your data is encrypted, Amazon RDS handles authentication of access and decryption of your data transparently with a minimal impact on performance.\n\nDatabases that hold sensitive and critical data, it is highly recommended to implement encryption in order to protect your data from unauthorized access. With RDS encryption enabled, the data stored on the instance underlying storage, the automated backups, Read Replicas, and snapshots, become all encrypted.\n\n## Remediation\n\n### From Console\n\n1. Login to the AWS [RDS console](https://console.aws.amazon.com/rds/).\n2. In the left navigation panel, click on `Databases`\n3. Select the Database instance that needs to encrypt.\n4. Click on **Actions** button placed at the top right and select **Take Snapshot**.\n5. On the Take Snapshot page, enter a database name of which want to take snapshot in the Snapshot Name field and click Take Snapshot.\n6. Select the newly created snapshot and click the **Copy** from the dashboard top menu.\n7. On the Make Copy of DB Snapshot page, perform the following:\n   1. In the New DB Snapshot Identifier field, Enter a name for the `new snapshot`.\n   2. Check `Copy Tags`, New snapshot must have the same tags as the source snapshot.\n   3. Select Yes from the **Enable Encryption** dropdown list to enable encryption, Can choose to use the AWS default encryption key or custom key from Master Key dropdown list.\n8. Click **Copy Snapshot** to create an encrypted copy of selected instance snapshot.\n9. Select the new Snapshot Encrypted Copy and click Restore Snapshot button from the dashboard top menu, This will restore the encrypted snapshot to a new database instance.\n10. On the Restore DB Instance page, enter a unique name for the new database instance in the DB Instance Identifier field.\n11. Review the instance configuration details and click **Restore DB Instance**.\n12. As the new instance provisioning process is completed can update application configuration to refer to the endpoint of the new Encrypted database instance once the database endpoint is changed at the application level, can remove the unencrypted instance.\n\n### From Command Line\n\n1. Run describe-db-instances command to list all RDS database names available in the selected AWS region, The command output should return database instance identifier.\n\n```bash\naws rds describe-db-instances --region \u003cregion-name\u003e --query 'DBInstances[*].DBInstanceIdentifier'\n```\n\n2. Run create-db-snapshot command to create a snapshot for the selected database instance, The command output will return the new snapshot with name DB\nSnapshot Name.\n\n```bash\naws rds create-db-snapshot --region \u003cregion-name\u003e --db-snapshot-identifier \u003cDB-Snapshot-Name\u003e --db-instance-identifier \u003cDB-Name\u003e\n```\n\n3. Now run list-aliases command to list the KMS keys aliases available in a specified region, The command output should return each key alias currently available. For our RDS encryption the activation process, locate the ID of the AWS default KMS key.\n\n```bash\naws kms list-aliases --region \u003cregion-name\u003e\n```\n\n4. Run copy-db-snapshot command using the default KMS key ID for RDS instances returned earlier to create an encrypted copy of the database instance snapshot, the command output will return the encrypted instance snapshot configuration.\n\n```bash\naws rds copy-db-snapshot --region \u003cregion-name\u003e --source-db-snapshotidentifier \u003cDB-Snapshot-Name\u003e --target-db-snapshot-identifier \u003cDB-SnapshotName-Encrypted\u003e --copy-tags --kms-key-id \u003cKMS-ID-For-RDS\u003e\n```\n\n5. Run restore-db-instance-from-db-snapshot command to restore the encrypted snapshot created at the previous step to a new database instance, if successful, the command output should return the new encrypted database instance configuration.\n\n```bash\naws rds restore-db-instance-from-db-snapshot --region \u003cregion-name\u003e --dbinstance-identifier \u003cDB-Name-Encrypted\u003e --db-snapshot-identifier \u003cDBSnapshot-Name-Encrypted\u003e\n```\n\n6. Run describe-db-instances command to list all RDS database names, available in the selected AWS region, output will return database instance identifier name. Select encrypted database name that we just created DB-Name-Encrypted.\n\n```bash\naws rds describe-db-instances --region \u003cregion-name\u003e --query 'DBInstances[*].DBInstanceIdentifier'\n```\n\n7. Run again describe-db-instances command using the RDS instance identifier returned earlier, to determine if the selected database instance is encrypted, the command output should return the encryption status True.\n\n```bash\naws rds describe-db-instances --region \u003cregion-name\u003e --db-instance-identifier \u003cDB-Name-Encrypted\u003e --query 'DBInstances[*].StorageEncrypted'\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_2",
      "aws_compliance.benchmark.cis_v150_2_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_2/aws_compliance.benchmark.cis_v150_2_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 2 Storage \u003e 2.3 Relational Database Service (RDS)",
    "category_hierarchy": [
      "CIS v1.5.0",
      "2 Storage",
      "2.3 Relational Database Service (RDS)"
    ],
    "control_id": "aws_compliance.control.cis_v150_2_3_2",
    "description": "Ensure that RDS database instances have the Auto Minor Version Upgrade flag enabled in order to receive automatically minor engine upgrades during the specified maintenance window. So, RDS instances can get the new features, bug fixes, and security patches for their database engines.",
    "title": "2.3.2 Ensure Auto Minor Version Upgrade feature is Enabled for RDS Instances",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.3.2",
      "cis_level": "1",
      "cis_section_id": "2.3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/RDS"
    },
    "documentation": "## Description\n\nEnsure that RDS database instances have the Auto Minor Version Upgrade flag enabled in order to receive automatically minor engine upgrades during the specified maintenance window. So, RDS instances can get the new features, bug fixes, and security patches for their database engines.\n\nAWS RDS will occasionally deprecate minor engine versions and provide new ones for an upgrade. When the last version number within the release is replaced, the version changed is considered minor. With Auto Minor Version Upgrade feature enabled, the version upgrades will occur automatically during the specified maintenance window so your RDS instances can get the new features, bug fixes, and security patches for their database engines.\n\n## Remediation\n\n### From Console\n\n1. Log in to the AWS management console and navigate to the RDS dashboard at https://console.aws.amazon.com/rds/.\n2. In the left navigation panel, click on **Databases**.\n3. Select the RDS instance that wants to update.\n4. Click on the **Modify** button placed on the top right side.\n5. On the **Modify DB Instance: instance identifier** page, In the **Maintenance** section, select **Auto minor version upgrade** click on the **Yes** radio button.\n6. At the bottom of the page click on **Continue**, check to Apply Immediately to apply the changes immediately, or select **Apply during the next scheduled maintenance window** to avoid any downtime.\n7. Review the changes and click on **Modify DB Instance**. The instance status should change from available to modifying and back to available. Once the feature is enabled, the **Auto Minor Version Upgrade** status should change to Yes.\n\n### From Command Line\n\n1. Run **describe-db-instances** command to list all RDS database instance names, available in the selected AWS region:\n\n```bash\naws rds describe-db-instances --region \u003cregionName\u003e --query 'DBInstances[*].DBInstanceIdentifier'\n```\n\n2. The command output should return each database instance identifier.\n3. Run the **modify-db-instance** command to modify the selected RDS instance configuration this command will apply the changes immediately, Remove **--apply-immediately** to apply changes during the next scheduled maintenance window and avoid any downtime:\n\n```bash\naws rds modify-db-instance --region \u003cregionName\u003e --db-instance-identifier \u003cdbInstanceIdentifier\u003e --auto-minor-version-upgrade --apply-immediately\n```\n\n4. The command output should reveal the new configuration metadata for the RDS instance and check **AutoMinorVersionUpgrade** parameter value.\n5. Run **describe-db-instances** command to check if the Auto Minor Version Upgrade feature has been successfully enable:\n\n```bash\naws rds describe-db-instances --region \u003cregionName\u003e --db-instance-identifier \u003cdbInstanceIdentifier\u003e --query 'DBInstances[*].AutoMinorVersionUpgrade'\n```\n\n6. The command output should return the feature current status set to **true**, the feature is **enabled** and the minor engine upgrades will be applied to the selected RDS instance.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_2",
      "aws_compliance.benchmark.cis_v150_2_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_2/aws_compliance.benchmark.cis_v150_2_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 2 Storage \u003e 2.3 Relational Database Service (RDS)",
    "category_hierarchy": [
      "CIS v1.5.0",
      "2 Storage",
      "2.3 Relational Database Service (RDS)"
    ],
    "control_id": "aws_compliance.control.cis_v150_2_3_3",
    "description": "Ensure and verify that RDS database instances provisioned in your AWS account do restrict unauthorized access in order to minimize security risks. To restrict access to any publicly accessible RDS database instance, you must disable the database Publicly Accessible flag and update the VPC security group associated with the instance.",
    "title": "2.3.3 Ensure that public access is not given to RDS Instance",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.3.3",
      "cis_level": "1",
      "cis_section_id": "2.3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/RDS"
    },
    "documentation": "## Description\n\nEnsure and verify that RDS database instances provisioned in your AWS account do restrict unauthorized access in order to minimize security risks. To restrict access to any publicly accessible RDS database instance, you must disable the database Publicly Accessible flag and update the VPC security group associated with the instance.\n\nEnsure that no public-facing RDS database instances are provisioned in your AWS account and restrict unauthorized access in order to minimize security risks. When the RDS instance allows unrestricted access (0.0.0.0/0), everyone and everything on the Internet can establish a connection to your database and this can increase the opportunity for malicious activities such as brute force attacks, PostgreSQL injections, or DoS/DDoS attacks.\n\n## Remediation\n\n### From Console\n\n1. Log in to the AWS management console and navigate to the RDS dashboard at https://console.aws.amazon.com/rds/.\n2. Under the navigation panel, On RDS Dashboard, click **Databases**.\n3. Select the RDS instance that you want to update.\n4. Click **Modify** from the dashboard top menu.\n5. On the Modify DB Instance panel, under the **Connectivity** section, click on **Additional connectivity configuration** and update the value for **Publicly Accessible** to Not publicly accessible to restrict public access. Follow the below steps to update subnet configurations:\n   * Select the **Connectivity and security** tab, and click on the VPC attribute value inside the **Networking** section.\n   * Select the **Details** tab from the VPC dashboard bottom panel and click on Route table configuration attribute value.\n   * On the Route table details page, select the Routes tab from the dashboard bottom panel and click on **Edit routes**.\n   * On the Edit routes page, update the Destination of Target which is set to **igw-xxxxx** and click on **Save** routes.\n6. On the Modify DB Instance panel Click on **Continue** and In the Scheduling of modifications section, perform one of the following actions based on your requirements:\n   * Select Apply during the next scheduled maintenance window to apply the changes automatically during the next scheduled maintenance window.\n   * Select Apply immediately to apply the changes right away. With this option, any pending modifications will be asynchronously applied as soon as possible, regardless of the maintenance window setting for this RDS database instance. Note that any changes available in the pending modifications queue are also applied. If any of the pending modifications require downtime, choosing this option can cause unexpected downtime for the application.\n7. Repeat steps 3 to 6 for each RDS instance available in the current region.\n8. Change the AWS region from the navigation bar to repeat the process for other regions.\n\n### From Command Line\n\n1. Run **describe-db-instances** command to list all RDS database names identifiers, available in the selected AWS region:\n\n```bash\naws rds describe-db-instances --region \u003cregion-name\u003e --query 'DBInstances[*].DBInstanceIdentifier'\n```\n\n2. The command output should return each database instance identifier.\n3. Run **modify-db-instance** command to modify the selected RDS instance configuration. Then use the following command to disable the **Publicly Accessible** flag for the selected RDS instances. This command use the apply-immediately flag. If you want **to avoid any downtime --no-apply-immediately flag can be used:**\n\n```bash\naws rds modify-db-instance --region \u003cregion-name\u003e --db-instance-identifier \u003cdb-name\u003e --no-publicly-accessible --apply-immediately\n```\n\n4. The command output should reveal the **PubliclyAccessible** configuration under pending values and should get applied at the specified time.\n5. Updating the Internet Gateway Destination via AWS CLI is not currently supported To update information about Internet Gateway use the AWS Console Procedure.\n6. Repeat steps 1 to 5 for each RDS instance provisioned in the current region.\n7. Change the AWS region by using the --region filter to repeat the process for other regions.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_2",
      "aws_compliance.benchmark.cis_v150_2_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_2/aws_compliance.benchmark.cis_v150_2_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 2 Storage \u003e 2.4 Elastic File System (EFS)",
    "category_hierarchy": [
      "CIS v1.5.0",
      "2 Storage",
      "2.4 Elastic File System (EFS)"
    ],
    "control_id": "aws_compliance.control.cis_v150_2_4_1",
    "description": "EFS data should be encrypted at rest using AWS KMS (Key Management Service).",
    "title": "2.4.1 Ensure that encryption is enabled for EFS file systems",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.4.1",
      "cis_level": "1",
      "cis_section_id": "2.4",
      "cis_type": "manual",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/EFS"
    },
    "documentation": "## Description\n\nEFS data should be encrypted at rest using AWS KMS (Key Management Service).\n\nData should be encrypted at rest to reduce the risk of a data breach via direct access to the storage device.\n\n## Remediation\n\nIt is important to note that EFS file system data at rest encryption must be turned on when creating the file system.\nIf an EFS file system has been created without data at rest encryption enabled then you must create another EFS file system with the correct configuration and transfer the data.\n\nSteps to create an EFS file system with data encrypted at rest:\n\n### From Console\n\n1. Login to the AWS Management Console and Navigate to **Elastic File System (EFS) dashboard**.\n2. Select **File Systems** from the left navigation panel.\n3. Click **Create File System** button from the dashboard top menu to start the file system setup process.\n4. On the **Configure file system access** configuration page, perform the following actions.\n   * Choose the right VPC from the VPC dropdown list.\n   * Within Create mount targets section, select the checkboxes for all of the Availability Zones (AZs) within the selected VPC. These will be your mount targets.\n   * Click **Next step** to continue.\n5. Perform the following on the **Configure optional settings** page.\n   * Create **tags** to describe your new file system.\n   * Choose **performance mode** based on your requirements.\n   * Check **Enable encryption** checkbox and choose **aws/elasticfilesystem** from Select KMS master key dropdown list to enable encryption for the new file system using the default master key provided and managed by AWS KMS.\n   * Click **Next step** to continue.\n6. Review the file system configuration details on the **review and create** page and then click **Create File System** to create your new AWS EFS file system.\n7. Copy the data from the old unencrypted EFS file system onto the newly create encrypted file system.\n8. Remove the unencrypted file system as soon as your data migration to the newly create encrypted file system is completed.\n9. Change the AWS region from the navigation bar and repeat the entire process for other aws regions.\n\n\n### From Command Line\n\n1. Run describe-file-systems command to describe the configuration information available for the selected (unencrypted) file system (see Audit section to identify the right resource):\n\n```bash\naws efs describe-file-systems --region \u003cregion\u003e --file-system-id \u003cfilesystem-id from audit section step 2 output\u003e\n```\n\n2. The command output should return the requested configuration information.\n3. To provision a new AWS EFS file system, you need to generate a universally unique identifier (UUID) in order to create the token required by the create-filesystem command. To create the required token, you can use a randomly generated UUID from \"https://www.uuidgenerator.net\".\n4. Run create-file-system command using the unique token created at the previous step\n\n```bash\naws efs create-file-system --region \u003cregion\u003e --creation-token \u003cToken (randomly generated UUID from step 3)\u003e --performance-mode generalPurpose --encrypted\n```\n\n5. The command output should return the new file system configuration metadata.\n6. Run create-mount-target command using the newly created EFS file system ID returned at the previous step as identifier and the ID of the Availability Zone (AZ) that will represent the mount target:\n\n```bash\naws efs create-mount-target --region \u003cregion\u003e --file-system-id \u003cfile-systemid\u003e --subnet-id \u003csubnet-id\u003e\n```\n\n7. The command output should return the new mount target metadata.\n8. Now you can mount your file system from an EC2 instance.\n9. Copy the data from the old unencrypted EFS file system onto the newly create encrypted file system.\n10. Remove the unencrypted file system as soon as your data migration to the newly create encrypted file system is completed.\n\n```bash\naws efs delete-file-system --region \u003cregion\u003e --file-system-id \u003cunencryptedfile-system-id\u003e\n```\n\n11. Change the AWS region by updating the --region and repeat the entire process for other aws regions.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_2",
      "aws_compliance.benchmark.cis_v150_2_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_2/aws_compliance.benchmark.cis_v150_2_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_1",
    "description": "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).",
    "title": "3.1 Ensure CloudTrail is enabled in all regions",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.1",
      "cis_level": "1",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nAWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).\n\nThe AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,\n\n- ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected\n- ensuring that a multi-regions trail exists will ensure that Global Service Logging is enabled for a trail by default to capture recording of events generated on AWS global services\n- for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account\n\n## Remediation\n\nPerform the following to enable global (Multi-region) CloudTrail logging:\n\n### From Console\n\n1. Sign in to the AWS Management Console and open the IAM console at [cloudtrail](https://console.aws.amazon.com/cloudtrail)\n2. Click on Trails on the left navigation pane\n3. Click Get Started Now , if presented\n\n   - Click Add new trail\n   - Enter a trail name in the Trail name box\n   - Set the Apply trail to all regions option to Yes\n   - Specify an S3 bucket name in the S3 bucket box\n   - Click Create\n\n4. If 1 or more trails already exist, select the target trail to enable for global logging\n5. Click the edit icon (pencil) next to Apply trail to all regions , Click Yes and\n   Click Save.\n6. Click the edit icon (pencil) next to Management Events click All for setting\n   Read/Write Events and Click Save.\n\n### From Command Line\n\n```bash\naws cloudtrail create-trail --name \u003ctrail_name\u003e --bucket-name \u003cs3_bucket_for_cloudtrail\u003e --is-multi-region-trail\nNote: Creating CloudTrail via CLI without providing any overriding options configures Management Events to 'set' All 'type' of Read/Writes by default\n\naws cloudtrail update-trail --name \u003ctrail_name\u003e --is-multi-region-trail\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_2",
    "description": "CloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.",
    "title": "3.2 Ensure CloudTrail log file validation is enabled",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.2",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nCloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.\n\nThe AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally, enabling log file validation will provide additional integrity checking of CloudTrail logs.\n\n## Remediation\n\nPerform the following to enable global (Multi-region) CloudTrail logging:\n\n### From Console\n\n1. Sign in to the AWS Management Console and open the IAM console at [cloudtrail](https://console.aws.amazon.com/cloudtrail)\n2. Click on `Trails` on the left navigation pane\n3. Click on target trail\n4. Within the `S3` section click on the edit icon (pencil)\n5. Click `Advanced`\n6. Click on the **Yes** radio button in section Enable `log file validation`\n7. Click Save\n\n### From Command Line\n\n```bash\naws cloudtrail update-trail --name \u003ctrail_name\u003e --enable-log-file-validation\n```\n\n**Note**:  that periodic validation of logs using these digests can be performed by running the\nfollowing command:\n\n```bash\naws cloudtrail validate-logs --trail-arn \u003ctrail_arn\u003e --start-time \u003cstart_time\u003e --end-time \u003cend_time\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_3",
    "description": "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevent public access to the CloudTrail logs.",
    "title": "3.3 Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.3",
      "cis_level": "1",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nCloudTrail logs a record of every API call made in your AWS account. These logs file are\nstored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL)\napplied to the S3 bucket that CloudTrail logs to prevent public access to the CloudTrail logs.\n\nAllowing public access to CloudTrail log content might aid an adversary in identifying weaknesses in the affected account's use or configuration.\n\n## Remediation\n\nPerform the following to remove any public access that has been granted to the bucket via an ACL or S3 bucket policy:\n\n### From Console\n\nUsing **Block public access** settings.\n\n1. Go to Amazon S3 console at [S3](https://console.aws.amazon.com/s3/home)\n2. Choose the name of the bucket where your CloudTrail are stored.\n3. Choose **Permissions** and then choose **Block public access** settings.\n4. Choose Edit, select all four options under `Block all public access` check box, and then choose save changes.\n5. If prompted, enter `confirm` and then choose **Confirm**.\n\nUsing **ACL** and **Bucket Policy** settings.\n\n1. Go to Amazon S3 console at [S3](https://console.aws.amazon.com/s3/home)\n2. Choose the name of the bucket where your CloudTrail are stored.\n3. Choose **Permissions** and navigate to `Access control list (ACL)`\n4. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row\nidentifies the grantee and the permissions granted.\n5. Ensure no rows exists that have the Grantee set to Everyone or the Grantee set to\nAny Authenticated User.\n6. If the Edit bucket policy button is present, click it to review the bucket policy.\n7. Ensure the policy does not contain a Statement having an Effect set to Allow and a\nPrincipal set to `\"*\"` or `{\"AWS\" : \"*\"}`\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_4",
    "description": "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.",
    "title": "3.4 Ensure CloudTrail trails are integrated with CloudWatch Logs",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.4",
      "cis_level": "1",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nCloudTrail is a web service that records AWS API calls made in a given account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service.\n\nCloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs in a specified Amazon S3 bucket for long-term analysis, you can perform real-time analysis by configuring CloudTrail to send logs to CloudWatch Logs.\n\nFor a trail that is enabled in all Regions in an account, CloudTrail sends log files from all those Regions to a CloudWatch Logs log group.\n\nSending CloudTrail logs to CloudWatch Logs will facilitate real-time and historic activity logging based on user, API, resource, and IP address, and provides opportunity to establish alarms and notifications for anomalous or sensitivity account activity.\n\n## Remediation\n\nTo ensure that CloudTrail trails are integrated with CloudWatch Logs, perform the following to establish the prescribed state:\n\n### From Console\n\n1. Open the CloudTrail console at [CloudTrail](https://console.aws.amazon.com/cloudtrail/).\n2. Choose Trails.\n3. Choose a trail that there is no value for in the CloudWatch Logs Log group column.\n4. Scroll down to the `CloudWatch Logs` section and then choose Edit.\n5. Select the `Enabled` check box.\n6. For Log group field, do one of the following:\n    - To use the default log group, keep the name as is.\n    - To use an existing log group, choose Existing and then enter the name of the log group to use.\n    - To create a new log group, choose New and then enter a name for the log group to create.\n7. For IAM role, do one of the following:\n    - To use an existing role, choose Existing and then choose the role from the drop-down list.\n    - To create a new role, choose New and then enter a name for the role to create. The new role is assigned a policy that grants the necessary permissions.\n    - To view the permissions granted to the role, expand the Policy document.\n8. Choose Save changes.\n\n### From Command Line\n\n```bash\naws cloudtrail update-trail --name \u003ctrail_name\u003e --cloudwatch-logs-log-grouparn \u003ccloudtrail_log_group_arn\u003e --cloudwatch-logs-role-arn \u003ccloudtrail_cloudwatchLogs_role_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_5",
    "description": "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended AWS Config be enabled in all regions.",
    "title": "3.5 Ensure AWS Config is enabled in all regions",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.5",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/Config"
    },
    "documentation": "## Description\n\nAWS Config is a web service that performs configuration management of supported AWS resources in your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), and any configuration changes between resources.\n\nThe AWS configuration item history captured by AWS Config enables security analysis, resource change tracking, and compliance auditing.\n\n## Remediation\n\nTo implement AWS Config configuration:\n\n### From Console\n\n1. Open the AWS Config console at [Config](https://console.aws.amazon.com/config/).\n2. Select the Region to configure AWS Config in.\n3. On the Settings page, do the following:\n    - Under Resource types to record, select Record all resources supported in this region and Include global resources (e.g., AWS IAM resources).\n    - Under Amazon S3 bucket, specify the bucket to use or create a bucket and optionally include a prefix.\n    - Under Amazon SNS topic, select an Amazon SNS topic from your account or create one.\n    - Under AWS Config role, either choose Create AWS Config service-linked role or choose Choose a role from your account and then select the role to use.\n4. Choose Next.\n5. On the AWS Config rules page, choose Skip.\n6. Choose **Confirm**.\n\n### From Command Line\n\n1. Ensure there is an appropriate S3 bucket, SNS topic, and IAM role per the AWS Config Service prerequisites.\n2. Run this command to set up the configuration recorder\n\n```bash\naws configservice subscribe --s3-bucket my-config-bucket --sns-topic arn:aws:sns:us-east-1:012345678912:my-config-notice --iam-role arn:aws:iam::012345678912:role/myConfigRole\n```\n\n3. Run this command to start the configuration recorder:\n\n```bash\nstart-configuration-recorder --configuration-recorder-name \u003cvalue\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_6",
    "description": "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.",
    "title": "3.6 Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.6",
      "cis_level": "1",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nAWS S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.\n\nBy enabling S3 bucket logging on target S3 buckets, it is possible to capture all events which may affect objects within any target buckets. Configuring logs to be placed in a separate bucket allows access to log information which can be useful in security and incident response workflows.\n\n## Remediation\n\nPerform the following to enable S3 bucket logging:\n\n### From Console\n\n1. Open the Amazon S3 console at [S3](https://console.aws.amazon.com/s3/).\n2. Choose the bucket used for CloudTrail.\n3. Choose **Properties**.\n4. Choose **Server access logging**.\n5. Choose **Edit**, then select `Enable`.\n6. Select a bucket from the `Target bucket` list, and optionally enter a prefix.\n7. Choose Save.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_7",
    "description": "AWS CloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses Hardware Security Modules (HSMs) to protect the security of encryption keys. CloudTrail logs can be configured to leverage server side encryption (SSE) and KMS customer created master keys (CMK) to further protect CloudTrail logs. It is recommended that CloudTrail be configured to use SSE-KMS.",
    "title": "3.7 Ensure CloudTrail logs are encrypted at rest using KMS CMKs",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.7",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nCloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (AWS KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses hardware security modules (HSMs) to protect the security of encryption keys.\n\nYou can configure CloudTrail logs to leverage server-side encryption (SSE) and AWS KMS customer-created master keys (CMKs) to further protect CloudTrail logs.\n\nConfiguring CloudTrail to use SSE-KMS provides additional confidentiality controls on log data because a given user must have S3 read permission on the corresponding log bucket and must be granted decrypt permission by the CMK policy.\n\n## Remediation\n\nPerform the following to configure CloudTrail to use SSE-KMS:\n\n### From Console\n\n1. Open the CloudTrail console at [CloudTrail](https://console.aws.amazon.com/cloudtrail)\n2. Choose Trails, select the trail to update, by clicking **Edit** button in `General details`.\n3. In the `Storage location`,\n    - For `Log file SSE-KMS encryption`, choose `Enabled`.\n4. In `Customer managed AWS KMS key`, select an existing CMK from the KMS key Id drop-down menu\n    - Note: Ensure the CMK is located in the same region as the S3 bucket\n    - Note: You will need to apply a KMS Key policy on the selected CMK in order for CloudTrail as a service to encrypt and decrypt log files using the CMK provided.\n    - To create a key, enter an alias for the key in the `KMS alias` field. The key is created in the same Region as the bucket.\n5. Click Save\n\n### From Command Line\n\n```bash\naws cloudtrail update-trail --name \u003ctrail_name\u003e --kms-id \u003ccloudtrail_kms_key\u003e aws kms put-key-policy --key-id \u003ccloudtrail_kms_key\u003e --policy \u003ccloudtrail_kms_key_policy\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_8",
    "description": "AWS Key Management Service (KMS) allows customers to rotate the backing key which is key material stored within the KMS which is tied to the key ID of the Customer Created customer master key (CMK). It is the backing key that is used to perform cryptographic operations such as encryption and decryption. Automated key rotation currently retains all prior backing keys so that decryption of encrypted data can take place transparently. It is recommended that CMK key rotation be enabled for symmetric keys. Key rotation can not be enabled for any asymmetric CMK.",
    "title": "3.8 Ensure rotation for customer created symmetric CMKs is enabled",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.8",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/KMS"
    },
    "documentation": "## Description\n\nAWS KMS enables customers to rotate the backing key, which is key material stored in AWS KMS and is tied to the key ID of the CMK. It's the backing key that is used to perform cryptographic operations such as encryption and decryption. Automated key rotation currently retains all previous backing keys so that decryption of encrypted data can take place transparently.\n\nRotating encryption keys helps reduce the potential impact of a compromised key as data encrypted with a new key cannot be accessed with a previous key that may have been exposed.\n\n## Remediation\n\nPerform the following to configure key rotation:\n\n### From Console\n\n1. Open the AWS KMS console at [KMS](https://console.aws.amazon.com/kms).\n2. In the left navigation pane, choose `Customer managed keys`.\n3. Choose the alias of the key to `update` in the Alias column.\n4. Under the **Key rotation** section, move down to Key Rotation .\n5. Select `Automatically rotate this CMK every year` and then choose Save.\n\n### From Command Line\n\n1. Run the following command to get a list of all keys and their associated KeyIds\n\n```bash\n aws kms list-keys\n```\n\n2. For each key, note the KeyId and run the following command\n\n```bash\n aws kms get-key-rotation-status --key-id \u003ckms_key_id\u003e\n ```\n \n3. Ensure KeyRotationEnabled is set to true\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_9",
    "description": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. It is recommended that VPC Flow Logs be enabled for packet \"Rejects\" for VPCs.",
    "title": "3.9 Ensure VPC flow logging is enabled in all VPCs",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.9",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nVPC flow logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you have created a flow log, you can view and retrieve its data in CloudWatch Logs.\n\nVPC Flow Logs provide visibility into network traffic that traverses the VPC and can be used to detect anomalous traffic or insight during security workflows.\n\nWhile setting up the VPC flow log, setting filter to `Reject` will dramatically reduce the logging data accumulation for this recommendation and provide sufficient information for the purposes of breach detection, research and remediation. However, during periods of least privilege security\ngroup engineering, setting this the filter to \"All\" can be very helpful in discovering existing traffic flows required for proper operation of an already running environment.\n\n## Remediation\n\nPerform the following to determine if VPC Flow logs is enabled:\n\n### From Console\n\n1. Open the Amazon VPC console at [VPC](https://console.aws.amazon.com/vpc/)\n2. Select required VPC to update from **Your VPCs**\n3. Choose the Flow Logs tab in the bottom section of the page.\n4. If no Flow Log exists, choose **Create flow log**\n5. For Filter, choose `Reject`.\n6. For `Destination log group`, select the log group to use.\n7. For IAM role, select the IAM role to use.\n8. Choose **Create flow log**.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_10",
    "description": "S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.",
    "title": "3.10 Ensure that Object-level logging for write events is enabled for S3 bucket",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.10",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nS3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.\n\nEnabling object-level logging will help you meet data compliance requirements within your organization, perform comprehensive security analysis, monitor specific patterns of user behavior in your AWS account or take immediate actions on any object-level API activity within your S3 Buckets using Amazon CloudWatch Events.\n\n## Remediation\n\n### From Console\n\n1. Open the Amazon S3 console [S3](https://console.aws.amazon.com/s3/)\n2. Choose the required bucket from the bucket list.\n3. Choose **Properties** tab to see in detail bucket configuration.\n4. Navigate to `AWS CloudTrail data events` section to select the CloudTrail name for the recording activity.\n5. You can choose an existing Cloudtrail or create a new one by navigating to the Cloudtrail console link from S3.\n6. Once the Cloudtrail console, navigate to `Data events : S3`  section.\n7. If the current status for Object-level logging is set to Disabled, then object-level logging of write events for the selected s3 bucket is not set\n   - Select **Edit** to enable the `Write` event.\n   - You can choose to select `All current and future S3 buckets` or `Individual bucket`.\n8. Repeat steps 2 to 7 to enable object-level logging of read events for other S3 buckets.\n\n### From Command Line\n\n### From Command Line\n\n1. To enable object-level data events logging for S3 buckets within your AWS account, run put-event-selectors command using the name of the trail that you want to reconfigure as identifier:\n\n```bash\naws cloudtrail put-event-selectors --region \u003cregion-name\u003e --trail-name \u003ctrail-name\u003e --event-selectors '[{ \"ReadWriteType\": \"WriteOnly\", \"IncludeManagementEvents\":true, \"DataResources\": [{ \"Type\": \"AWS::S3::Object\", \"Values\": [\"arn:aws:s3:::\u003cs3-bucket-name\u003e/\"] }] }]'\n```\n\n2. The command output will be object-level event trail configuration.\n3. If you want to enable it for all buckets at once then change Values parameter to `[\"arn:aws:s3\"]` in command given above.\n4. Repeat step 1 for each s3 bucket to update `object-level` logging of write events.\n5. Change the AWS region by updating the --region command parameter and perform the process for other regions.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v1.5.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v150_3_11",
    "description": "S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.",
    "title": "3.11 Ensure that Object-level logging for read events is enabled for S3 bucket",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.11",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nS3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets. \n\nEnabling object-level logging will help you meet data compliance requirements within your organization, perform comprehensive security analysis, monitor specific patterns of user behavior in your AWS account or take immediate actions on any object-level API activity using Amazon CloudWatch Events.\n\n## Remediation\n\n### From Console\n\n1. Open the Amazon S3 console [S3](https://console.aws.amazon.com/s3/)\n2. Choose the required bucket from the bucket list.\n3. Choose `Properties` tab to see in detail bucket configuration.\n4. Navigate to `AWS CloudTrail data events` section to select the CloudTrail name for the recording activity.\n5. You can choose an existing Cloudtrail or create a new one by navigating to the Cloudtrail console link from S3.\n6. Once the Cloudtrail console, navigate to `Data events : S3`  section.\n7. If the current status for Object-level logging is set to Disabled, then object-level logging of `read` events for the selected s3 bucket is not set\n   - Select **Edit** to enable the `Read` event.\n   - You can choose to select `All current and future S3 buckets` or `Individual bucket`.\n8. Repeat steps 2 to 7 to enable object-level logging of read events for other S3 buckets.\n\n### From Command Line\n\n1. To enable object-level data events logging for S3 buckets within your AWS account, run put-event-selectors command using the name of the trail that you want to reconfigure as identifier:\n\n```bash\naws cloudtrail put-event-selectors --region \u003cregion-name\u003e --trail-name \u003ctrail-name\u003e --event-selectors '[{ \"ReadWriteType\": \"ReadOnly\", \"IncludeManagementEvents\":true, \"DataResources\": [{ \"Type\": \"AWS::S3::Object\", \"Values\": [\"arn:aws:s3:::\u003cs3-bucket-name\u003e/\"] }] }]'\n```\n\n2. The command output will be object-level event trail configuration.\n3. If you want to enable it for all buckets at once then change Values parameter to `[\"arn:aws:s3\"]` in command given above.\n4. Repeat step 1 for each s3 bucket to update `object-level` logging of write events.\n5. Change the AWS region by updating the --region command parameter and perform the process for other regions.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_1",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.",
    "title": "4.1 Ensure a log metric filter and alarm exist for unauthorized API calls",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.1",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.\n\nMonitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.\n\n## Remediation\n\nPerform the following to enable global (Multi-region) CloudTrail logging:\n\n### From Console\n\n**To create an Amazon SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic.\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      {($.errorCode=\"*UnauthorizedOperation\") || ($.errorCode=\"AccessDenied*\")}\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.1-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name \u003cunauthorized_api_calls_metric\u003e --metric-transformations metricName=\u003cunauthorized_api_calls_metric\u003e,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") || ($.sourceIPAddress!=\"delivery.logs.amazonaws.com\") || ($.eventName!=\"HeadBucket\") }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name \u003cunauthorized_api_calls_alarm\u003e --metric-name \u003cunauthorized_api_calls_metric\u003e --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_2",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).",
    "title": "4.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.2",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).\n\nMonitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n\n      ```\n      {($.eventName=\"ConsoleLogin\") \u0026\u0026 ($.additionalEventData.MFAUsed !=\"Yes\")}\n      ```\n\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.2-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name `\u003ccloudtrail_log_group_name\u003e` --\nfilter-name `\u003cno_mfa_console_signin_metric\u003e` --metric-transformations metricName= `\u003cno_mfa_console_signin_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName = \"ConsoleLogin\") \u0026\u0026 ($.additionalEventData.MFAUsed != \"Yes\") }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cno_mfa_console_signin_alarm\u003e` --metric-name `\u003cunauthorized_api_calls_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace `CISBenchmark` --alarm-actions `\u003csns_topic_arn\u003e`\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_3",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.",
    "title": "4.3 Ensure a log metric filter and alarm exist for usage of 'root' account",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.3",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.\n\nMonitoring for root account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n\n      ```\n      { $.userIdentity.type = \"Root\" \u0026\u0026 $.userIdentity.invokedByNOT EXISTS \u0026\u0026 $.eventType != \"AwsServiceEvent\" }\n      ```\n\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.3-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name `\u003ccloudtrail_log_group_name\u003e` --filter-name `\u003croot_usage_metric\u003e` --metric-transformations metricName=`\u003croot_usage_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filterpattern '{ $.userIdentity.type = \"Root\" \u0026\u0026 $.userIdentity.invokedBy NOT EXISTS \u0026\u0026 $.eventType != \"AwsServiceEvent\" }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003croot_usage_alarm\u003e` --metric-name `\u003croot_usage_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_4",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.",
    "title": "4.4 Ensure a log metric filter and alarm exist for IAM policy changes",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.4",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.\n\nMonitoring changes to IAM policies will help ensure authentication and authorization controls remain intact.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n\n      ```\n      {($.eventName=DeleteGroupPolicy) || ($.eventName=DeleteRolePolicy) || ($.eventName=DeleteUserPolicy) || ($.eventName=PutGroupPolicy) || ($.eventName=PutRolePolicy) || ($.eventName=PutUserPolicy) || ($.eventName=CreatePolicy) || ($.eventName=DeletePolicy) || ($.eventName=CreatePolicyVersion) || ($.eventName=DeletePolicyVersion) || ($.eventName=AttachRolePolicy) || ($.eventName=DetachRolePolicy) || ($.eventName=AttachUserPolicy) || ($.eventName=DetachUserPolicy) || ($.eventName=AttachGroupPolicy) || ($.eventName=DetachGroupPolicy)}\n      ```\n\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.4-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name `\u003ccloudtrail_log_group_name\u003e` --filter-name `\u003ciam_changes_metric\u003e` --metric-transformations metricName=`\u003ciam_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --\nfilter-pattern'{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003ciam_changes_alarm\u003e` --metric-name `\u003ciam_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_5",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.",
    "title": "4.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.5",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.\n\nMonitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      {($.eventName=CreateTrail) || ($.eventName=UpdateTrail) || ($.eventName=DeleteTrail) || ($.eventName=StartLogging) || ($.eventName=StopLogging)}   \n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.5-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name `\u003ccloudtrail_cfg_changes_metric\u003e` --metric-transformations metricName=`\u003ccloudtrail_cfg_changes_metric\u003e`,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging)}'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003ccloudtrail_cfg_changes_alarm\u003e` --metric-name `\u003ccloudtrail_cfg_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_6",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for failed console authentication attempts.",
    "title": "4.6 Ensure a log metric filter and alarm exist for AWS Management Console authentication failures",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.6",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for failed console authentication attempts.\n\nMonitoring failed console logins may decrease lead time to detect an attempt to brute force a credential, which may provide an indicator, such as source IP, that can be used in other event correlation.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      {($.eventName=ConsoleLogin) \u0026\u0026 ($.errorMessage=\"Failed authentication\")}\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.6-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name `\u003cconsole_signin_failure_metric\u003e` --metric-transformations metricName= `\u003cconsole_signin_failure_metric\u003e`,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName = ConsoleLogin) \u0026\u0026 ($.errorMessage = \"Failed authentication\") }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cconsole_signin_failure_alarm\u003e` --metric-name `\u003cconsole_signin_failure_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_7",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion.",
    "title": "4.7 Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.7",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion.\n\nData encrypted with disabled or deleted keys will no longer be accessible.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      {($.eventSource = kms.amazonaws.com) \u0026\u0026 (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))}\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.7-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name `\u003cdisable_or_delete_cmk_changes_metric\u003e` --metric-transformations metricName=`\u003cdisable_or_delete_cmk_changes_metric\u003e`,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventSource = kms.amazonaws.com) \u0026\u0026 (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion)) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cdisable_or_delete_cmk_changes_alarm\u003e` --metric-name `\u003cdisable_or_delete_cmk_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_8",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.",
    "title": "4.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.8",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.\n\nMonitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      { ($.eventSource = s3.amazonaws.com) \u0026\u0026 (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.8-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name `\u003cs3_bucket_policy_changes_metric\u003e` --metric-transformations metricName= `\u003cs3_bucket_policy_changes_metric\u003e`,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) \u0026\u0026 (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cs3_bucket_policy_changes_alarm\u003e` --metric-name `\u003cs3_bucket_policy_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_9",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.",
    "title": "4.9 Ensure a log metric filter and alarm exist for AWS Config configuration changes",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.9",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations\n\nMonitoring changes to AWS Config configuration will help ensure sustained visibility of configuration items within the AWS account.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      { ($.eventSource = config.amazonaws.com) \u0026\u0026 (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel) ||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.9-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name `\u003caws_config_changes_metric\u003e` --metric-transformations metricName= `\u003caws_config_changes_metric\u003e`,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventSource = config.amazonaws.com) \u0026\u0026 (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003caws_config_changes_alarm\u003e` --metric-name `\u003caws_config_changes_metric\u003e` --statistic Sum --period 300 --\nthreshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluationperiods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_10",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Groups are a stateful packet filter that controls ingress and egress traffic within a VPC. It is recommended that a metric filter and alarm be established for detecting changes to Security Groups.",
    "title": "4.10 Ensure a log metric filter and alarm exist for security group changes",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.10",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Groups are a stateful packet filter that controls ingress and egress traffic within a VPC. It is recommended that a metric filter and alarm be established for detecting changes to Security Groups.\n\nMonitoring changes to security group will help ensure that resources and services are not unintentionally exposed.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      {($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName =AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.10-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \"\u003ccloudtrail_log_group_name\u003e\" --filter-name \"\u003csecurity_group_changes_metric\u003e\" --metric-transformations metricName= \"\u003csecurity_group_changes_metric\u003e\",metricNamespace=\"CISBenchmark\",metricValue=1 --filter-pattern \"{($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName =AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }\"\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name \"\u003csecurity_group_changes_alarm\u003e\" --metric-name \"\u003csecurity_group_changes_metric\u003e\" --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace \"CISBenchmark\" --alarm-actions \"\u003csns_topic_arn\u003e\"\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_11",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs.",
    "title": "4.11 Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.11",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs.\n\nMonitoring changes to NACLs will help ensure that AWS resources and services are not unintentionally exposed.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      { ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.11-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name `\u003cnacl_changes_metric\u003e` --metric-transformations metricName=`\u003cnacl_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) ||($.eventName = ReplaceNetworkAclAssociation) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cnacl_changes_alarm\u003e` --metric-name `\u003cnacl_changes_metric\u003e` --statistic Sum --period 300 --\nthreshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluationperiods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_12",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.",
    "title": "4.12 Ensure a log metric filter and alarm exist for changes to network gateways",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.12",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.\n\nMonitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      { ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.12-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name `\u003cnetwork_gw_changes_metric\u003e` --metric-transformations metricName= `\u003cnetwork_gw_changes_metric\u003e`,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cnetwork_gw_changes_alarm\u003e` --metric-name `\u003cnetwork_gw_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluationperiods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_13",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.",
    "title": "4.13 Ensure a log metric filter and alarm exist for route table changes",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.13",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.\n\nMonitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      { ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }\"\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.13-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name `\u003croute_table_changes_metric\u003e` --metric-transformations metricName= `\u003croute_table_changes_metric\u003e`,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003croute_table_changes_alarm\u003e` --metric-name `\u003croute_table_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_14",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.",
    "title": "4.14 Ensure a log metric filter and alarm exist for VPC changes",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.14",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.\n\nMonitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      { ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.14-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name `\u003cvpc_changes_metric\u003e` --metric-transformations metricName=`\u003cvpc_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cvpc_changes_alarm\u003e` --metric-name `\u003cvpc_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_15",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.",
    "title": "4.15 Ensure a log metric filter and alarm exists for AWS Organizations changes",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.15",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.\n\nMonitoring AWS Organizations changes can help you prevent any unwanted, accidental or intentional modifications that may lead to unauthorized access or other security breaches. This monitoring technique helps you to ensure that any unexpected changes performed within your AWS Organizations can be investigated and any unwanted changes can be rolled back.\n\n## Remediation\n\nThe steps to remediate this issue include setting up an Amazon SNS topic, a metric filter, and an alarm for the metric filter.\n\n### From Console\n\n**To create SNS topic**\n\n1. Open the Amazon SNS console at [SNS](https://console.aws.amazon.com/sns/v3/home).\n2. Create an Amazon SNS topic that receives all CIS alarms. Create at least one subscriber to the topic. You can follow steps [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html)\n3. Set up an active CloudTrail that applies to all Regions. To do so, follow the remediation steps in CIS 3.1 – Ensure CloudTrail is enabled in all Regions.\n4. Make a note of the associated log group name.\n\n**To create a metric filter and alarm**\n\n1. Open the CloudWatch console at [CloudWatch](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose **Log groups**.\n3. Select the check box for the log group that you made a note of in the previous step (4).\n4. From **Actions**, choose **Create Metric Filter**.\n5. Under Define pattern, do the following:\n   - Copy the following pattern and then paste it into the Filter Pattern field.\n      ```\n      { ($.eventSource = organizations.amazonaws.com) \u0026\u0026 (($.eventName = \"AcceptHandshake\") || ($.eventName = \"AttachPolicy\") || ($.eventName = \"CreateAccount\") || ($.eventName = \"CreateOrganizationalUnit\") || ($.eventName = \"CreatePolicy\") || ($.eventName = \"DeclineHandshake\") || ($.eventName = \"DeleteOrganization\") || ($.eventName = \"DeleteOrganizationalUnit\") || ($.eventName = \"DeletePolicy\") || ($.eventName = \"DetachPolicy\") || ($.eventName = \"DisablePolicyType\") || ($.eventName = \"EnablePolicyType\") || ($.eventName = \"InviteAccountToOrganization\") || ($.eventName = \"LeaveOrganization\") || ($.eventName = \"MoveAccount\") || ($.eventName = \"RemoveAccountFromOrganization\") || ($.eventName = \"UpdatePolicy\") || ($.eventName = \"UpdateOrganizationalUnit\")) }\n      ```\n   - Choose **Next**.\n6. Under **Assign metric**, do the following:\n   - In Filter name, enter a name for your metric filter.\n   - For Metric namespace, enter `CISBenchmark`. You can use the same namespace for all of your CIS log metric filters.\n   - For Metric name, enter a name for the metric.\n   - The name of the metric is required to create the alarm.\n   - For Metric value, enter 1.\n   - Choose **Next**.\n7. Under **Review and create**, review the details and choose **Create metric filter**.\n8. Choose the **Metric filters** tab, select the metric filter that you just created.\n9. To choose the metric filter, select the `check box` at the upper right.\n10. Choose **Create Alarm**.\n11. Follow the steps provided in [Create an alarm](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html)\n12. Under Configure actions, do the following:\n      - Under **Alarm state trigger**, choose In alarm.\n      - Under Select an SNS topic, choose Select an existing SNS topic.\n      - For Send a notification to, enter the name of the SNS topic that you created in the previous procedure.\n      - Choose **Next**.\n13. Under Add name and description, enter a Name and Description for the alarm. For example, CIS4.15-[SmallDescription]. Then choose **Next**.\n14. Under **Preview and create**, review the alarm configuration. Choose **Create alarm**.\n\n### From Command Line\n\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --filter-name `\u003corganizations_changes\u003e` --metric-transformations metricName=`\u003corganizations_changes\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = organizations.amazonaws.com) \u0026\u0026 (($.eventName = \"AcceptHandshake\") || ($.eventName = \"AttachPolicy\") || ($.eventName = \"CreateAccount\") || ($.eventName = \"CreateOrganizationalUnit\") || ($.eventName = \"CreatePolicy\") || ($.eventName = \"DeclineHandshake\") || ($.eventName = \"DeleteOrganization\") || ($.eventName = \"DeleteOrganizationalUnit\") || ($.eventName = \"DeletePolicy\") || ($.eventName = \"DetachPolicy\") || ($.eventName = \"DisablePolicyType\") || ($.eventName = \"EnablePolicyType\") || ($.eventName =\"InviteAccountToOrganization\") || ($.eventName = \"LeaveOrganization\") || ($.eventName = \"MoveAccount\") || ($.eventName = \"RemoveAccountFromOrganization\") || ($.eventName = \"UpdatePolicy\") || ($.eventName = \"UpdateOrganizationalUnit\")) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n**Note**: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cvpc_changes_alarm\u003e` --metric-name `\u003corganizations_changes\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v1.5.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v150_4_16",
    "description": "Security Hub collects security data from across AWS accounts, services, and supported third-party partner products and helps you analyze your security trends and identify the highest priority security issues. When you enable Security Hub, it begins to consume, aggregate, organize, and prioritize findings from AWS services that you have enabled, such as Amazon GuardDuty, Amazon Inspector, and Amazon Macie. You can also enable integrations with AWS partner security products.",
    "title": "4.16 Ensure AWS Security Hub is enabled",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.16",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/SecurityHub"
    },
    "documentation": "## Description\n\nSecurity Hub collects security data from across AWS accounts, services, and supported third-party partner products and helps you analyze your security trends and identify the highest priority security issues. When you enable Security Hub, it begins to consume, aggregate, organize, and prioritize findings from AWS services that you have enabled, such as Amazon GuardDuty, Amazon Inspector, and Amazon Macie. You can also enable integrations with AWS partner security products.\n\nAWS Security Hub provides you with a comprehensive view of your security state in AWS and helps you check your environment against security industry standards and best practices - enabling you to quickly assess the security posture across your AWS accounts.\n\n## Remediation\n\nTo grant the permissions required to enable Security Hub, attach the Security Hub managed policy AWSSecurityHubFullAccess to an IAM user, group, or role. Enabling Security Hub\n\n### From Console\n\n1. Use the credentials of the IAM identity to sign in to the Security Hub console.\n2. When you open the Security Hub console for the first time, choose Enable AWS Security Hub.\n3. On the welcome page, Security standards list the security standards that Security Hub supports.\n4. Choose Enable Security Hub.\n\n### From Command Line\n\n1. Run the enable-security-hub command. To enable the default standards, include **--enable-default-standards**.\n\n```bash\naws securityhub enable-security-hub --enable-default-standards\n```\n\n2. To enable the security hub without the default standards, include **--no-enable-default-standards**.\n\n```bash\naws securityhub enable-security-hub --no-enable-default-standards\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v1.5.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v150_5_1",
    "description": "The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.",
    "title": "5.1 Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.1",
      "cis_level": "1",
      "cis_section_id": "5",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nThe Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22\nand RDP to port 3389.\n\nPublic access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.\n\n## Remediation\n\n### From Console\n\n1. Login VPC Console at [VPC](https://console.aws.amazon.com/vpc/home)\n2. In the left pane, click **Network ACLs**\n3. For each network ACL to remediate, perform the following:\n4. Select the respective network ACL\n5. Choose the **Inbound Rules** tab and click **Edit Inbound rules**\n6. Check remote server access port entries. **Note** A Port value of ALL or a port range such as 0-1024 are inclusive of port 22, 3389, and other remote server administration ports.\n7. Either\n    - A) Update the `source` field to a range other than 0.0.0.0/0 or\n    - B) Click **Remove** the offending inbound rule\n8. Click **Save changes**\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_5",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v1.5.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v150_5_2",
    "description": "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.",
    "title": "5.2 Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.2",
      "cis_level": "1",
      "cis_section_id": "5",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nSecurity groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.\n\nPublic access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.\n\n## Remediation\n\n### From Console\n\n1. Login VPC Console at [VPC](https://console.aws.amazon.com/vpc/home)\n2. In the left pane, click **Security Groups**\n3. For each security group to remediate, perform the following:\n4. Select the respective security group\n5. Choose the **Inbound Rules** tab and click **Edit Inbound rules**\n6. Identify the rules to be edited or removed based on the remote server access port entries. **Note** A Port value of ALL or a port range such as 0-1024 are inclusive of port 22, 3389, and other remote server administration ports.\n7. Either\n    - A) Update the `source` field to a range other than 0.0.0.0/0 or\n    - B) Click **Remove** the offending inbound rule\n8. Click **Save changes**\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_5",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v1.5.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v150_5_3",
    "description": "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.",
    "title": "5.3 Ensure no security groups allow ingress from ::/0 to remote server administration ports",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.3",
      "cis_level": "1",
      "cis_section_id": "5",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nSecurity groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.\n\nPublic access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.\n\n## Remediation\n\nPerform the following to implement the prescribed state:\n\n1. Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home\n2. In the left pane, click **Security Groups**\n3. For each security group, perform the following:\n4. Select the security group\n5. Click the **Inbound Rules** tab\n6. Click the **Edit inbound rules** button\n7. Identify the rules to be edited or removed\n8. Either A) update the `source` field to a range other than ::/0, or, B) Click **Delete** to remove the offending inbound rule\n9. Click **Save rules**\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_5",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v1.5.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v150_5_4",
    "description": "A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.",
    "title": "5.4 Ensure the default security group of every VPC restricts all traffic",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.4",
      "cis_level": "2",
      "cis_section_id": "5",
      "cis_type": "automated",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nA VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.\n\nConfiguring all VPC default security groups to restrict all traffic will encourage least privilege security group development and mindful placement of AWS resources into security groups which will in-turn reduce the exposure of those resources.\n\n## Remediation\n\nSecurity Group Members\nPerform the following to implement the prescribed state:\n\n1. Identify AWS resources that exist within the default security group.\n2. Create a set of least privilege security groups for those resources.\n3. Place the resources in those security groups.\n4. Remove the resources noted in #1 from the default security group.\n\n### From Console\n\n1. Login to the AWS [VPC Console](https://console.aws.amazon.com/vpc/home)\n2. Repeat the next steps for all VPCs - including the default VPC in each AWS region:\n3. In the left pane, click **Security Groups**\n4. For each default security group, perform the following:\n5. Select the `default` security group\n6. For each default security group, choose the `Inbound rules` tab and delete all inbound rules.\n7. For each default security group, choose the `Outbound rules` tab and delete all outbound rules.\n8. Create a set of least-privilege security groups for the resources. See [here](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#WorkingWithSecurityGroups) for more details.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_5",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v1.5.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v1.5.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v150_5_5",
    "description": "Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection.",
    "title": "5.5 Ensure routing tables for VPC peering are \"least access\"",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.5",
      "cis_level": "2",
      "cis_section_id": "5",
      "cis_type": "manual",
      "cis_version": "v1.5.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nOnce a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection.\n\nBeing highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC.\n\n## Remediation\n\nRemove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable.\n\n### From Command Line\n\n1. For each \u003croute_table_id\u003e containing routes non compliant with your routing policy (which grants more than desired \"least access\"), delete the non compliant route:\n\n```bash\naws ec2 delete-route --route-table-id \u003croute_table_id\u003e --destination-cidrblock \u003cnon_compliant_destination_CIDR\u003e\n```\n\n2. Create a new compliant route:\n\n```bash\naws ec2 create-route --route-table-id \u003croute_table_id\u003e --destination-cidrblock \u003ccompliant_destination_CIDR\u003e --vpc-peering-connection-id \u003cpeering_connection_id\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v150",
      "aws_compliance.benchmark.cis_v150_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v150/aws_compliance.benchmark.cis_v150_5",
    "executable": true
  }
]