[
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_1",
    "description": "Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organization.",
    "title": "1.1 Maintain current contact details",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.1",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "\n## Description\n\nEnsure contact email and telephone details for AWS accounts are current and map to more than one individual in your organization.\n\nAn AWS account supports a number of contact details, and AWS will use these to contact the account owner if activity judged to be in breach of Acceptable Use Policy or indicative of likely security compromise is observed by the AWS Abuse team. Contact details should not be for a single individual, as circumstances may arise where that individual is unavailable. Email contact details should point to a mail alias which forwards email to multiple individuals within the organization; where feasible, phone contact details should point to a PABX hunt group or other call-forwarding system.\n\nIf an AWS account is observed to be behaving in a prohibited or suspicious manner, AWS will attempt to contact the account owner by email and phone using the contact details listed. If this is unsuccessful and the account behavior needs urgent mitigation, proactive measures may be taken, including throttling of traffic between the account exhibiting suspicious behavior and the AWS API endpoints and the Internet. This will result in impaired service to and from the account in question, so it is in both the customers' and AWS' best interests that prompt contact can be established. This is best achieved by setting AWS account contact details to point to resources which have multiple individuals as recipients, such as email aliases and PABX hunt groups.\n\n## Remediation\n\nThis activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:*Billing).\n1. Sign in to the AWS Management Console and open the `Billing and Cost Management` console at https://console.aws.amazon.com/billing/home#/.\n2. On the navigation bar, choose your account name, and then choose `Account`.\n3. On the `Account Settings` page, next to `Account Settings`, choose `Edit`.\n4. Next to the field that you need to update, choose `Edit`.\n5. After you have entered your changes, choose `Save changes`.\n6. After you have made your changes, choose `Done`.\n7. To edit your contact information, under `Contact Information`, choose `Edit`.\n8. For the fields that you want to change, type your updated information, and then choose `Update`.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_2",
    "description": "AWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.",
    "title": "1.2 Ensure security contact information is registered",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.2",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.\n\nSpecifying security-specific contact information will help ensure that security advisories sent by AWS reach the team in your organization that is best equipped to respond to them.\n\n## Remediation\n\nPerform the following to establish security contact information:\n\n### From Console:\n\n1. Click on your account name at the top right corner of the console.\n2. From the drop-down menu Click `My Account`.\n3. Scroll down to the `Alternate Contacts` section.\n4. Enter contact information in the `Security` section.\n\n### From Command Line:\n\nRun the following command with the following input parameters: --email-address, --name, and --phone-number.\n\n```bash\naws account put-alternate-contact --alternate-contact-type SECURITY\n```\n\n**Note**: Consider specifying an internal email distribution list to ensure emails are regularly monitored by more than one individual.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_3",
    "description": "The AWS support portal allows account owners to establish security questions that can be used to authenticate individuals calling AWS customer service for support. It is recommended that security questions be established.",
    "title": "1.3 Ensure security questions are registered in the AWS account",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.3",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nThe AWS support portal allows account owners to establish security questions that can be used to authenticate individuals calling AWS customer service for support. It is recommended that security questions be established.\n\nWhen creating a new AWS account, a default super user is automatically created. This account is referred to as the 'root user' or 'root' account. It is recommended that the use of this account be limited and highly controlled. During events in which the 'root' password is no longer accessible or the MFA token associated with 'root' is lost/destroyed it is possible, through authentication using secret questions and associated answers, to recover 'root' user login access.\n\n## Remediation\n\n### From Console:\n\n1. Login to the AWS Account as the 'root' user.\n2. Click on the \u003cRoot_Account_Name\u003e from the top right of the console.\n3. From the drop-down menu Click My Account.\n4. Scroll down to the `Configure Security Questions` section.\n5. Click on `Edit`.\n6. Click on each `Question`.\n\n- From the drop-down select an appropriate question.\n- Click on the `Answer` section.\n- Enter an appropriate answer.\n  - Follow process for all 3 questions.\n\n7. Click `Update` when complete.\n8. Save Questions and Answers and place in a secure physical location.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_4",
    "description": "The 'root' user account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the 'root' user account be deleted.",
    "title": "1.4 Ensure no 'root' user account access key exists",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.4",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nThe 'root' user account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the 'root' user account be deleted.\n\nDeleting access keys associated with the 'root' user account limits vectors by which the account can be compromised. Additionally, deleting the 'root' access keys encourages the creation and use of role based accounts that are least privileged.\n\n## Remediation\n\nPerform the following to delete active 'root' user access keys.\n\n### From Console:\n\n1. Sign in to the AWS Management Console as 'root' and open the IAM console at https://console.aws.amazon.com/iam/.\n2. Click on `\u003croot_account\u003e` at the top right and select `My Security Credentials` from the drop down list.\n3. On the pop out screen click on `Continue to Security Credentials`.\n4. Click on `Access Keys` (Access Key ID and Secret Access Key).\n5. Under the `Status` column (if there are any Keys which are active).\n6. Click `Delete` (Note: Deleted keys cannot be recovered).\n\n**Note**: While a key can be made inactive, this inactive key will still show up in the CLI command from the audit procedure, and may lead to a key being falsely flagged as being non-compliant.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_5",
    "description": "The 'root' user account is the most privileged user in an AWS account. Multi-factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device.",
    "title": "1.5 Ensure MFA is enabled for the 'root' user account",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.5",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nThe 'root' user account is the most privileged user in an AWS account. Multi-factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device.\n\n**Note**: When virtual MFA is used for 'root' accounts, it is recommended that the device used is NOT a personal device, but rather a dedicated mobile device (tablet or phone) that is managed to be kept charged and secured independent of any individual personal devices. (\"non-personal virtual MFA\") This lessens the risks of losing access to the MFA due to device loss, device trade-in or if the individual owning the device is no longer employed at the company.\n\nEnabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential.\n\n## Remediation\n\n### From Console:\n\nPerform the following to establish MFA for the 'root' user account:\n\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n\n**Note**: to manage MFA devices for the 'root' AWS account, you must use your 'root' account credentials to sign in to AWS. You cannot manage MFA devices for the 'root' account using other credentials.\n\n2. Choose `Dashboard`, and under `Security Status`, expand `Activate MFA` on your root account.\n3. Choose `Activate MFA`.\n4. In the wizard,choose `A virtual MFA` device and then choose `Next Step`.\n5. IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.\n6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](http://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications).) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n7. Determine whether the MFA app supports QR codes, and then do one of the following:\n   - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n   - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\n\nWhen you are finished, the virtual MFA device starts generating one-time passwords. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Assign Virtual MFA.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_6",
    "description": "The 'root' user account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. For Level 2, it is recommended that the root user account be protected with a hardware MFA.",
    "title": "1.6 Ensure hardware MFA is enabled for the 'root' user account",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.6",
      "cis_level": "2",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nThe 'root' user account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. For Level 2, it is recommended that the 'root' user account be protected with a hardware MFA.\n\nA hardware MFA has a smaller attack surface than a virtual MFA. For example, a hardware MFA does not suffer the attack surface introduced by the mobile smartphone on which a virtual MFA resides.\n\n**Note**: Using hardware MFA for many, many AWS accounts may create a logistical device management issue. If this is the case, consider implementing this Level 2 recommendation selectively to the highest security AWS accounts and the Level 1 recommendation applied to the remaining accounts.\n\n## Remediation\n\nPerform the following to establish a hardware MFA for the 'root' user account:\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n**Note:** to manage MFA devices for the AWS 'root' user account, you must use your 'root' account credentials to sign in to AWS. You cannot manage MFA devices for the 'root' account using other credentials.\n2. Choose `Dashboard`, and under `Security Status`, expand `Activate MFA` on your root account.\n3. Choose `Activate MFA`.\n4. In the wizard, choose `A hardware MFA` device and then choose `Next Step`.\n5. In the `Serial Number` box, enter the serial number that is found on the back of the MFA device.\n6. In the `Authentication Code 1` box, enter the six-digit number displayed by the MFA device. You might need to press the button on the front of the device to display the number.\n7. Wait 30 seconds while the device refreshes the code, and then enter the next six-digit number into the `Authentication Code 2` box. You might need to press the button on the front of the device again to display the second number.\n8. Choose `Next Step`. The MFA device is now associated with the AWS account. The next time you use your AWS account credentials to sign in, you must type a code from the hardware MFA device.\n\nRemediation for this recommendation is not available through AWS CLI.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_7",
    "description": "With the creation of an AWS account, a 'root user' is created that cannot be disabled or deleted. That user has unrestricted access to and control over all resources in the AWS account. It is highly recommended that the use of this account be avoided for everyday tasks.",
    "title": "1.7 Eliminate use of the 'root' user for administrative and daily tasks",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.7",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nWith the creation of an AWS account, a 'root user' is created that cannot be disabled or deleted. That user has unrestricted access to and control over all resources in the AWS account. It is highly recommended that the use of this account be avoided for everyday tasks.\n\nThe 'root user' has unrestricted access to and control over all account resources. Use of it is inconsistent with the principles of least privilege and separation of duties, and can lead to unnecessary harm due to error or account compromise.\n\n## Remediation\n\nIf you find that the 'root' user account is being used for daily activity to include administrative tasks that do not require the 'root' user:\n1. Change the 'root' user password.\n2. Deactivate or delete any access keys associate with the 'root' user.\n**Remember, anyone who has 'root' user credentials for your AWS account has unrestricted access to and control of all the resources in your account, including billing information.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_8",
    "description": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.",
    "title": "1.8 Ensure IAM password policy requires minimum length of 14 or greater",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.8",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nPassword policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.\n\nSetting a password complexity policy increases account resiliency against brute force login attempts.\n\n## Remediation\n\nPerform the following to set the password policy is configured as prescribed:\n\n### From Console:\n\nPerform the following to set the password policy as prescribed:\n\n### From Console:\n\n1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings).\n2. Goto IAM Service on the AWS Console.\n3. Click on Account Settings on the Left Pane.\n4. Set \"Minimum password length\" to `14` or greater.\n5. Click \"Apply password policy\".\n\n### From Command Line:\n\n```bash\naws iam update-account-password-policy --minimum-password-length 14\n```\n\n**Note**: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_9",
    "description": "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.",
    "title": "1.9 Ensure IAM password policy prevents password reuse",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.9",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nIAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.\n\nPreventing password reuse increases account resiliency against brute force login attempts.\n\n## Remediation\n\nPerform the following to set the password policy as prescribed:\n\n### From Console:\n\n1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings).\n2. Go to IAM Service on the AWS Console.\n3. Click on Account Settings on the Left Pane.\n4. Check \"Prevent password reuse\".\n5. Set \"Number of passwords to remember\" is set to `24`.\n\n### From Command Line:\n\n```bash\naws iam update-account-password-policy --password-reuse-prevention 24\n```\n\n**Note**: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_10",
    "description": "Multi-Factor Authentication (MFA) adds an extra layer of authentication assurance beyond traditional credentials. With MFA enabled, when a user signs in to the AWS Console, they will be prompted for their user name and password as well as for an authentication code from their physical or virtual MFA token. It is recommended that MFA be enabled for all accounts that have a console password.",
    "title": "1.10 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.10",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nMulti-Factor Authentication (MFA) adds an extra layer of authentication assurance beyond traditional credentials. With MFA enabled, when a user signs in to the AWS Console, they will be prompted for their user name and password as well as for an authentication code from their physical or virtual MFA token. It is recommended that MFA be enabled for all accounts that have a console password.\n\nEnabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that displays a time-sensitive key and have knowledge of a credential.\n\n## Remediation\n\nPerform the following to enable MFA:\n\n### From Console:\n\n1. Sign in to the AWS Management Console and open the IAM console at 'https://console.aws.amazon.com/iam/'.\n2. In the left pane, select `Users`.\n3. In the `User Name` list, choose the name of the intended MFA user.\n4. Choose the `Security Credentials` tab, and then choose `Manage MFA Device`.\n5. In the `Manage MFA Device wizard`, choose `Virtual MFA` device, and then choose `Continue`.\n\nIAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.\n\n6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see Virtual MFA Applications at https://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications). If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n7. Determine whether the MFA app supports QR codes, and then do one of the following:\n- Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n- In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\n\nWhen you are finished, the virtual MFA device starts generating one-time passwords.\n\n8. In the `Manage MFA Device wizard`, in the `MFA Code 1 box`, type the `one-time password` that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new `one-time password`. Then type the second one- time password into the `MFA Code 2 box`.\n9. Click `Assign MFA`.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_11",
    "description": "AWS console defaults to no check boxes selected when creating a new IAM user. When creating the IAM User credentials you have to determine what type of access they require.",
    "title": "1.11 Do not setup access keys during initial user setup for all IAM users that have a console password",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.11",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAWS console defaults to no check boxes selected when creating a new IAM user. When creating the IAM User credentials you have to determine what type of access they require.\n\nProgrammatic access: The IAM user might need to make API calls, use the AWS CLI, or use the Tools for Windows PowerShell. In that case, create an access key (access key ID and a secret access key) for that user.\n\nAWS Management Console access: If the user needs to access the AWS Management Console, create a password for the user.\n\nRequiring the additional steps be taken by the user for programmatic access after their profile has been created will give a stronger indication of intent that access keys are [a] necessary for their work and [b] once the access key is established on an account that the keys may be in use somewhere in the organization.\n\n**Note**: Even if it is known the user will need access keys, require them to create the keys themselves or put in a support ticket to have them created as a separate step from user creation.\n\n## Remediation\n\nPerform the following to delete access keys that do not pass the audit:\n\n### From Console:\n\n1. Log into the AWS Management Console:\n2. Click `Services`.\n3. Click `IAM`.\n4. Click on `Users`.\n5. Click on `Security Credentials`.\n6. As an Administrator\n- Click on the X (`Delete`) for keys that were created at the same time as the user profile but have not been used.\n\n7. As an IAM User\n- Click on the X (`Delete`) for keys that were created at the same time as the user profile but have not been used.\n\n### From Command Line:\n\n```bash\naws iam delete-access-key --access-key-id \u003caccess-key-id-listed\u003e --user-name \u003cusers-name\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_12",
    "description": "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.",
    "title": "1.12 Ensure credentials unused for 45 days or greater are disabled",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.12",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.\n\nDisabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used.\n\n## Remediation\n\n### From Console:\n\nPerform the following to manage Unused Password (IAM user console access)\n\n1. Login to the AWS Management Console:\n2. Click `Services`.\n3. Click `IAM`.\n4. Click on `Users`.\n5. Click on `Security Credentials`.\n6. Select user whose `Console last sign-in` is greater than 45 days.\n7. Click `Security credentials`.\n8. In section `Sign-incredentials`, `Console password` click `Manage`.\n9. Under Console Access select `Disable`.\n10. Click `Apply`\n\nPerform the following to deactivate Access Keys:\n\n1. Login to the AWS Management Console:\n2. Click `Services`.\n3. Click `IAM`.\n4. Click on `Users`.\n5. Click on `Security Credentials`.\n6. Select any access keys that are over 45 days old and that have been used and\n- Click on `Make inactive`.\n\n7. Select any access keys that are over 45 days old and that have not been used and\n- Click the X to `Delete`.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_13",
    "description": "Access keys are long-term credentials for an IAM user or the AWS account root user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK).",
    "title": "1.13 Ensure there is only one active access key available for any single IAM user",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.13",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAccess keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK).\n\nAccess keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API. One of the best ways to protect your account is to not allow users to have multiple access keys.\n\n## Remediation\n\n### From Console:\n\n1. Sign in to the AWS Management Console and navigate to IAM dashboard at https://console.aws.amazon.com/iam/.\n2. In the left navigation panel, choose `Users`.\n3. Click on the IAM user name that you want to examine.\n4. On the IAM user configuration page, select `Security Credentials` tab.\n5. In `Access Keys` section, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.\n6. In the same `Access Keys` section, identify your non-operational access keys (other than the chosen one) and deactivate it by clicking the `Make Inactive` link.\n7. If you receive the `Change Key Status` confirmation box, click `Deactivate` to switch off the selected key.\n8. Repeat steps no. 3 – 7 for each IAM user in your AWS account.\n\n### From Command Line:\n\n1. Using the IAM user and access key information provided in the `Audit CLI`, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.\n2. Run the `update-access-key` command below using the IAM user name and the non-operational access key IDs to deactivate the unnecessary key(s). Refer to the Audit section to identify the unnecessary access key ID for the selected IAM user.\n\n**Note** - the command does not return any output:\n```bash\naws iam update-access-key --access-key-id \u003caccess-key-id\u003e --status Inactive --user-name \u003cuser-name\u003e\n```\n3. To confirm that the selected access key pair has been successfully `deactivated` run the `list-access-keys` audit command again for that IAM User:\n\n```bash\naws iam list-access-keys --user-name \u003cuser-name\u003e\n```\n\n- The command output should expose the metadata for each access key associated with the IAM user. If the non-operational key pair(s) `Status` is set to `Inactive`, the key has been successfully deactivated and the IAM user access configuration adheres now to this recommendation.\n\n4. Repeat steps no. 1 – 3 for each IAM user in your AWS account.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_14",
    "description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.",
    "title": "1.14 Ensure access keys are rotated every 90 days or less",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.14",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAccess keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.\n\nRotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used.\n\nAccess keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.\n\n## Remediation\n\nPerform the following to rotate access keys:\n\n### From Console:\n\n1. Go to Management Console(https://console.aws.amazon.com/iam).\n2. Click on `Users`.\n3. Click on `Security Credentials`.\n4. As an Administrator\n  - Click on `Make Inactive` for keys that have not been rotated in `90` Days.\n5. As an IAM User\n  - Click on `Make Inactive` or `Delete` for keys which have not been rotated or used in `90` Days.\n5. Click on `Create Access Key`.\n6. Update programmatic call with new Access Key credentials.\n\n### From Command Line:\n\n1. While the first access key is still active, create a second access key, which is active by default. Run the following command:\n\n```bash\naws iam create-access-key\n```\n\nAt this point, the user has two active access keys.\n\n2. Update all applications and tools to use the new access key pair.\n3. Determine whether the first access key is still in use by using this command:\n\n```bash\naws iam get-access-key-last-used\n```\n\n4. One approach is to wait several days and then check the old access key for any use before proceeding.\n\nEven if step Step 3 indicates no use of the old key, it is recommended that you do not immediately delete the first access key. Instead, change the state of the first access key to Inactive using this command:\n\n```bash\naws iam update-access-key\n```\n\n5. Use only the new access key to confirm that your applications are working. Any applications and tools that still use the original access key will stop working at this point because they no longer have access to AWS resources. If you find such an application or tool, you can switch its state back to Active to reenable the first access key. Then return to step Step 2 and update this application to use the new key.\n6. After you wait some period of time to ensure that all applications and tools have been updated, you can delete the first access key with this command:\n\n```bash\naws iam delete-access-key\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_15",
    "description": "IAM users are granted access to services, functions, and data through IAM policies. There are three ways to define policies for a user: 1) Edit the user policy directly, aka an inline, or user, policy; 2) attach a policy directly to a user; 3) add the user to an IAM group that has an attached policy. Only the third implementation is recommended.",
    "title": "1.15 Ensure IAM Users Receive Permissions Only Through Groups",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.15",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nIAM users are granted access to services, functions, and data through IAM policies. There are four ways to define policies for a user: 1) Edit the user policy directly, aka an inline, or user, policy; 2) attach a policy directly to a user; 3) add the user to an IAM group that has an attached policy; 4) add the user to an IAM group that has an inline policy.\n\nOnly the third implementation is recommended.\n\nAssigning IAM policy only through groups unifies permissions management to a single, flexible layer consistent with organizational functional roles. By unifying permissions management, the likelihood of excessive permissions is reduced.\n\n## Remediation\n\nPerform the following to create an IAM group and assign a policy to it:\n\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n2. In the navigation pane, click `Groups` and then click `Create New Group`.\n3. In the `Group Name` box, type the name of the group and then click `Next Step`.\n4. In the list of policies, select the check box for each policy that you want to apply to all members of the group. Then click `Next Step`.\n5. Click `Create Group`.\n\nPerform the following to add a user to a given group:\n\n1. Sign into the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n2. In the navigation pane, click `Groups`.\n3. Select the group to add a user to\n4. Click `Add Users To Group`\n5. Select the users to be added to the group\n6. Click `Add Users`\n\nPerform the following to remove a direct association between an user and the policy:\n\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n2. In the left navigation pane, click on Users.\n3. For each user:\n  - Select the user.\n  - Click on the `Permissions` tab.\n  - Expand `Permissions policies`.\n  - Click `X` for each policy; then click Detach or Remove (depending on policy type).\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_16",
    "description": "IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.",
    "title": "1.16 Ensure IAM policies that allow full \"*:*\" administrative privileges are not attached",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.16",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nIAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.\n\nIt's more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later.\n\nProviding full administrative privileges instead of restricting to the minimum set of permissions that the user is required to do exposes the resources to potentially unwanted actions.\n\nIAM policies that have a statement with \"Effect\": \"Allow\" with \"Action\": \"*\" over \"Resource\": \"*\" should be removed.\n\n## Remediation\n\n### From Console:\n\nPerform the following to detach the policy that has full administrative privileges:\n\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n2. In the navigation pane, click Policies and then search for the policy name found in the audit step.\n3. Select the policy that needs to be deleted.\n4. In the policy action menu, select first `Detach`.\n5. Select all Users, Groups, Roles that have this policy attached.\n6. Click `Detach Policy`.\n7. In the policy action menu, select `Detach`.\n\n### From Command Line:\n\nPerform the following to detach the policy that has full administrative privileges as found in the audit step:\n\n1. Lists all IAM users, groups, and roles that the specified managed policy is attached to.\n\n```bash\naws iam list-entities-for-policy --policy-arn \u003cpolicy_arn\u003e\n```\n\n2. Detach the policy from all IAM Users:\n\n```bash\naws iam detach-user-policy --user-name \u003ciam_user\u003e --policy-arn \u003cpolicy_arn\u003e\n```\n\n3. Detach the policy from all IAM Groups:\n\n```bash\naws iam detach-group-policy --group-name \u003ciam_group\u003e --policy-arn \u003cpolicy_arn\u003e\n```\n\n4. Detach the policy from all IAM Roles:\n\n```bash\naws iam detach-role-policy --role-name \u003ciam_role\u003e --policy-arn \u003cpolicy_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_17",
    "description": "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.",
    "title": "1.17 Ensure a support role has been created to manage incidents with AWS Support",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.17",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role, with the appropriate policy assigned, to allow authorized users to manage incidents with AWS Support.\n\nBy implementing least privilege for access control, an IAM Role will require an appropriate IAM Policy to allow Support Center Access in order to manage Incidents with AWS Support.\n\n## Remediation\n\n### From Command Line:\n\n1. Create a IAM policy for managing incidents with AWS.\n    - Create a trust relationship policy document that allows \u003ciam_user\u003e to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json.\n```json\n      {\n        \"Version\":\"2012-10-17\",\n        \"Statement\":[\n          {\n            \"Effect\":\"Allow\",\n            \"Principal\":{\n              \"AWS\":\"\u003ciam_user\u003e\"\n            },\n            \"Action\":\"sts:AssumeRole\"\n          }\n        ]\n      }\n```\n\n2. Create the IAM role using the above trust policy.\n\n```bash\naws iam create-role --role-name \u003caws_support_iam_role\u003e --assume-role-policy- document file:///tmp/TrustPolicy.json\n```\n\n3. Attach 'AWSSupportAccess' managed policy to the created IAM role:\n\n```bash\naws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSSupportAccess --role-name \u003caws_support_iam_role\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_18",
    "description": "AWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. \"AWS Access\" means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.",
    "title": "1.18 Ensure IAM instance roles are used for AWS resource access from instances",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.18",
      "cis_level": "2",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. \"AWS Access\" means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.\n\nAWS IAM roles reduce the risks associated with sharing and rotating credentials that can be used outside of AWS itself. If credentials are compromised, they can be used from outside of the AWS account they give access to. In contrast, in order to leverage role permissions an attacker would need to gain and maintain access to a specific instance to use the privileges associated with it.\n\nAdditionally, if credentials are encoded into compiled applications or other hard to change mechanisms, then they are even more unlikely to be properly rotated due to service disruption risks. As time goes on, credentials that cannot be rotated are more likely to be known by an increasing number of individuals who no longer work for the organization owning the credentials.\n\n## Remediation\n\n### From Console:\n\n1. Sign in to the AWS Management Console and navigate to EC2 dashboard at https://console.aws.amazon.com/ec2/.\n2. In the left navigation panel, choose `Instances`.\n3. Select the EC2 instance you want to modify.\n4. Click `Actions`.\n5. Click `Security`.\n6. Click `Modify IAM role`.\n7. Click `Create new IAM role` if a new IAM role is required.\n8. Select the IAM role you want to attach to your instance in the `IAM role` dropdown.\n9. Click `Update IAM role`.\n10. Repeat steps 3 to 9 for each EC2 instance in your AWS account that requires an IAM role to be attached.\n\n### From Command Line:\n\n1. Run the `describe-instances` command to list all EC2 instance IDs, available in the selected AWS region:\n\n```bash\naws ec2 describe-instances --region \u003cregion-name\u003e --query 'Reservations[*].Instances[*].InstanceId'\n```\n\n2. Run the `associate-iam-instance-profile` command to attach an instance profile (which is attached to an IAM role) to the EC2 instance:\n\n```bash\naws ec2 associate-iam-instance-profile --region \u003cregion-name\u003e --instance-id \u003cInstance-ID\u003e --iam-instance-profile Name=\"Instance-Profile-Name\"\n```\n\n3. Run the `describe-instances` command again for the recently modified EC2 instance. The command output should return the instance profile ARN and ID:\n\n```bash\naws ec2 describe-instances --region \u003cregion-name\u003e --instance-id \u003cInstance-ID\u003e --query 'Reservations[*].Instances[*].IamInstanceProfile'\n```\n\n4. Repeat steps 1 to 3 for each EC2 instance in your AWS account that requires an IAM role to be attached.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_19",
    "description": "To enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. You can use ACM or IAM to store and deploy server certificates. Use IAM as a certificate manager only when you must support HTTPS connections in a region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.",
    "title": "1.19 Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.19",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nTo enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. You can use ACM or IAM to store and deploy server certificates. Use IAM as a certificate manager only when you must support HTTPS connections in a region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.\n\nRemoving expired SSL/TLS certificates eliminates the risk that an invalid certificate will be deployed accidentally to a resource such as AWS Elastic Load Balancer (ELB), which can damage the credibility of the application/website behind the ELB. As a best practice, it is recommended to delete expired certificates.\n\n## Remediation\n\n### From Console:\n\nRemoving expired certificates via AWS Management Console is not currently supported. To delete SSL/TLS certificates stored in IAM via the AWS API use the Command Line Interface (CLI).\n\n### From Command Line:\n\nTo delete Expired Certificate run following command by replacing \u003cCERTIFICATE_NAME\u003e with the name of the certificate to delete:\n\n```bash\naws iam delete-server-certificate --server-certificate-name \u003cCERTIFICATE_NAME\u003e\n```\n\nWhen the preceding command is successful, it does not return any output.\n\n### Default Value:\n\nBy default, expired certificates won't get deleted.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_20",
    "description": "Enable IAM Access analyzer for IAM policies about all resources in each region. IAM Access Analyzer is a technology introduced at AWS reinvent 2019. After the Analyzer is enabled in IAM, scan results are displayed on the console showing the accessible resources. Scans show resources that other accounts and federated users can access, such as KMS keys and IAM roles. So the results allow you to determine if an unintended user is allowed, making it easier for administrators to monitor least privileges access. Access Analyzer analyzes only policies that are applied to resources in the same AWS Region.",
    "title": "1.20 Ensure that IAM Access analyzer is enabled for all regions",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.20",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nEnable IAM Access analyzer for IAM policies about all resources in each active AWS region.\n\nIAM Access Analyzer is a technology introduced at AWS reinvent 2019. After the Analyzer is enabled in IAM, scan results are displayed on the console showing the accessible resources. Scans show resources that other accounts and federated users can access, such as KMS keys and IAM roles. So the results allow you to determine if an unintended user is allowed, making it easier for administrators to monitor least privileges access. Access Analyzer analyzes only policies that are applied to resources in the same AWS Region.\n\nAWS IAM Access Analyzer helps you identify the resources in your organization and accounts, such as Amazon S3 buckets or IAM roles, that are shared with an external entity. This lets you identify unintended access to your resources and data. Access Analyzer identifies resources that are shared with external principals by using logic- based reasoning to analyze the resource-based policies in your AWS environment. IAM Access Analyzer continuously monitors all policies for S3 bucket, IAM roles, KMS (Key Management Service) keys, AWS Lambda functions, and Amazon SQS(Simple Queue Service) queues.\n\n## Remediation\n\n### From Console:\n\nPerform the following to enable IAM Access analyzer for IAM policies:\n\n1. Open the IAM console athttps://console.aws.amazon.com/iam/.\n2. Choose `Access analyzer`.\n3. Choose `Create analyzer`.\n4. On the `Create analyzer` page, confirm that the `Region` displayed is the Region where you want to enable Access Analyzer.\n5. Enter a name for the analyzer. `Optional as it will generatea name for you automatically`.\n6. Add any tags that you want to apply to the analyzer. `Optional`.\n7. Choose `Create Analyzer`.\n8. Repeat these step for each active region.\n\n### From Command Line:\n\nRun the following command:\n\n```bash\naws accessanalyzer create-analyzer --analyzer-name \u003cNAME\u003e --type \u003cACCOUNT|ORGANIZATION\u003e\n```\nRepeat this command above for each active region.\n\n**Note**: The IAM Access Analyzer is successfully configured only when the account you use has the necessary permissions.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_21",
    "description": "In multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provide via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations.",
    "title": "1.21 Ensure IAM users are managed centrally via identity federation or AWS Organizations for multi-account environments",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.21",
      "cis_level": "2",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nIn multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provided via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations.\n\nCentralizing IAM user management to a single identity store reduces complexity and thus the likelihood of access management errors.\n\n## Remediation\n\nPerform the following action to check:\n\nFor multi-account AWS environments with an external identity provider...\n\n1. Determine the master account for identity federation or IAM user management.\n2. Login to that account through the AWS Management Console.\n3. Click `Services`.\n4. Click `IAM`.\n6. Click `Identity providers`.\n5. Verify the configuration.\n\nThen..., determine all accounts that should not have local users present. For each account...\n\n1. Determine all accounts that should not have local users present.\n2. Login to the AWS Management Console.\n3. Switch role into each identified account.\n4. Click `Services`.\n5. Click `IAM`.\n6. Click `Users`.\n7. Confirm that no IAM users representing individuals are present.\n\nFor multi-account AWS environments implementing AWS Organizations without an external identity provider...\n\n1. Determine all accounts that should not have local users present.\n2. Login to the AWS Management Console.\n3. Switch role into each identified account.\n4. Click `Services`.\n5. Click `IAM`.\n6. Click `Users`.\n7. Confirm that no IAM users representing individuals are present.\n\n**Note**: The remediation procedure will vary based on the individual organization's implementation of identity federation and/or AWS Organizations with the acceptance criteria that no non-service IAM users, and non-root accounts, are present outside the account providing centralized IAM user management.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 1 Identity and Access Management",
    "category_hierarchy": [
      "CIS v2.0.0",
      "1 Identity and Access Management"
    ],
    "control_id": "aws_compliance.control.cis_v200_1_22",
    "description": "AWS CloudShell is a convenient way of running CLI commands against AWS services; a managed IAM policy ('AWSCloudShellFullAccess') provides full access to CloudShell, which allows file upload and download capability between a user's local system and the CloudShell environment. Within the CloudShell environment a user has sudo permissions, and can access the internet. So it is feasible to install file transfer software (for example) and move data from CloudShell to external internet servers.",
    "title": "1.22 Ensure access to AWSCloudShellFullAccess is restricted",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "1.22",
      "cis_level": "1",
      "cis_section_id": "1",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/IAM"
    },
    "documentation": "## Description\n\nAWS CloudShell is a convenient way of running CLI commands against AWS services; a managed IAM policy ('AWSCloudShellFullAccess') provides full access to CloudShell, which allows file upload and download capability between a user's local system and the CloudShell environment. Within the CloudShell environment a user has sudo permissions, and can access the internet. So it is feasible to install file transfer software (for example) and move data from CloudShell to external internet servers.\n\nAccess to this policy should be restricted as it presents a potential channel for data exfiltration by malicious cloud admins that are given full permissions to the service. AWS documentation describes how to create a more restrictive IAM policy which denies file transfer permissions.\n\n## Remediation\n\n### From Console:\n\n1. Open the IAM console at https://console.aws.amazon.com/iam/.\n2. In the left pane, select Policies.\n3. Search for and select AWS CloudShellFullAccess.\n4. On the Entities attached tab, for each item, check the box and select Detach.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 2 Storage \u003e 2.1 Simple Storage Service (S3)",
    "category_hierarchy": [
      "CIS v2.0.0",
      "2 Storage",
      "2.1 Simple Storage Service (S3)"
    ],
    "control_id": "aws_compliance.control.cis_v200_2_1_1",
    "description": "At the Amazon S3 bucket level, you can configure permissions through a bucket policy making the objects accessible only through HTTPS.",
    "title": "2.1.1 Ensure S3 Bucket Policy is set to deny HTTP requests",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.1.1",
      "cis_level": "2",
      "cis_section_id": "2.1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nAt the Amazon S3 bucket level, you can configure permissions through a bucket policy making the objects accessible only through HTTPS.\n\nBy default, Amazon S3 allows both HTTP and HTTPS requests. To achieve only allowing access to Amazon S3 objects through HTTPS you also have to explicitly deny access to HTTP requests. Bucket policies that allow HTTPS requests without explicitly denying HTTP requests will not comply with this recommendation.\n\n## Remediation\n\n### From Console:\n\n1. Log in to AWS Management Console and open the Amazon S3 console using https://console.aws.amazon.com/s3/.\n2. Select the Check box next to the Bucket.\n3. Click on 'Permissions'.\n4. Click 'Bucket Policy'.\n5. Add this to the existing policy filling in the required information.\n\n```bash\n{\n    \"Sid\": \"\u003coptional\u003e\",\n    \"Effect\": \"Deny\",\n    \"Principal\": \"*\",\n    \"Action\": \"s3:*\",\n    \"Resource\": \"arn:aws:s3:::\u003cbucket_name\u003e/*\",\n    \"Condition\":{\n        \"Bool\":{\n            \"aws:SecureTransport\": \"false\"\n        }\n    }\n}\n```\n\n6. Save.\n7. Repeat for all the buckets in your AWS account that contain sensitive data.\n\n### From Console\n\nUsing AWS Policy Generator:\n\n1. Repeat steps 1-4 above.\n2. Click on `Policy Generator` at the bottom of the Bucket Policy Editor.\n3. Select Policy Type `S3 Bucket Policy`.\n4. Add Statements\n- `Effect` = Deny\n- `Principal` = *\n- `AWS Service` = Amazon S3\n- `Actions` = *\n- `Amazon Resource Name` = \u0026lt;ARN of the S3 Bucket\u0026gt;\n5. Generate Policy.\n6. Copy the text and add it to the Bucket Policy.\n\n### From Command Line:\n\n1. Export the bucket policy to a json file.\n\n```bash\n aws s3api get-bucket-policy --bucket \u003cbucket_name\u003e --query Policy --output text \u003e policy.json\n```\n\n2. Modify the policy.json file by adding in this statement:\n\n```bash\n{\n    \"Sid\": \"\u003coptional\u003e\",\n    \"Effect\": \"Deny\",\n    \"Principal\": \"*\",\n    \"Action\": \"s3:*\",\n    \"Resource\": \"arn:aws:s3:::\u003cbucket_name\u003e/*\",\n    \"Condition\":{\n        \"Bool\":{\n            \"aws:SecureTransport\": \"false\"\n        }\n    }\n}\n```\n\n3. Apply this modified policy back to the S3 bucket:\n\n```bash\naws s3api put-bucket-policy --bucket \u003cbucket_name\u003e --policy file://policy.json\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_2",
      "aws_compliance.benchmark.cis_v200_2_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_2/aws_compliance.benchmark.cis_v200_2_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 2 Storage \u003e 2.1 Simple Storage Service (S3)",
    "category_hierarchy": [
      "CIS v2.0.0",
      "2 Storage",
      "2.1 Simple Storage Service (S3)"
    ],
    "control_id": "aws_compliance.control.cis_v200_2_1_2",
    "description": "Once MFA Delete is enabled on your sensitive and classified S3 bucket it requires the user to have two forms of authentication.",
    "title": "2.1.2 Ensure MFA Delete is enabled on S3 buckets",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.1.2",
      "cis_level": "2",
      "cis_section_id": "2.1",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nOnce MFA Delete is enabled on your sensitive and classified S3 bucket it requires the user to have two forms of authentication.\n\nAdding MFA delete to an S3 bucket, requires additional authentication when you change the version state of your bucket or you delete and object version adding another layer of security in the event your security credentials are compromised or unauthorized access is granted.\n\n## Remediation\n\nPerform the steps below to enable MFA delete on an S3 bucket.\n\n**Note: **\n- You cannot enable MFA Delete using the AWS Management Console. You must use the AWS CLI or API.\n- You must use your root account to enable MFA Delete on S3 buckets\n\n### From Command line:\n\n1. Run the s3ap put-bucket-versioning command\n\n```bash\naws s3api put-bucket-versioning --profile my-root-profile --bucket Bucket_Name --versioning-configuration Status=Enabled,MFADelete=Enabled --mfa “arn:aws:iam::aws_account_id:mfa/root-account-mfa-device passcode”\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_2",
      "aws_compliance.benchmark.cis_v200_2_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_2/aws_compliance.benchmark.cis_v200_2_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 2 Storage \u003e 2.1 Simple Storage Service (S3)",
    "category_hierarchy": [
      "CIS v2.0.0",
      "2 Storage",
      "2.1 Simple Storage Service (S3)"
    ],
    "control_id": "aws_compliance.control.cis_v200_2_1_3",
    "description": "Amazon S3 buckets can contain sensitive data, that for security purposes should be discovered, monitored, classified and protected. Macie along with other 3rd party tools can automatically provide an inventory of Amazon S3 buckets.",
    "title": "2.1.3 Ensure all data in Amazon S3 has been discovered, classified and secured when required",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.1.3",
      "cis_level": "2",
      "cis_section_id": "2.1",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nAmazon S3 buckets can contain sensitive data, that for security purposes should be discovered, monitored, classified and protected. Macie along with other 3rd party tools can automatically provide an inventory of Amazon S3 buckets.\n\nUsing a Cloud service or 3rd Party software to continuously monitor and automate the process of data discovery and classification for S3 buckets using machine learning and pattern matching is a strong defense in protecting that information.\n\nAmazon Macie is a fully managed data security and data privacy service that uses machine learning and pattern matching to discover and protect your sensitive data in AWS.\n\n## Remediation\n\nPerform the steps below to enable and configure Amazon Macie\n\n### From Console:\n\n1. Log on to the Macie console at https://console.aws.amazon.com/macie/\n2. Click `Get started`.\n3. Click `Enable Macie`.\n\nSetup a repository for sensitive data discovery results\n\n1. In the Left pane, under Settings, click `Discovery results`.\n2. Make sure `Create bucket` is selected.\n3. Create a bucket, enter a name for the bucket. The name must be unique across all S3 buckets. In addition, the name must start with a lowercase letter or a number.\n4. Click on `Advanced`.\n5. Block all public access, make sure `Yes` is selected.\n6. KMS encryption, specify the AWS KMS key that you want to use to encrypt the results. The key must be a symmetric, customer master key (CMK) that's in the same Region as the S3 bucket.\n7. Click on `Save`.\n\nCreate a job to discover sensitive data\n\n1. In the left pane, click `S3 buckets`. Macie displays a list of all the S3 buckets for your account.\n2. Select the `check box` for each bucket that you want Macie to analyze as part of the job\n3. Click `Create job`.\n4. Click `Quick create`.\n5. For the Name and description step, enter a name and, optionally, a description of the job.\n6. Then click `Next`.\n7. For the Review and create step, click `Submit`.\n\nReview your findings\n\n1. In the left pane, click `Findings`.\n2. To view the details of a specific finding, choose any field other than the check box for the finding.\n\nIf you are using a 3rd Party tool to manage and protect your s3 data, follow the Vendor documentation for implementing and configuring that tool.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_2",
      "aws_compliance.benchmark.cis_v200_2_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_2/aws_compliance.benchmark.cis_v200_2_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 2 Storage \u003e 2.1 Simple Storage Service (S3)",
    "category_hierarchy": [
      "CIS v2.0.0",
      "2 Storage",
      "2.1 Simple Storage Service (S3)"
    ],
    "control_id": "aws_compliance.control.cis_v200_2_1_4",
    "description": "Amazon S3 provides Block public access (bucket settings) and Block public access (account settings) to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However, an IAM principle with sufficient S3 permissions can enable public access at the bucket and/or object level. While enabled, Block public access (bucket settings) prevents an individual bucket, and its contained objects, from becoming publicly accessible. Similarly, Block public access (account settings) prevents all buckets, and contained objects, from becoming publicly accessible across the entire account.",
    "title": "2.1.4 Ensure that S3 Buckets are configured with 'Block public access (bucket settings)'",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.1.4",
      "cis_level": "1",
      "cis_section_id": "2.1",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nAmazon S3 provides `Block public access (bucket settings)` and `Block public access (account settings)` to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However, an IAM principal with sufficient S3 permissions can enable public access at the bucket and/or object level. While enabled, `Block public access (bucket settings)` prevents an individual bucket, and its contained objects, from becoming publicly accessible. Similarly, `Block public access (account settings)` prevents all buckets, and contained objects, from becoming publicly accessible across the entire account.\n\nAmazon S3 `Block public access (bucket settings)` prevents the accidental or malicious public exposure of data contained within the respective bucket(s).\n\nAmazon S3 `Block public access (account settings)` prevents the accidental or malicious public exposure of data contained within all buckets of the respective AWS account.\n\nWhether blocking public access to all or some buckets is an organizational decision that should be based on data sensitivity, least privilege, and use case.\n\n## Remediation\n\n### If utilizing Block Public Access (bucket settings)\n\n### From Console:\n\n1. Login to AWS Management Console and open the Amazon S3 console using https://console.aws.amazon.com/s3/.\n2. Select the Check box next to the Bucket.\n3. Click on 'Edit public access settings'.\n4. Click 'Block all public access'.\n5. Repeat for all the buckets in your AWS account that contain sensitive data.\n\n### From Command Line:\n\n1. List all of the S3 Buckets\n\n```bash\naws s3 ls\n```\n\n2. Set the public access to true on that bucket\n\n```bash\naws s3api put-public-access-block --bucket \u003cname-of-bucket\u003e --public-access-block-configuration \"BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true\"\n```\n\n### If utilizing Block Public Access (account settings)\n\n### From Console:\n\nIf the output reads `true` for the separate configuration settings then it is set on the account.\n\n1. Login to AWS Management Console and open the Amazon S3 console using https://console.aws.amazon.com/s3/.\n2. Choose `Block Public Access (account settings)`.\n3. Choose `Edit` to change the block public access settings for all the buckets in your AWS account.\n4. Choose the settings you want to change, and then choose `Save`. For details about each setting, pause on the `i` icons.\n5. When you're asked for confirmation, enter `confirm`. Then Click `Confirm` to save your changes.\n\n### From Command Line:\n\nTo set Block Public access settings for the account, run the following command:\n\n```bash\naws s3control put-public-access-block --public-access-block-configuration BlockPublicAcls=true, IgnorePublicAcls=true, BlockPublicPolicy=true, RestrictPublicBuckets=true --account-id \u003cvalue\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_2",
      "aws_compliance.benchmark.cis_v200_2_1"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_2/aws_compliance.benchmark.cis_v200_2_1",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 2 Storage \u003e 2.2 Elastic Compute Cloud (EC2)",
    "category_hierarchy": [
      "CIS v2.0.0",
      "2 Storage",
      "2.2 Elastic Compute Cloud (EC2)"
    ],
    "control_id": "aws_compliance.control.cis_v200_2_2_1",
    "description": "Elastic Compute Cloud (EC2) supports encryption at rest when using the Elastic Block Store (EBS) service. While disabled by default, forcing encryption at EBS volume creation is supported.",
    "title": "2.2.1 Ensure EBS Volume Encryption is Enabled in all Regions",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.2.1",
      "cis_level": "1",
      "cis_section_id": "2.2",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/EBS"
    },
    "documentation": "## Description\n\nElastic Compute Cloud (EC2) supports encryption at rest when using the Elastic Block Store (EBS) service. While disabled by default, forcing encryption at EBS volume creation is supported.\n\nEncrypting data at rest reduces the likelihood that it is unintentionally exposed and can nullify the impact of disclosure if the encryption remains unbroken.\n\n## Remediation\n\n### From Console:\n\n1. Log in to AWS Management Console and open the Amazon EC2 console using https://console.aws.amazon.com/ec2/\n2. Under `Account attributes`, click `EBS encryption`.\n3. Click `Manage`.\n4. Click the `Enable` checkbox.\n5. Click `Update EBS encryption`\n6. Repeat for every region requiring the change.\n\n**Note**: EBS volume encryption is configured per region.\n\n### From Command Line:\n\n1. Run\n\n```bash\naws --region \u003cregion\u003e ec2 enable-ebs-encryption-by-default.\n```\n\n2. Verify that `EbsEncryptionByDefault`: `true` is displayed.\n3. Repeat every region requiring the change.\n\n**Note**: EBS volume encryption is configured per region.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_2",
      "aws_compliance.benchmark.cis_v200_2_2"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_2/aws_compliance.benchmark.cis_v200_2_2",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 2 Storage \u003e 2.3 Relational Database Service (RDS)",
    "category_hierarchy": [
      "CIS v2.0.0",
      "2 Storage",
      "2.3 Relational Database Service (RDS)"
    ],
    "control_id": "aws_compliance.control.cis_v200_2_3_1",
    "description": "Amazon RDS encrypted DB instances use the industry standard AES-256 encryption algorithm to encrypt your data on the server that hosts your Amazon RDS DB instances. After your data is encrypted, Amazon RDS handles authentication of access and decryption of your data transparently with a minimal impact on performance.",
    "title": "2.3.1 Ensure that encryption-at-rest is enabled for RDS Instances",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.3.1",
      "cis_level": "1",
      "cis_section_id": "2.3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/RDS"
    },
    "documentation": "## Description\n\nAmazon RDS encrypted DB instances use the industry standard AES-256 encryption algorithm to encrypt your data on the server that hosts your Amazon RDS DB instances. After your data is encrypted, Amazon RDS handles authentication of access and decryption of your data transparently with a minimal impact on performance.\n\nDatabases are likely to hold sensitive and critical data, it is highly recommended to implement encryption in order to protect your data from unauthorized access or disclosure. With RDS encryption enabled, the data stored on the instance's underlying storage, the automated backups, read replicas, and snapshots, are all encrypted.\n\n## Remediation\n\n### From Console:\n\n1. Login to the AWS Management Console and open the RDS dashboard at https://console.aws.amazon.com/rds/.\n2. In the left navigation panel, click on `Databases`.\n3. Select the Database instance that needs to be encrypted.\n4. Click on `Actions` button placed at the top right and select `Take Snapshot`.\n5. On the Take Snapshot page, enter a database name of which you want to take a snapshot in the `Snapshot Name` field and click on `Take Snapshot`.\n6. Select the newly created snapshot and click on the `Action` button placed at the top right and select `Copy snapshot` from the Action menu.\n7. On the Make Copy of DB Snapshot page, perform the following:\n- In the New DB Snapshot Identifier field, Enter a name for the `new snapshot`.\n- Check `Copy Tags`, New snapshot must have the same tags as the source snapshot.\n- Select `Yes` from the `Enable Encryption` dropdown list to enable encryption, You can choose to use the AWS default encryption key or custom key from Master Key dropdown list.\n8. Click `Copy Snapshot` to create an encrypted copy of the selected instance snapshot.\n9. Select the new Snapshot Encrypted Copy and click on the `Action` button placed at the top right and select `Restore Snapshot` button from the Action menu, This will restore the encrypted snapshot to a new database instance.\n10. On the Restore DB Instance page, enter a unique name for the new database instance in the DB Instance Identifier field.\n11. Review the instance configuration details and click `Restore DB Instance`.\n12. As the new instance provisioning process is completed can update application configuration to refer to the endpoint of the new Encrypted database instance Once the database endpoint is changed at the application level, can remove the unencrypted instance.\n\n### From Command Line:\n\n1. Run `describe-db-instances` command to list all RDS database names available in the selected AWS region, The command output should return database instance identifier.\n\n```bash\naws rds describe-db-instances --region \u003cregion-name\u003e --query 'DBInstances[*].DBInstanceIdentifier'\n```\n\n2. Run `create-db-snapshot` command to create a snapshot for the selected database instance, The command output will return the new snapshot with name DB Snapshot Name.\n\n```bash\naws rds create-db-snapshot --region \u003cregion-name\u003e --db-snapshot-identifier \u003cDB-Snapshot-Name\u003e --db-instance-identifier \u003cDB-Name\u003e\n```\n\n3. Now run `list-aliases` command to list the KMS keys aliases available in a specified region, The command output should return each `key alias currently available`. For our RDS encryption the activation process, locate the ID of the AWS default KMS key.\n\n```bash\naws kms list-aliases --region \u003cregion-name\u003e\n```\n\n4. Run `copy-db-snapshot` command using the default KMS key ID for RDS instances returned earlier to create an encrypted copy of the database instance snapshot, the command output will return the `encrypted instance snapshot configuration`.\n\n```bash\naws rds copy-db-snapshot --region \u003cregion-name\u003e --source-db-snapshotidentifier \u003cDB-Snapshot-Name\u003e --target-db-snapshot-identifier \u003cDB-SnapshotName-Encrypted\u003e --copy-tags --kms-key-id \u003cKMS-ID-For-RDS\u003e\n```\n\n5. Run `restore-db-instance-from-db-snapshot` command to restore the encrypted snapshot created at the previous step to a new database instance, if successful, the command output should return the new encrypted database instance configuration.\n\n```bash\naws rds restore-db-instance-from-db-snapshot --region \u003cregion-name\u003e --dbinstance-identifier \u003cDB-Name-Encrypted\u003e --db-snapshot-identifier \u003cDBSnapshot-Name-Encrypted\u003e\n```\n\n6. Run `describe-db-instances` command to list all RDS database names, available in the selected AWS region, output will return database instance identifier name. Select encrypted database name that we just created DB-Name-Encrypted.\n\n```bash\naws rds describe-db-instances --region \u003cregion-name\u003e --query 'DBInstances[*].DBInstanceIdentifier'\n```\n\n7. Run again `describe-db-instances` command using the RDS instance identifier returned earlier, to determine if the selected database instance is encrypted, the command output should return the encryption status True.\n\n```bash\naws rds describe-db-instances --region \u003cregion-name\u003e --db-instance-identifier \u003cDB-Name-Encrypted\u003e --query 'DBInstances[*].StorageEncrypted'\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_2",
      "aws_compliance.benchmark.cis_v200_2_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_2/aws_compliance.benchmark.cis_v200_2_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 2 Storage \u003e 2.3 Relational Database Service (RDS)",
    "category_hierarchy": [
      "CIS v2.0.0",
      "2 Storage",
      "2.3 Relational Database Service (RDS)"
    ],
    "control_id": "aws_compliance.control.cis_v200_2_3_2",
    "description": "Ensure that RDS database instances have the Auto Minor Version Upgrade flag enabled in order to receive automatically minor engine upgrades during the specified maintenance window. So, RDS instances can get the new features, bug fixes, and security patches for their database engines.",
    "title": "2.3.2 Ensure Auto Minor Version Upgrade feature is Enabled for RDS Instances",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.3.2",
      "cis_level": "1",
      "cis_section_id": "2.3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/RDS"
    },
    "documentation": "## Description\n\nEnsure that RDS database instances have the Auto Minor Version Upgrade flag enabled in order to receive automatically minor engine upgrades during the specified maintenance window. So, RDS instances can get the new features, bug fixes, and security patches for their database engines.\n\nAWS RDS will occasionally deprecate minor engine versions and provide new ones for an upgrade. When the last version number within the release is replaced, the version changed is considered minor. With Auto Minor Version Upgrade feature enabled, the version upgrades will occur automatically during the specified maintenance window so your RDS instances can get the new features, bug fixes, and security patches for their database engines.\n\n## Remediation\n\n### From Console:\n\n1. Log in to the AWS management console and navigate to the RDS dashboard at https://console.aws.amazon.com/rds/.\n2. In the left navigation panel, click on `Databases`.\n3. Select the RDS instance that wants to update.\n4. Click on the `Modify` button placed on the top right side.\n5. On the `Modify DB Instance`:`\u003cinstance identifier\u003e` page, In the `Maintenance` section, select `Auto minor version upgrade` click on the `Yes` radio button.\n6. At the bottom of the page click on `Continue`, check to Apply Immediately to apply the changes immediately, or select `Apply during the next scheduled maintenance window` to avoid any downtime.\n7. Review the changes and click on `Modify DB Instance`. The instance status should change from available to modifying and back to available. Once the feature is enabled, the `Auto Minor Version Upgrade` status should change to `Yes`.\n\n### From Command Line:\n\n1. Run `describe-db-instances` command to list all RDS database instance names, available in the selected AWS region:\n\n```bash\naws rds describe-db-instances --region \u003cregionName\u003e --query 'DBInstances[*].DBInstanceIdentifier'\n```\n\n2. The command output should return each database instance identifier.\n3. Run the `modify-db-instance` command to modify the selected RDS instance configuration this command will apply the changes immediately, Remove `--apply-immediately` to apply changes during the next scheduled maintenance window and avoid any downtime:\n\n```bash\naws rds modify-db-instance --region \u003cregionName\u003e --db-instance-identifier \u003cdbInstanceIdentifier\u003e --auto-minor-version-upgrade --apply-immediately\n```\n\n4. The command output should reveal the new configuration metadata for the RDS instance and check `AutoMinorVersionUpgrade` parameter value.\n5. Run `describe-db-instances` command to check if the Auto Minor Version Upgrade feature has been successfully enable:\n\n```bash\naws rds describe-db-instances --region \u003cregionName\u003e --db-instance-identifier \u003cdbInstanceIdentifier\u003e --query 'DBInstances[*].AutoMinorVersionUpgrade'\n```\n\n6. The command output should return the feature current status set to `true`, the feature is `enabled` and the minor engine upgrades will be applied to the selected RDS instance.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_2",
      "aws_compliance.benchmark.cis_v200_2_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_2/aws_compliance.benchmark.cis_v200_2_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 2 Storage \u003e 2.3 Relational Database Service (RDS)",
    "category_hierarchy": [
      "CIS v2.0.0",
      "2 Storage",
      "2.3 Relational Database Service (RDS)"
    ],
    "control_id": "aws_compliance.control.cis_v200_2_3_3",
    "description": "Ensure and verify that RDS database instances provisioned in your AWS account do restrict unauthorized access in order to minimize security risks. To restrict access to any publicly accessible RDS database instance, you must disable the database Publicly Accessible flag and update the VPC security group associated with the instance.",
    "title": "2.3.3 Ensure that public access is not given to RDS Instance",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.3.3",
      "cis_level": "1",
      "cis_section_id": "2.3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/RDS"
    },
    "documentation": "## Description\n\nEnsure and verify that RDS database instances provisioned in your AWS account do restrict unauthorized access in order to minimize security risks. To restrict access to any publicly accessible RDS database instance, you must disable the database Publicly Accessible flag and update the VPC security group associated with the instance.\n\nEnsure that no public-facing RDS database instances are provisioned in your AWS account and restrict unauthorized access in order to minimize security risks. When the RDS instance allows unrestricted access (0.0.0.0/0), everyone and everything on the Internet can establish a connection to your database and this can increase the opportunity for malicious activities such as brute force attacks, PostgreSQL injections, or DoS/DDoS attacks.\n\n## Remediation\n\n### From Console:\n\n1. Log in to the AWS management console and navigate to the RDS dashboard at https://console.aws.amazon.com/rds/.\n2. Under the navigation panel, On RDS Dashboard, click `Databases`.\n3. Select the RDS instance that you want to update.\n4. Click `Modify` from the dashboard top menu.\n5. On the Modify DB Instance panel, under the `Connectivity` section, click on `Additional connectivity configuration` and update the value for `Publicly Accessible` to Not publicly accessible to restrict public access. Follow the below steps to update subnet configurations:\n- Select the `Connectivity and security` tab, and click on the VPC attribute value inside the `Networking` section.\n- Select the `Details` tab from the VPC dashboard bottom panel and click on Route table configuration attribute value.\n- On the Route table details page, select the Routes tab from the dashboard bottom panel and click on `Edit routes`.\n- On the Edit routes page, update the Destination of Target which is set to `igw-xxxxx` and click on `Save` routes.\n6. On the Modify DB Instance panel Click on `Continue` and In the Scheduling of modifications section, perform one of the following actions based on your requirements:\n- Select Apply during the next scheduled maintenance window to apply the changes automatically during the next scheduled maintenance window.\n- Select Apply immediately to apply the changes right away. With this option, any pending modifications will be asynchronously applied as soon as possible, regardless of the maintenance window setting for this RDS database instance. Note that any changes available in the pending modifications queue are also applied. If any of the pending modifications require downtime, choosing this option can cause unexpected downtime for the application.\n7. Repeat steps 3 to 6 for each RDS instance available in the current region.\n8. Change the AWS region from the navigation bar to repeat the process for other regions.\n\n### From Command Line:\n\n1. Run `describe-db-instances` command to list all RDS database names identifiers, available in the selected AWS region:\n\n```bash\naws rds describe-db-instances --region \u003cregion-name\u003e --query 'DBInstances[*].DBInstanceIdentifier'\n```\n\n2. The command output should return each database instance identifier.\n3. Run `modify-db-instance` command to modify the selected RDS instance configuration. Then use the following command to disable the `Publicly Accessible` flag for the selected RDS instances. This command use the apply-immediately flag. If you want `to avoid any downtime --no-apply-immediately flag can be used:`\n\n```bash\naws rds modify-db-instance --region \u003cregion-name\u003e --db-instance-identifier \u003cdb-name\u003e --no-publicly-accessible --apply-immediately\n```\n\n4. The command output should reveal the `PubliclyAccessible` configuration under pending values and should get applied at the specified time.\n5. Updating the Internet Gateway Destination via AWS CLI is not currently supported To update information about Internet Gateway use the AWS Console Procedure.\n6. Repeat steps 1 to 5 for each RDS instance provisioned in the current region.\n7. Change the AWS region by using the --region filter to repeat the process for other regions.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_2",
      "aws_compliance.benchmark.cis_v200_2_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_2/aws_compliance.benchmark.cis_v200_2_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 2 Storage \u003e 2.4 Elastic File System (EFS)",
    "category_hierarchy": [
      "CIS v2.0.0",
      "2 Storage",
      "2.4 Elastic File System (EFS)"
    ],
    "control_id": "aws_compliance.control.cis_v200_2_4_1",
    "description": "EFS data should be encrypted at rest using AWS KMS (Key Management Service).",
    "title": "2.4.1 Ensure that encryption is enabled for EFS file systems",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "2.4.1",
      "cis_level": "1",
      "cis_section_id": "2.4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/EFS"
    },
    "documentation": "## Description\n\nEFS data should be encrypted at rest using AWS KMS (Key Management Service).\n\nData should be encrypted at rest to reduce the risk of a data breach via direct access to the storage device.\n\n## Remediation\n\n**It is important to note that EFS file system data at rest encryption must be turned on when creating the file system.**\nIf an EFS file system has been created without data at rest encryption enabled then you must create another EFS file system with the correct configuration and transfer the data.\n\n**Steps to create an EFS file system with data encrypted at rest:**\n\n### From Console:\n\n1. Login to the AWS Management Console and Navigate to `Elastic File System (EFS)` dashboard.\n2. Select `File Systems` from the left navigation panel.\n3. Click `Create File System` button from the dashboard top menu to start the file system setup process.\n4. On the `Configure file system access` configuration page, perform the following actions.\n- Choose the right VPC from the VPC dropdown list.\n- Within Create mount targets section, select the checkboxes for all of the Availability Zones (AZs) within the selected VPC. These will be your mount targets.\n- Click `Next step` to continue.\n5. Perform the following on the `Configure optional settings` page.\n- Create `tags` to describe your new file system.\n- Choose `performance mode` based on your requirements.\n- Check `Enable encryption` checkbox and choose `aws/elasticfilesystem` from Select KMS master key dropdown list to enable encryption for the new file system using the default master key provided and managed by AWS KMS.\n- Click `Next step` to continue.\n6. Review the file system configuration details on the `review and create` page and then click `Create File System` to create your new AWS EFS file system.\n7. Copy the data from the old unencrypted EFS file system onto the newly create encrypted file system.\n8. Remove the unencrypted file system as soon as your data migration to the newly create encrypted file system is completed.\n9. Change the AWS region from the navigation bar and repeat the entire process for other aws regions.\n\n\n### From Command Line:\n\n1. Run describe-file-systems command to describe the configuration information available for the selected (unencrypted) file system (see Audit section to identify the right resource):\n\n```bash\naws efs describe-file-systems --region \u003cregion\u003e --file-system-id \u003cfilesystem-id from audit section step 2 output\u003e\n```\n\n2. The command output should return the requested configuration information.\n3. To provision a new AWS EFS file system, you need to generate a universally unique identifier (UUID) in order to create the token required by the create-filesystem command. To create the required token, you can use a randomly generated UUID from \"https://www.uuidgenerator.net\".\n4. Run create-file-system command using the unique token created at the previous step\n\n```bash\naws efs create-file-system --region \u003cregion\u003e --creation-token \u003cToken (randomly generated UUID from step 3)\u003e --performance-mode generalPurpose --encrypted\n```\n\n5. The command output should return the new file system configuration metadata.\n6. Run create-mount-target command using the newly created EFS file system ID returned at the previous step as identifier and the ID of the Availability Zone (AZ) that will represent the mount target:\n\n```bash\naws efs create-mount-target --region \u003cregion\u003e --file-system-id \u003cfile-systemid\u003e --subnet-id \u003csubnet-id\u003e\n```\n\n7. The command output should return the new mount target metadata.\n8. Now you can mount your file system from an EC2 instance.\n9. Copy the data from the old unencrypted EFS file system onto the newly create encrypted file system.\n10. Remove the unencrypted file system as soon as your data migration to the newly create encrypted file system is completed.\n\n```bash\naws efs delete-file-system --region \u003cregion\u003e --file-system-id \u003cunencryptedfile-system-id\u003e\n```\n\n11. Change the AWS region by updating the --region and repeat the entire process for other aws regions.\n\n### Default Value:\n\nEFS file system data is encrypted at rest by default when creating a file system via the Console. Encryption at rest is not enabled by default when creating a new file system using the AWS CLI, API, and SDKs.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_2",
      "aws_compliance.benchmark.cis_v200_2_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_2/aws_compliance.benchmark.cis_v200_2_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_1",
    "description": "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).",
    "title": "3.1 Ensure CloudTrail is enabled in all regions",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.1",
      "cis_level": "1",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nAWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).\n\nThe AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,\n- ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected\n- ensuring that a multi-regions trail exists will ensure that Global Service Logging is enabled for a trail by default to capture recording of events generated on AWS global services\n- for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account\n\n## Remediation\n\nPerform the following to enable global (Multi-region) CloudTrail logging:\n\n### From Console:\n\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/cloudtrail.\n2. Click on *Trails* on the left navigation pane.\n3. Click `Get Started Now`, if presented.\n- Click `Add new trail`.\n- Enter a trail name in the `Trail name` box.\n- Set the `Apply trail to all regions` option to `Yes`.\n- Specify an S3 bucket name in the `S3 bucket` box.\n- Click `Create`.\n4. If 1 or more trails already exist, select the target trail to enable for global logging.\n5. Click the edit icon (pencil) next to `Apply trail to all regions` , Click `Yes` and Click `Save`.\n6. Click the edit icon (pencil) next to `Management Events` click `All` for setting `Read/Write Events` and Click `Save`.\n\n### From Command Line:\n\n```bash\naws cloudtrail create-trail --name \u003ctrail_name\u003e --bucket-name \u003cs3_bucket_for_cloudtrail\u003e --is-multi-region-trail\n\naws cloudtrail update-trail --name \u003ctrail_name\u003e --is-multi-region-trail\n```\n\nNote: Creating CloudTrail via CLI without providing any overriding options configures `Management Events` to set `All` type of `Read/Writes` by default.\n\n### Default Value:\n\nNot Enabled",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_2",
    "description": "CloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.",
    "title": "3.2 Ensure CloudTrail log file validation is enabled",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.2",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nCloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.\n\nEnabling log file validation will provide additional integrity checking of CloudTrail logs.\n\n## Remediation\n\nPerform the following to enable log file validation on a given trail:\n\n### From Console:\n\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/cloudtrail.\n2. Click on `Trails` on the left navigation pane.\n3. Click on target trail.\n4. With in the `General details` section click `edit`.\n5. Under the `Advanced settings` section.\n6. Check the enable box under `Log file validation`.\n7. Click `Save changes`.\n\n### From Command Line:\n\n```bash\naws cloudtrail update-trail --name \u003ctrail_name\u003e --enable-log-file-validation\n```\n\nNote that periodic validation of logs using these digests can be performed by running the following command:\n\n```bash\naws cloudtrail validate-logs --trail-arn \u003ctrail_arn\u003e --start-time \u003cstart_time\u003e --end-time \u003cend_time\u003e\n```\n\n### Default Value:\n\nNot Enabled.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_3",
    "description": "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevent public access to the CloudTrail logs.",
    "title": "3.3 Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.3",
      "cis_level": "1",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nCloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevent public access to the CloudTrail logs.\n\nAllowing public access to CloudTrail log content may aid an adversary in identifying weaknesses in the affected account's use or configuration.\n\n## Remediation\n\nPerform the following to remove any public access that has been granted to the bucket via an ACL or S3 bucket policy:\n\n1. Go to Amazon S3 console at https://console.aws.amazon.com/s3/home.\n2. Right-click on the bucket and click Properties.\n3. In the `Properties` pane, click the `Permissions` tab.\n4. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.\n5. Select the row that grants permission to `Everyone` or `Any Authenticated User`.\n6. Uncheck all the permissions granted to `Everyone` or `Any Authenticated User` (click `x` to delete the row).\n7. Click `Save` to save the ACL.\n8. If the `Edit bucket policy` button is present, click it.\n9. Remove any `Statement` having an `Effect` set to `Allow` and a `Principal` set to \"*\" or {\"AWS\": \"*\"}, that doesn't also have a condition to restrict access, such as `aws:PrincipalOrgID`.\n\n### Default Value:\n\nBy default, S3 buckets are not publicly accessible.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_4",
    "description": "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.",
    "title": "3.4 Ensure CloudTrail trails are integrated with CloudWatch Logs",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.4",
      "cis_level": "1",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nAWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, real time analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.\n\n**Note:** The intent of this recommendation is to ensure AWS account activity is being captured, monitored, and appropriately alarmed on. CloudWatch Logs is a native way to accomplish this using AWS services but does not preclude the use of an alternate solution.\n\nSending CloudTrail logs to CloudWatch Logs will facilitate real-time and historic activity logging based on user, API, resource, and IP address, and provides opportunity to establish alarms and notifications for anomalous or sensitivity account activity.\n\n## Remediation\n\nTo ensure that CloudTrail trails are integrated with CloudWatch Logs, perform the following to establish the prescribed state:\n\n### From Console:\n\n1. Log into the CloudTrail console at https://console.aws.amazon.com/cloudtrail/\n2. Select the `Trail` the needs to be updated.\n3. Scroll down to `CloudWatch Logs`.\n4. Click `Edit`.\n5. Under `CloudWatch Logs` click the box `Enabled`.\n6. Under `Log Group` pick new or select an existing log group.\n7. Edit the `Log group name` to match the CloudTrail or pick the existing CloudWatch Group.\n8. Under `IAM Role` pick new or select an existing.\n9. Edit the `Role name` to match the CloudTrail or pick the existing IAM Role.\n10. Click `Save changes`.\n\n### From Command Line:\n\n```bash\naws cloudtrail update-trail --name \u003ctrail_name\u003e --cloudwatch-logs-log-grouparn \u003ccloudtrail_log_group_arn\u003e --cloudwatch-logs-role-arn \u003ccloudtrail_cloudwatchLogs_role_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_5",
    "description": "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended AWS Config be enabled in all regions.",
    "title": "3.5 Ensure AWS Config is enabled in all regions",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.5",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/Config"
    },
    "documentation": "## Description\n\nAWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended AWS Config be enabled in all regions.\n\nThe AWS configuration item history captured by AWS Config enables security analysis, resource change tracking, and compliance auditing.\n\n## Remediation\n\nTo implement AWS Config configuration:\n\n### From Console:\n\n1. Select the region you want to focus on in the top right of the console.\n2. Click Services.\n3. Click Config.\n4. If a Config recorder is enabled in this region, you should navigate to the Settings page from the navigation menu on the left hand side. If a Config recorder is not yet enabled in this region then you should select \"Get Started\".\n5. Select \"Record all resources supported in this region\".\n6. Choose to include global resources (IAM resources).\n7. Specify an S3 bucket in the same account or in another managed AWS account.\n8. Create an SNS Topic from the same AWS account or another managed AWS account.\n\n### From Command Line:\n\n1. Ensure there is an appropriate S3 bucket, SNS topic, and IAM role per the [AWS Config Service prerequisites](https://docs.aws.amazon.com/config/latest/developerguide/gs-cli-prereq.html).\n2. Run this command to create a new configuration recorder:\n\n```bash\naws configservice put-configuration-recorder --configuration-recorder name=default,roleARN=arn:aws:iam::012345678912:role/myConfigRole --recording- group allSupported=true,includeGlobalResourceTypes=true\n```\n\n3. Create a delivery channel configuration file locally which specifies the channel attributes, populated from the prerequisites set up previously:\n\n```bash\n{\n    \"name\": \"default\",\n    \"s3BucketName\": \"my-config-bucket\",\n    \"snsTopicARN\": \"arn:aws:sns:us-east-1:012345678912:my-config-notice\",\n    \"configSnapshotDeliveryProperties\":{\n        \"deliveryFrequency\": \"Twelve_Hours\"\n    }\n}\n```\n\n4. Run this command to create a new delivery channel, referencing the json configuration file made in the previous step:\n\n```bash\naws configservice put-delivery-channel --delivery-channel file://deliveryChannel.json\n```\n\n5. Start the configuration recorder by running the following command:\n\n```bash\naws configservice start-configuration-recorder --configuration-recorder-name default\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_6",
    "description": "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.",
    "title": "3.6 Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.6",
      "cis_level": "1",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nS3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.\n\nBy enabling S3 bucket logging on target S3 buckets, it is possible to capture all events which may affect objects within any target buckets. Configuring logs to be placed in a separate bucket allows access to log information which can be useful in security and incident response workflows.\n\n## Remediation\n\nPerform the following to enable S3 bucket logging:\n\n### From Console:\n\n1. Sign in to the AWS Management Console and open the S3 console at https://console.aws.amazon.com/s3.\n2. Under `All Buckets` click on the target S3 bucket.\n3. Click on `Properties` in the top right of the console.\n4. Under `Bucket`:  \u0026lt;s3_bucket_for_cloudtrail\u0026gt; click on `Logging`.\n5. Configurebucketlogging\n  - Click on the `Enabled` checkbox.\n  - Select Target Bucket from list.\n  - Enter a Target Prefix.\n6. Click `Save`.\n\n### From Command Line:\n\n1. Get the name of the S3 bucket that CloudTrail is logging to:\n\n```bash\naws cloudtrail describe-trails --region \u003cregion-name\u003e --query trailList[*].S3BucketName\n```\n\n2. Copy and add target bucket name at `\u003cLogging_BucketName\u003e`, Prefix for logfile at `\u003cLogFilePrefix\u003e` and optionally add an email address in the following template and save it as `\u003cFileName.Json\u003e`:\n\n```bash\n{\n  \"LoggingEnabled\":{\n    \"TargetBucket\": \"\u003cLogging_BucketName\u003e\",\n    \"TargetPrefix\": \"\u003cLogFilePrefix\u003e\",\n    \"TargetGrants\": [\n        {\n        \"Grantee\":{\n            \"Type\": \"AmazonCustomerByEmail\",\n            \"EmailAddress\": \"\u003cEmailID\u003e\"\n            },\n        \"Permission\": \"FULL_CONTROL\"\n        }\n    ]\n  }\n}\n```\n\n3. Run the `put-bucket-logging` command with bucket name and \u0026lt;FileName.Json\u0026gt; as input, for more information refer at [put-bucket-logging](https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-logging.html):\n\n```bash\naws s3api put-bucket-logging --bucket \u003cBucketName\u003e --bucket-logging-status file://\u003cFileName.Json\u003e\n```\n\n### Default Value:\n\nLogging is disabled.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_7",
    "description": "AWS CloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses Hardware Security Modules (HSMs) to protect the security of encryption keys. CloudTrail logs can be configured to leverage server side encryption (SSE) and KMS customer created master keys (CMK) to further protect CloudTrail logs. It is recommended that CloudTrail be configured to use SSE-KMS.",
    "title": "3.7 Ensure CloudTrail logs are encrypted at rest using KMS CMKs",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.7",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudTrail"
    },
    "documentation": "## Description\n\nAWS CloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses Hardware Security Modules (HSMs) to protect the security of encryption keys. CloudTrail logs can be configured to leverage server side encryption (SSE) and KMS customer created master keys (CMK) to further protect CloudTrail logs. It is recommended that CloudTrail be configured to use SSE-KMS.\n\nConfiguring CloudTrail to use SSE-KMS provides additional confidentiality controls on log data as a given user must have S3 read permission on the corresponding log bucket and must be granted decrypt permission by the CMK policy.\n\n## Remediation\n\nPerform the following to configure CloudTrail to use SSE-KMS:\n\n### From Console:\n\n1. Sign in to the AWS Management Console and open the CloudTrail console at https://console.aws.amazon.com/cloudtrail.\n2. In the left navigation pane, choose `Trails`.\n3. Click on a Trail.\n4. Under the `S3` section click on the edit button (pencil icon).\n5. Click `Advanced`.\n6. Select an existing CMK from the `KMS key Id` drop-down menu\n- Note: Ensure the CMK is located in the same region as the S3 bucket\n- Note: You will need to apply a KMS Key policy on the selected CMK in order for CloudTrail as a service to encrypt and decrypt log files using the CMK provided. Steps are provided [here](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/create-kms-key-policy-for-cloudtrail.html) for editing the selected CMK Key policy\n7. Click `Save`.\n8. You will see a notification message stating that you need to have decrypt permissions on the specified KMS key to decrypt log files.\n9. Click `Yes`.\n\n### From Command Line:\n\n```bash\naws cloudtrail update-trail --name \u003ctrail_name\u003e --kms-id \u003ccloudtrail_kms_key\u003e aws kms put-key-policy --key-id \u003ccloudtrail_kms_key\u003e --policy \u003ccloudtrail_kms_key_policy\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_8",
    "description": "AWS Key Management Service (KMS) allows customers to rotate the backing key which is key material stored within the KMS which is tied to the key ID of the Customer Created customer master key (CMK). It is the backing key that is used to perform cryptographic operations such as encryption and decryption. Automated key rotation currently retains all prior backing keys so that decryption of encrypted data can take place transparently. It is recommended that CMK key rotation be enabled for symmetric keys. Key rotation can not be enabled for any asymmetric CMK.",
    "title": "3.8 Ensure rotation for customer created symmetric CMKs is enabled",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.8",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/KMS"
    },
    "documentation": "## Description\n\nAWS Key Management Service (KMS) allows customers to rotate the backing key which is key material stored within the KMS which is tied to the key ID of the Customer Created customer master key (CMK). It is the backing key that is used to perform cryptographic operations such as encryption and decryption. Automated key rotation currently retains all prior backing keys so that decryption of encrypted data can take place transparently. It is recommended that CMK key rotation be enabled for symmetric keys. Key rotation can not be enabled for any asymmetric CMK.\n\nRotating encryption keys helps reduce the potential impact of a compromised key as data encrypted with a new key cannot be accessed with a previous key that may have been exposed. Keys should be rotated every year, or upon event that would result in the compromise of that key.\n\n## Remediation\n\n### From Console:\n\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam.\n2. In the left navigation pane, choose `Customer managed keys`.\n3. Select a customer managed CMK where `Key spec = SYMMETRIC_DEFAULT`.\n4. Underneath the \"General configuration\" panel open the tab \"Key rotation\".\n5. Check the \"Automatically rotate this KMS key every year.\" checkbox.\n\n### From Command Line:\n\n1. Run the following command to enable key rotation:\n\n```bash\naws kms enable-key-rotation --key-id \u003ckms_key_id\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_9",
    "description": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. It is recommended that VPC Flow Logs be enabled for packet \"Rejects\" for VPCs.",
    "title": "3.9 Ensure VPC flow logging is enabled in all VPCs",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.9",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nVPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. It is recommended that VPC Flow Logs be enabled for packet \"Rejects\" for VPCs.\n\nVPC Flow Logs provide visibility into network traffic that traverses the VPC and can be used to detect anomalous traffic or insight during security workflows.\n\n## Remediation\n\nPerform the following to determine if VPC Flow logs is enabled:\n\n### From Console:\n\n1. Sign in to the management console.\n2. Select `Services` then `VPC`.\n3. In the left navigation pane, select `Your VPCs`.\n4. Select a VPC.\n5. In the right pane, select the `Flow Logs` tab.\n6. If no Flow Log exists, click `Create Flow Log`.\n7. For Filter, select `Reject`.\n8. Enter in a `Role` and `Destination Log Group`.\n9. Click `Create Log Flow`.\n10. Click on `CloudWatch Logs Group`.\n\n**Note**: Setting the filter to \"Reject\" will dramatically reduce the logging data accumulation for this recommendation and provide sufficient information for the purposes of breach detection, research and remediation. However, during periods of least privilege security group engineering, setting this the filter to \"All\" can be very helpful in discovering existing traffic flows required for proper operation of an already running environment.\n\n### From Command Line:\n\n1. Create a policy document and name it as `role_policy_document.json` and paste the following content:\n\n```bash\n{\n  \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Sid\": \"test\",\n        \"Effect\": \"Allow\",\n        \"Principal\":{\n            \"Service\": \"ec2.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n      }\n    ]\n}\n```\n\n2. Create another policy document and name it as `iam_policy.json` and paste the following content:\n\n```bash\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\":[\n          \"logs:CreateLogGroup\",\n          \"logs:CreateLogStream\",\n          \"logs:DescribeLogGroups\",\n          \"logs:DescribeLogStreams\",\n          \"logs:PutLogEvents\",\n          \"logs:GetLogEvents\",\n          \"logs:FilterLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n3. Run the below command to create an IAM role:\n\n```bash\naws iam create-role --role-name \u003caws_support_iam_role\u003e --assume-role-policy- document file://\u003cfile-path\u003erole_policy_document.json\n```\n\n4. Run the below command to create an IAM policy:\n\n```bash\naws iam create-policy --policy-name \u003cami-policy-name\u003e --policy-document file://\u003cfile-path\u003eiam-policy.json\n```\n\n5. Run `attach-group-policy` command using the IAM policy ARN returned at the previous step to attach the policy to the IAM role (if the command succeeds, no output is returned):\n\n```bash\naws iam attach-group-policy --policy-arn arn:aws:iam::\u003caws-account- id\u003e:policy/\u003ciam-policy-name\u003e --group-name \u003cgroup-name\u003e\n```\n\n6. Run describe-vpcs to get the VpcId available in the selected region:\n\n```bash\naws ec2 describe-vpcs --region \u003cregion-name\u003e\n```\n\n7. The command output should return the VPC Id available in the selected region.\n8. Run `create-flow-logs` to create a flow log for the vpc:\n\n```bash\naws ec2 create-flow-logs --resource-type VPC --resource-ids \u003cvpc-id\u003e -- traffic-type REJECT --log-group-name \u003clog-group-name\u003e --deliver-logs-permission-arn \u003ciam-role-arn\u003e\n```\n\n9. Repeat step 8 for other vpcs available in the selected region.\n10. Change the region by updating --region and repeat remediation procedure for other vpcs.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_10",
    "description": "S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.",
    "title": "3.10 Ensure that Object-level logging for write events is enabled for S3 bucket",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.10",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nS3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.\n\nEnabling object-level logging will help you meet data compliance requirements within your organization, perform comprehensive security analysis, monitor specific patterns of user behavior in your AWS account or take immediate actions on any object-level API activity within your S3 Buckets using Amazon CloudWatch Events.\n\n## Remediation\n\n### From Console:\n\n1. Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/.\n2. In the left navigation panel, click `buckets` and then click on the S3 Bucket Name that you want to examine.\n3. Click `Properties` tab to see in detail bucket configuration.\n4. Click on the `Object-level` logging setting, enter the CloudTrail name for the recording activity. You can choose an existing Cloudtrail or create a new one by navigating to the Cloudtrail console link https://console.aws.amazon.com/cloudtrail/.\n5. Once the Cloudtrail is selected, check the `Write` event checkbox, so that `object-level` logging for Write events is enabled.\n6. Repeat steps 2 to 5 to enable object-level logging of write events for other S3 buckets.\n\n### From Command Line:\n\n1. To enable `object-level` data events logging for S3 buckets within your AWS account, run `put-event-selectors` command using the name of the trail that you want to reconfigure as identifier:\n\n```bash\naws cloudtrail put-event-selectors --region \u003cregion-name\u003e --trail-name \u003ctrail-name\u003e --event-selectors '[{ \"ReadWriteType\": \"WriteOnly\", \"IncludeManagementEvents\":true, \"DataResources\": [{ \"Type\": \"AWS::S3::Object\", \"Values\": [\"arn:aws:s3:::\u003cs3-bucket-name\u003e/\"] }] }]'\n```\n\n2. The command output will be `object-level` event trail configuration.\n3. If you want to enable it for all buckets at once then change Values parameter to `[\"arn:aws:s3\"]` in command given above.\n4. Repeat step 1 for each s3 bucket to update `object-level` logging of write events.\n5. Change the AWS region by updating the `--region` command parameter and perform the process for other regions.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 3 Logging",
    "category_hierarchy": [
      "CIS v2.0.0",
      "3 Logging"
    ],
    "control_id": "aws_compliance.control.cis_v200_3_11",
    "description": "S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.",
    "title": "3.11 Ensure that Object-level logging for read events is enabled for S3 bucket",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "3.11",
      "cis_level": "2",
      "cis_section_id": "3",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/S3"
    },
    "documentation": "## Description\n\nS3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.\n\nEnabling object-level logging will help you meet data compliance requirements within your organization, perform comprehensive security analysis, monitor specific patterns of user behavior in your AWS account or take immediate actions on any object-level API activity using Amazon CloudWatch Events.\n\n## Remediation\n\n### From Console:\n\n1. Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/.\n2. In the left navigation panel, click `buckets` and then click on the S3 Bucket Name that you want to examine.\n3. Click `Properties` tab to see in detail bucket configuration.\n4. Click on the `Object-level` logging setting, enter the CloudTrail name for the recording activity. You can choose an existing Cloudtrail or create a new one by navigating to the Cloudtrail console link https://console.aws.amazon.com/cloudtrail/.\n5. Once the Cloudtrail is selected, check the Read event checkbox, so that `object-level` logging for `Read` events is enabled.\n6. Repeat steps 2 to 5 to enable `object-level` logging of read events for other S3 buckets.\n\n### From Command Line:\n\n1. To enable `object-level` data events logging for S3 buckets within your AWS account, run `put-event-selectors` command using the name of the trail that you want to reconfigure as identifier:\n\n```bash\naws cloudtrail put-event-selectors --region \u003cregion-name\u003e --trail-name \u003ctrail-name\u003e --event-selectors '[{ \"ReadWriteType\": \"ReadOnly\", \"IncludeManagementEvents\":true, \"DataResources\": [{ \"Type\": \"AWS::S3::Object\", \"Values\": [\"arn:aws:s3:::\u003cs3-bucket-name\u003e/\"] }] }]'\n```\n\n2. The command output will be `object-level` event trail configuration.\n3. If you want to enable it for all buckets at once then change Values parameter to `[\"arn:aws:s3\"]` in command given above.\n4. Repeat step 1 for each s3 bucket to update `object-level` logging of write events.\n5. Change the AWS region by updating the `--region` command parameter and perform the process for other regions.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_3"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_3",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_1",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.",
    "title": "4.1 Ensure unauthorized API calls are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.1",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.\n\nIt is recommended that a metric filter and alarm be established for unauthorized API calls.\n\nMonitoring unauthorized API calls will help reduce time to detect malicious activity and can alert you to a potential security incident.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \"cloudtrail_log_group_name\" --filter-name \"\u003cunauthorized_api_calls_metric\u003e\" --metric-transformations metricName=unauthorized_api_calls_metric,metricNamespace=CISBenchmark,metricV alue=1 --filter-pattern \"{ ($.errorCode =\"*UnauthorizedOperation\") || ($.errorCode =\"AccessDenied*\") \u0026\u0026 ($.sourceIPAddress!=\"delivery.logs.amazonaws.com\") \u0026\u0026 ($.eventName!=\"HeadBucket\") }\"\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n**Note**: Capture the TopicArn displayed when creating the SNS Topic in Step 2.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn from step 2\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name \"unauthorized_api_calls_alarm\" --metric-name \"unauthorized_api_calls_metric\" --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold -- evaluation-periods 1 --namespace \"CISBenchmark\" --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_2",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.",
    "title": "4.2 Ensure management console sign-in without MFA is monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.2",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.\n\nIt is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\nMonitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA. These type of accounts are more susceptible to compromise and unauthorized access.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\nUse Command:\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003cno_mfa_console_signin_metric\u003e` --metric-transformations metricName= `\u003cno_mfa_console_signin_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = \"ConsoleLogin\") \u0026\u0026 ($.additionalEventData.MFAUsed != \"Yes\") }'\n```\n\nOr (To reduce false positives incase Single Sign-On (SSO) is used in organization):\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e --\nfilter-name `\u003cno_mfa_console_signin_metric\u003e` --metric-transformations metricName= `\u003cno_mfa_console_signin_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = \"ConsoleLogin\") \u0026\u0026 ($.additionalEventData.MFAUsed != \"Yes\") \u0026\u0026 ($.userIdentity.type = \"IAMUser\") \u0026\u0026 ($.responseElements.ConsoleLogin = \"Success\") }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cno_mfa_console_signin_alarm\u003e` --metric-name `\u003cno_mfa_console_signin_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold -- evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_3",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.",
    "title": "4.3 Ensure usage of 'root' account is monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.3",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.\n\nIt is recommended that a metric filter and alarm be established for 'root' login attempts to detect the unauthorized use, or attempts to use the root account.\n\nMonitoring for 'root' account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it.\n\nCloud Watch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for 'Root' account usage and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name `\u003ccloudtrail_log_group_name\u003e` -- filter-name `\u003croot_usage_metric\u003e` --metric-transformations metricName= `\u003croot_usage_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter- pattern '{ $.userIdentity.type = \"Root\" \u0026\u0026 $.userIdentity.invokedBy NOT EXISTS \u0026\u0026 $.eventType != \"AwsServiceEvent\" }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003croot_usage_alarm\u003e` --metric- name `\u003croot_usage_metric\u003e` --statistic Sum --period 300 --threshold 1 -- comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 -- namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_4",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.",
    "title": "4.4 Ensure IAM policy changes are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.4",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.\n\nIt is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\nMonitoring changes to IAM policies will help ensure authentication and authorization controls remain intact.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for IAM policy changes and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name `\u003ccloudtrail_log_group_name\u003e` -- filter-name `\u003ciam_changes_metric\u003e` --metric-transformations metricName= `\u003ciam_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 -- filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventNa me=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolic y)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=Del etePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersi on)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.event Name=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGr oupPolicy)||($.eventName=DetachGroupPolicy)}'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003ciam_changes_alarm\u003e` -- metric-name `\u003ciam_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_5",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, where metric filters and alarms can be established. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.",
    "title": "4.5 Ensure CloudTrail configuration changes are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.5",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, where metric filters and alarms can be established.\n\nIt is recommended that a metric filter and alarm be utilized for detecting changes to CloudTrail's configurations.\n\nMonitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for cloudtrail configuration changes and the \u003ccloudtrail_log_group_name\u003e taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003ccloudtrail_cfg_changes_metric\u003e` --metric-transformations metricName= `\u003ccloudtrail_cfg_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name\n`\u003ccloudtrail_cfg_changes_alarm\u003e` --metric-name `\u003ccloudtrail_cfg_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 -- namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_6",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for failed console authentication attempts.",
    "title": "4.6 Ensure AWS Management Console authentication failures are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.6",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.\n\nIt is recommended that a metric filter and alarm be established for failed console authentication attempts.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\nMonitoring failed console logins may decrease lead time to detect an attempt to brute force a credential, which may provide an indicator, such as source IP address, that can be used in other event correlation.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for AWS management Console Login Failures and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003cconsole_signin_failure_metric\u003e` --metric-transformations metricName= `\u003cconsole_signin_failure_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = ConsoleLogin) \u0026\u0026 ($.errorMessage = \"Failed authentication\") }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name\n`\u003cconsole_signin_failure_alarm\u003e` --metric-name `\u003cconsole_signin_failure_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 -- namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_7",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion.",
    "title": "4.7 Ensure disabling or scheduled deletion of customer created CMKs is monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.7",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.\n\nIt is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\nData encrypted with disabled or deleted keys will no longer be accessible. Changes in the state of a CMK should be monitored to make sure the change is intentional.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for disabled or scheduled for deletion CMK's and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003cdisable_or_delete_cmk_changes_metric\u003e` --metric- transformations metricName= `\u003cdisable_or_delete_cmk_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventSource = kms.amazonaws.com) \u0026\u0026 (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion)) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cdisable_or_delete_cmk_changes_alarm\u003e` --metric-name `\u003cdisable_or_delete_cmk_changes_metric\u003e` --statistic Sum --period 300 -- threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation- periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_8",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.",
    "title": "4.8 Ensure S3 bucket policy changes are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.8",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.\n\nIt is recommended that a metric filter and alarm be established for changes to S3 bucket policies.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\nMonitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for S3 bucket policy changes and the \u003ccloudtrail_log_group_name\u003e taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003cs3_bucket_policy_changes_metric\u003e` --metric-transformations metricName= `\u003cs3_bucket_policy_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) \u0026\u0026 (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cs3_bucket_policy_changes_alarm\u003e` --metric-name `\u003cs3_bucket_policy_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_9",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to AWS Config's configurations.",
    "title": "4.9 Ensure AWS Config configuration changes are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.9",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms.\n\nIt is recommended that a metric filter and alarm be established for detecting changes to AWS Config's configurations.\n\nMonitoring changes to AWS Config configuration will help ensure sustained visibility of configuration items within the AWS account.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for AWS Configuration changes and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003caws_config_changes_metric\u003e` --metric-transformations metricName= `\u003caws_config_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = config.amazonaws.com) \u0026\u0026 (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel) ||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder)) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003caws_config_changes_alarm\u003e` - -metric-name `\u003caws_config_changes_metric\u003e` --statistic Sum --period 300 -- threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation- periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_10",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. Security Groups are a stateful packet filter that controls ingress and egress traffic within a VPC.",
    "title": "4.10 Ensure security group changes are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.10",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. Security Groups are a stateful packet filter that controls ingress and egress traffic within a VPC.\n\nIt is recommended that a metric filter and alarm be established for detecting changes to Security Groups.\n\nMonitoring changes to security group will help ensure that resources and services are not unintentionally exposed.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for security groups changes and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \"\u003ccloudtrail_log_group_name\u003e\" -- filter-name \"\u003csecurity_group_changes_metric\u003e\" --metric-transformations metricName= \"\u003csecurity_group_changes_metric\u003e\" ,metricNamespace=\"CISBenchmark\",metricValue=1 --filter-pattern \"{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }\"\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name\n\"\u003csecurity_group_changes_alarm\u003e\" --metric-name \"\u003csecurity_group_changes_metric\u003e\" --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 -- namespace \"CISBenchmark\" --alarm-actions \"\u003csns_topic_arn\u003e\"\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_11",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs.",
    "title": "4.11 Ensure Network Access Control Lists (NACL) changes are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.11",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\nMonitoring changes to NACLs will help ensure that AWS resources and services are not unintentionally exposed.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:  \n\n1. Create a metric filter based on filter pattern provided which checks for NACL changes and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003cnacl_changes_metric\u003e` --metric-transformations metricName= `\u003cnacl_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 -- filter-pattern '{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cnacl_changes_alarm\u003e` -- metric-name `\u003cnacl_changes_metric\u003e` --statistic Sum --period 300 -- threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation- periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_12",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.",
    "title": "4.12 Ensure changes to network gateways are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.12",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\nMonitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for network gateways changes and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003cnetwork_gw_changes_metric\u003e` --metric-transformations metricName= `\u003cnetwork_gw_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cnetwork_gw_changes_alarm\u003e` - -metric-name `\u003cnetwork_gw_changes_metric\u003e` --statistic Sum --period 300 -- threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation- periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_13",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.",
    "title": "4.13 Ensure route table changes are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.13",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\nMonitoring changes to route tables will help ensure that all VPC traffic flows through an expected path and prevent any accidental or intentional modifications that may lead to uncontrolled network traffic. An alarm should be triggered every time an AWS API call is performed to create, replace, delete, or disassociate a Route Table.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for route table changes and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003croute_table_changes_metric\u003e` --metric-transformations metricName= `\u003croute_table_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003croute_table_changes_alarm\u003e` --metric-name `\u003croute_table_changes_metric\u003e` --statistic Sum --period 300 - -threshold 1 --comparison-operator GreaterThanOrEqualToThreshold -- evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_14",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.",
    "title": "4.14 Ensure VPC changes are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.14",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, or an external Security information and event management (SIEM) environment, and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\nVPCs in AWS are logically isolated virtual networks that can be used to launch AWS resources. Monitoring changes to VPC configuration will help ensure VPC traffic flow is not getting impacted. Changes to VPCs can impact network accessibility from the public internet and additionally impact VPC traffic flow to and from resources launched in the VPC.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for VPC changes and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1.\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003cvpc_changes_metric\u003e` --metric-transformations metricName= `\u003cvpc_changes_metric\u003e` ,metricNamespace='CISBenchmark',metricValue=1 -- filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003cvpc_changes_alarm\u003e` -- metric-name `\u003cvpc_changes_metric\u003e` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_15",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.",
    "title": "4.15 Ensure AWS Organizations changes are monitored",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.15",
      "cis_level": "1",
      "cis_section_id": "4",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/CloudWatch"
    },
    "documentation": "## Description\n\nReal-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs, and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.\n\nCloudWatch is an AWS native service that allows you to observe and monitor resources and applications. CloudTrail Logs can also be sent to an external Security information and event management (SIEM) environment for monitoring and alerting.\n\nMonitoring AWS Organizations changes can help you prevent any unwanted, accidental or intentional modifications that may lead to unauthorized access or other security breaches. This monitoring technique helps you to ensure that any unexpected changes performed within your AWS Organizations can be investigated and any unwanted changes can be rolled back.\n\n## Remediation\n\nIf you are using CloudTrails and CloudWatch, perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for AWS Organizations changes and the `\u003ccloudtrail_log_group_name\u003e` taken from audit step 1:\n\n```bash\naws logs put-metric-filter --log-group-name \u003ccloudtrail_log_group_name\u003e -- filter-name `\u003corganizations_changes\u003e` --metric-transformations metricName= `\u003corganizations_changes\u003e` ,metricNamespace='CISBenchmark',metricValue=1 -- filter-pattern '{ ($.eventSource = organizations.amazonaws.com) \u0026\u0026 (($.eventName = \"AcceptHandshake\") || ($.eventName = \"AttachPolicy\") || ($.eventName = \"CreateAccount\") || ($.eventName = \"CreateOrganizationalUnit\") || ($.eventName = \"CreatePolicy\") || ($.eventName = \"DeclineHandshake\") || ($.eventName = \"DeleteOrganization\") || ($.eventName = \"DeleteOrganizationalUnit\") || ($.eventName = \"DeletePolicy\") || ($.eventName = \"DetachPolicy\") || ($.eventName = \"DisablePolicyType\") || ($.eventName = \"EnablePolicyType\") || ($.eventName = \"InviteAccountToOrganization\") || ($.eventName = \"LeaveOrganization\") || ($.eventName = \"MoveAccount\") || ($.eventName = \"RemoveAccountFromOrganization\") || ($.eventName = \"UpdatePolicy\") || ($.eventName = \"UpdateOrganizationalUnit\")) }'\n```\n\n**Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify:\n\n```bash\naws sns create-topic --name \u003csns_topic_name\u003e\n```\n\n**Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2:\n\n```bash\naws sns subscribe --topic-arn \u003csns_topic_arn\u003e --protocol \u003cprotocol_for_sns\u003e --notification-endpoint \u003csns_subscription_endpoints\u003e\n```\n\n**Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2:\n\n```bash\naws cloudwatch put-metric-alarm --alarm-name `\u003corganizations_changes\u003e` -- metric-name `\u003corganizations_changes\u003e` --statistic Sum --period 300 -- threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation- periods 1 --namespace 'CISBenchmark' --alarm-actions \u003csns_topic_arn\u003e\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 4 Monitoring",
    "category_hierarchy": [
      "CIS v2.0.0",
      "4 Monitoring"
    ],
    "control_id": "aws_compliance.control.cis_v200_4_16",
    "description": "Security Hub collects security data from across AWS accounts, services, and supported third-party partner products and helps you analyze your security trends and identify the highest priority security issues. When you enable Security Hub, it begins to consume, aggregate, organize, and prioritize findings from AWS services that you have enabled, such as Amazon GuardDuty, Amazon Inspector, and Amazon Macie. You can also enable integrations with AWS partner security products.",
    "title": "4.16 Ensure AWS Security Hub is enabled",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "4.16",
      "cis_level": "2",
      "cis_section_id": "4",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/SecurityHub"
    },
    "documentation": "## Description\n\nSecurity Hub collects security data from across AWS accounts, services, and supported third-party partner products and helps you analyze your security trends and identify the highest priority security issues. When you enable Security Hub, it begins to consume, aggregate, organize, and prioritize findings from AWS services that you have enabled, such as Amazon GuardDuty, Amazon Inspector, and Amazon Macie. You can also enable integrations with AWS partner security products.\n\nAWS Security Hub provides you with a comprehensive view of your security state in AWS and helps you check your environment against security industry standards and best practices - enabling you to quickly assess the security posture across your AWS accounts.\n\n## Remediation\n\nTo grant the permissions required to enable Security Hub, attach the Security Hub managed policy AWSSecurityHubFullAccess to an IAM user, group, or role.\n\nEnabling Security Hub\n\n### From Console:\n\n1. Use the credentials of the IAM identity to sign in to the Security Hub console.\n2. When you open the Security Hub console for the first time, choose Enable AWS Security Hub.\n3. On the welcome page, Security standards list the security standards that Security Hub supports.\n4. Choose Enable Security Hub.\n\n### From Command Line:\n\n1. Run the enable-security-hub command. To enable the default standards, include `--enable-default-standards`.\n\n```bash\naws securityhub enable-security-hub --enable-default-standards\n```\n\n2. To enable the security hub without the default standards, include `--no-enable-default-standards`.\n\n```bash\naws securityhub enable-security-hub --no-enable-default-standards\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_4"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_4",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v2.0.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v200_5_1",
    "description": "The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389, using either the TDP (6), UDP (17) or ALL (-1) protocols.",
    "title": "5.1 Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.1",
      "cis_level": "1",
      "cis_section_id": "5",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nThe Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port `22` and RDP to port `3389`, using either the TDP (6), UDP (17) or ALL (-1) protocols.\n\nPublic access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.\n\n## Remediation\n\n### From Console:\n\nPerform the following:\n\n1. Log into the AWS Management Console at https://console.aws.amazon.com/vpc/home.\n2. In the left pane, click `Network ACLs`.\n3. For each network ACL to remediate, perform the following:\n    - Select the network ACL.\n    - Click the `Inbound Rules` tab.\n    - Click `Edit inbound rules`.\n    - Either A) update the Source field to a range other than 0.0.0.0/0, or, B) Click `Delete` to remove the offending inbound rule.\n    - Click `Save`.",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_5",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v2.0.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v200_5_2",
    "description": "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389, using either the TDP (6), UDP (17) or ALL (-1) protocols.",
    "title": "5.2 Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.2",
      "cis_level": "1",
      "cis_section_id": "5",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nSecurity groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port `22` and RDP to port `3389`, using either the TDP (6), UDP (17) or ALL (-1) protocols.\n\nPublic access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.\n\n## Remediation\n\nPerform the following to implement the prescribed state:\n\n1. Log in to the AWS Management Console at https://console.aws.amazon.com/vpc/home.\n2. In the left pane, click `Security Groups`.\n3. For each security group to remediate, perform the following:\n4. Select the respective security group.\n5. Choose the `Inbound Rules` tab.\n6. Click `Edit Inbound rules` button.\n7. Identify the rules to be edited or removed.\n8. Either A) Update the Source field to a range other than 0.0.0.0/0 or B) Click `Delete` the offending inbound rule.\n9. Click `Save rules`.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_5",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v2.0.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v200_5_3",
    "description": "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.",
    "title": "5.3 Ensure no security groups allow ingress from ::/0 to remote server administration ports",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.3",
      "cis_level": "1",
      "cis_section_id": "5",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nSecurity groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port `22` and RDP to port `3389`.\n\nPublic access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.\n\n## Remediation\n\nPerform the following to implement the prescribed state:\n\n1. Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home.\n2. In the left pane, click `Security Groups`.\n3. For each security group to remediate, perform the following:\n4. Select the respective security group.\n5. Choose the `Inbound Rules` tab.\n6. Click `Edit Inbound rules` button.\n7. Identify the rules to be edited or removed.\n8. Either A) update the Source field to a range other than ::/0, or, B) Click `Delete` the offending inbound rule.\n9. Click `Save rules`.\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_5",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v2.0.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v200_5_4",
    "description": "A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.",
    "title": "5.4 Ensure the default security group of every VPC restricts all traffic",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.4",
      "cis_level": "2",
      "cis_section_id": "5",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nA VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.\n\nThe default VPC in every region should have its default security group updated to comply. Any newly created VPCs will automatically contain a default security group that will need remediation to comply with this recommendation.\n\n**NOTE:** When implementing this recommendation, VPC flow logging is invaluable in determining the least privilege port access required by systems to work properly because it can log all packet acceptances and rejections occurring under the current security groups. This dramatically reduces the primary barrier to least privilege engineering - discovering the minimum ports required by systems in the environment. Even if the VPC flow logging recommendation in this benchmark is not adopted as a permanent security measure, it should be used during any period of discovery and engineering for least privileged security groups.\n\nConfiguring all VPC default security groups to restrict all traffic will encourage least privilege security group development and mindful placement of AWS resources into security groups which will in-turn reduce the exposure of those resources.\n\n## Remediation\n\nSecurity Group Members\nPerform the following to implement the prescribed state:\n\n1. Identify AWS resources that exist within the default security group.\n2. Create a set of least privilege security groups for those resources.\n3. Place the resources in those security groups.\n4. Remove the resources noted in #1 from the default security group.\n\nSecurity Group State\n\n1. Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home.\n2. Repeat the next steps for all VPCs - including the default VPC in each AWS region:\n3. In the left pane, click `Security Groups`.\n4. For each default security group, perform the following:\n5. Select the `default` security group.\n6. Click the `Inbound Rules` tab.\n7. Remove any inbound rules.\n8. Click the `Outbound Rules` tab.\n9. Remove any Outbound rules.\n\n### Recommended:\nIAM groups allow you to edit the \"name\" field. After remediating default groups rules for all VPCs in all regions, edit this field to add text similar to \"DO NOT USE. DO NOT ADD RULES\"",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_5",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v2.0.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v200_5_5",
    "description": "Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection.",
    "title": "5.5 Ensure routing tables for VPC peering are \"least access\"",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.5",
      "cis_level": "2",
      "cis_section_id": "5",
      "cis_type": "manual",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/VPC"
    },
    "documentation": "## Description\n\nOnce a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection.\n\nBeing highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC.\n\n## Remediation\n\nRemove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable.\n\n### From Command Line:\n\n1. For each \u003croute_table_id\u003e containing routes non compliant with your routing policy (which grants more than desired \"least access\"), delete the non compliant route:\n\n```bash\naws ec2 delete-route --route-table-id \u003croute_table_id\u003e --destination-cidrblock \u003cnon_compliant_destination_CIDR\u003e\n```\n\n2. Create a new compliant route:\n\n```bash\naws ec2 create-route --route-table-id \u003croute_table_id\u003e --destination-cidrblock \u003ccompliant_destination_CIDR\u003e --vpc-peering-connection-id \u003cpeering_connection_id\u003e\n```\n",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_5",
    "executable": true
  },
  {
    "category_breadcrumb": "CIS v2.0.0 \u003e 5 Networking",
    "category_hierarchy": [
      "CIS v2.0.0",
      "5 Networking"
    ],
    "control_id": "aws_compliance.control.cis_v200_5_6",
    "description": "When enabling the Metadata Service on AWS EC2 instances, users have the option of using either Instance Metadata Service Version 1 (IMDSv1; a request/response method) or Instance Metadata Service Version 2 (IMDSv2; a session-oriented method).",
    "title": "5.6 Ensure that EC2 Metadata Service only allows IMDSv2",
    "tags": {
      "category": "Compliance",
      "cis": "true",
      "cis_item_id": "5.6",
      "cis_level": "1",
      "cis_section_id": "5",
      "cis_type": "automated",
      "cis_version": "v2.0.0",
      "plugin": "aws",
      "service": "AWS/EC2"
    },
    "documentation": "## Description\n\nWhen enabling the Metadata Service on AWS EC2 instances, users have the option of using either Instance Metadata Service Version 1 (IMDSv1; a request/response method) or Instance Metadata Service Version 2 (IMDSv2; a session-oriented method).\n\nAllowing Version 1 of the service may open EC2 instances to Server-Side Request Forgery (SSRF) attacks, so Amazon recommends utilizing Version 2 for better instance security.\n\n## Remediation\n\n### From Console:\n\n1. Log in to AWS Management Console and open the Amazon EC2 console using https://console.aws.amazon.com/ec2/.\n2. Under the Instances menu, select Instances.\n3. For each Instance, select the instance, then choose Actions \u003e Modify instance metadata options.\n4. If the Instance metadata service is enabled, set IMDSv2 to Required.\n\n### From Command Line:\n\n```bash\naws ec2 modify-instance-metadata-options --instance-id \u003cinstance_id\u003e --http- tokens required\n```",
    "parent_control_hierarchy": [
      "aws_compliance.benchmark.cis_v200",
      "aws_compliance.benchmark.cis_v200_5"
    ],
    "parent_control_breadcrumb": "aws_compliance.benchmark.cis_v200/aws_compliance.benchmark.cis_v200_5",
    "executable": true
  }
]