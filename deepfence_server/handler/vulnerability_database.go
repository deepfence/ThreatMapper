package handler

import (
	"bufio"
	"bytes"
	"errors"
	"io"
	"net/http"
	"time"

	"github.com/deepfence/ThreatMapper/deepfence_server/model"
	"github.com/deepfence/ThreatMapper/deepfence_utils/log"
	"github.com/deepfence/ThreatMapper/deepfence_utils/vulnerability_db"
	httpext "github.com/go-playground/pkg/v5/net/http"
)

var (
	contentTypeError = BadDecoding{errors.New("files should be of kind .tar.gz ")}
)

func (h *Handler) UploadVulnerabilityDB(w http.ResponseWriter, r *http.Request) {

	defer r.Body.Close()

	if err := r.ParseMultipartForm(1024 * 1024); err != nil {
		h.respondError(&BadDecoding{err}, w)
		return
	}
	file, fileHeader, err := r.FormFile("database")
	if err != nil {
		h.respondError(&BadDecoding{err}, w)
		return
	}
	defer file.Close()

	log.Info().Msgf("uploaded file content type %s", fileHeader.Header.Get("Content-Type"))
	if (fileHeader.Header.Get("Content-Type")) != "application/gzip" {
		h.respondError(&contentTypeError, w)
		return
	}

	var out bytes.Buffer
	_, err = io.Copy(bufio.NewWriter(&out), file)
	if err != nil {
		h.respondError(&BadDecoding{err}, w)
		return
	}

	path, checksum, err := vulnerability_db.UploadToMinio(r.Context(), out.Bytes(), fileHeader.Filename)
	if err != nil {
		log.Error().Msg(err.Error())
		h.respondError(&BadDecoding{err}, w)
		return
	}

	go func() {
		vulnerability_db.UpdateListing(path, checksum, time.Now())
	}()

	httpext.JSON(w, http.StatusOK, model.MessageResponse{Message: path + " " + checksum})
}
