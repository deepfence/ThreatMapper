/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the DetailedParent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetailedParent{}

// DetailedParent struct for DetailedParent
type DetailedParent struct {
	Id *string `json:"id,omitempty"`
	Label *string `json:"label,omitempty"`
	TopologyId *string `json:"topologyId,omitempty"`
}

// NewDetailedParent instantiates a new DetailedParent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedParent() *DetailedParent {
	this := DetailedParent{}
	return &this
}

// NewDetailedParentWithDefaults instantiates a new DetailedParent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedParentWithDefaults() *DetailedParent {
	this := DetailedParent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DetailedParent) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedParent) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DetailedParent) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DetailedParent) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DetailedParent) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedParent) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DetailedParent) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DetailedParent) SetLabel(v string) {
	o.Label = &v
}

// GetTopologyId returns the TopologyId field value if set, zero value otherwise.
func (o *DetailedParent) GetTopologyId() string {
	if o == nil || isNil(o.TopologyId) {
		var ret string
		return ret
	}
	return *o.TopologyId
}

// GetTopologyIdOk returns a tuple with the TopologyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedParent) GetTopologyIdOk() (*string, bool) {
	if o == nil || isNil(o.TopologyId) {
		return nil, false
	}
	return o.TopologyId, true
}

// HasTopologyId returns a boolean if a field has been set.
func (o *DetailedParent) HasTopologyId() bool {
	if o != nil && !isNil(o.TopologyId) {
		return true
	}

	return false
}

// SetTopologyId gets a reference to the given string and assigns it to the TopologyId field.
func (o *DetailedParent) SetTopologyId(v string) {
	o.TopologyId = &v
}

func (o DetailedParent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailedParent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !isNil(o.TopologyId) {
		toSerialize["topologyId"] = o.TopologyId
	}
	return toSerialize, nil
}

type NullableDetailedParent struct {
	value *DetailedParent
	isSet bool
}

func (v NullableDetailedParent) Get() *DetailedParent {
	return v.value
}

func (v *NullableDetailedParent) Set(val *DetailedParent) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedParent) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedParent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedParent(val *DetailedParent) *NullableDetailedParent {
	return &NullableDetailedParent{value: val, isSet: true}
}

func (v NullableDetailedParent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedParent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


