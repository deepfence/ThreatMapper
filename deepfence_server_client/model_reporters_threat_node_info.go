/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the ReportersThreatNodeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportersThreatNodeInfo{}

// ReportersThreatNodeInfo struct for ReportersThreatNodeInfo
type ReportersThreatNodeInfo struct {
	AttackPath [][]string `json:"attack_path"`
	ComplianceCount int32 `json:"compliance_count"`
	Count int32 `json:"count"`
	Id string `json:"id"`
	Label string `json:"label"`
	NodeType string `json:"node_type"`
	Nodes map[string]ReportersNodeInfo `json:"nodes"`
	SecretsCount int32 `json:"secrets_count"`
	VulnerabilityCount int32 `json:"vulnerability_count"`
}

// NewReportersThreatNodeInfo instantiates a new ReportersThreatNodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportersThreatNodeInfo(attackPath [][]string, complianceCount int32, count int32, id string, label string, nodeType string, nodes map[string]ReportersNodeInfo, secretsCount int32, vulnerabilityCount int32) *ReportersThreatNodeInfo {
	this := ReportersThreatNodeInfo{}
	this.AttackPath = attackPath
	this.ComplianceCount = complianceCount
	this.Count = count
	this.Id = id
	this.Label = label
	this.NodeType = nodeType
	this.Nodes = nodes
	this.SecretsCount = secretsCount
	this.VulnerabilityCount = vulnerabilityCount
	return &this
}

// NewReportersThreatNodeInfoWithDefaults instantiates a new ReportersThreatNodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportersThreatNodeInfoWithDefaults() *ReportersThreatNodeInfo {
	this := ReportersThreatNodeInfo{}
	return &this
}

// GetAttackPath returns the AttackPath field value
// If the value is explicit nil, the zero value for [][]string will be returned
func (o *ReportersThreatNodeInfo) GetAttackPath() [][]string {
	if o == nil {
		var ret [][]string
		return ret
	}

	return o.AttackPath
}

// GetAttackPathOk returns a tuple with the AttackPath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportersThreatNodeInfo) GetAttackPathOk() ([][]string, bool) {
	if o == nil || isNil(o.AttackPath) {
		return nil, false
	}
	return o.AttackPath, true
}

// SetAttackPath sets field value
func (o *ReportersThreatNodeInfo) SetAttackPath(v [][]string) {
	o.AttackPath = v
}

// GetComplianceCount returns the ComplianceCount field value
func (o *ReportersThreatNodeInfo) GetComplianceCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ComplianceCount
}

// GetComplianceCountOk returns a tuple with the ComplianceCount field value
// and a boolean to check if the value has been set.
func (o *ReportersThreatNodeInfo) GetComplianceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComplianceCount, true
}

// SetComplianceCount sets field value
func (o *ReportersThreatNodeInfo) SetComplianceCount(v int32) {
	o.ComplianceCount = v
}

// GetCount returns the Count field value
func (o *ReportersThreatNodeInfo) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ReportersThreatNodeInfo) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ReportersThreatNodeInfo) SetCount(v int32) {
	o.Count = v
}

// GetId returns the Id field value
func (o *ReportersThreatNodeInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReportersThreatNodeInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReportersThreatNodeInfo) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *ReportersThreatNodeInfo) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ReportersThreatNodeInfo) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ReportersThreatNodeInfo) SetLabel(v string) {
	o.Label = v
}

// GetNodeType returns the NodeType field value
func (o *ReportersThreatNodeInfo) GetNodeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *ReportersThreatNodeInfo) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *ReportersThreatNodeInfo) SetNodeType(v string) {
	o.NodeType = v
}

// GetNodes returns the Nodes field value
// If the value is explicit nil, the zero value for map[string]ReportersNodeInfo will be returned
func (o *ReportersThreatNodeInfo) GetNodes() map[string]ReportersNodeInfo {
	if o == nil {
		var ret map[string]ReportersNodeInfo
		return ret
	}

	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportersThreatNodeInfo) GetNodesOk() (*map[string]ReportersNodeInfo, bool) {
	if o == nil || isNil(o.Nodes) {
		return nil, false
	}
	return &o.Nodes, true
}

// SetNodes sets field value
func (o *ReportersThreatNodeInfo) SetNodes(v map[string]ReportersNodeInfo) {
	o.Nodes = v
}

// GetSecretsCount returns the SecretsCount field value
func (o *ReportersThreatNodeInfo) GetSecretsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SecretsCount
}

// GetSecretsCountOk returns a tuple with the SecretsCount field value
// and a boolean to check if the value has been set.
func (o *ReportersThreatNodeInfo) GetSecretsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretsCount, true
}

// SetSecretsCount sets field value
func (o *ReportersThreatNodeInfo) SetSecretsCount(v int32) {
	o.SecretsCount = v
}

// GetVulnerabilityCount returns the VulnerabilityCount field value
func (o *ReportersThreatNodeInfo) GetVulnerabilityCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VulnerabilityCount
}

// GetVulnerabilityCountOk returns a tuple with the VulnerabilityCount field value
// and a boolean to check if the value has been set.
func (o *ReportersThreatNodeInfo) GetVulnerabilityCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VulnerabilityCount, true
}

// SetVulnerabilityCount sets field value
func (o *ReportersThreatNodeInfo) SetVulnerabilityCount(v int32) {
	o.VulnerabilityCount = v
}

func (o ReportersThreatNodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportersThreatNodeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AttackPath != nil {
		toSerialize["attack_path"] = o.AttackPath
	}
	toSerialize["compliance_count"] = o.ComplianceCount
	toSerialize["count"] = o.Count
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["node_type"] = o.NodeType
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	toSerialize["secrets_count"] = o.SecretsCount
	toSerialize["vulnerability_count"] = o.VulnerabilityCount
	return toSerialize, nil
}

type NullableReportersThreatNodeInfo struct {
	value *ReportersThreatNodeInfo
	isSet bool
}

func (v NullableReportersThreatNodeInfo) Get() *ReportersThreatNodeInfo {
	return v.value
}

func (v *NullableReportersThreatNodeInfo) Set(val *ReportersThreatNodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReportersThreatNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReportersThreatNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportersThreatNodeInfo(val *ReportersThreatNodeInfo) *NullableReportersThreatNodeInfo {
	return &NullableReportersThreatNodeInfo{value: val, isSet: true}
}

func (v NullableReportersThreatNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportersThreatNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


