/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the ModelRawReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelRawReport{}

// ModelRawReport struct for ModelRawReport
type ModelRawReport struct {
	Payload string `json:"payload"`
}

// NewModelRawReport instantiates a new ModelRawReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelRawReport(payload string) *ModelRawReport {
	this := ModelRawReport{}
	this.Payload = payload
	return &this
}

// NewModelRawReportWithDefaults instantiates a new ModelRawReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelRawReportWithDefaults() *ModelRawReport {
	this := ModelRawReport{}
	return &this
}

// GetPayload returns the Payload field value
func (o *ModelRawReport) GetPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *ModelRawReport) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *ModelRawReport) SetPayload(v string) {
	o.Payload = v
}

func (o ModelRawReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelRawReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payload"] = o.Payload
	return toSerialize, nil
}

type NullableModelRawReport struct {
	value *ModelRawReport
	isSet bool
}

func (v NullableModelRawReport) Get() *ModelRawReport {
	return v.value
}

func (v *NullableModelRawReport) Set(val *ModelRawReport) {
	v.value = val
	v.isSet = true
}

func (v NullableModelRawReport) IsSet() bool {
	return v.isSet
}

func (v *NullableModelRawReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelRawReport(val *ModelRawReport) *NullableModelRawReport {
	return &NullableModelRawReport{value: val, isSet: true}
}

func (v NullableModelRawReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelRawReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


