/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the IngestersSecretSeverity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestersSecretSeverity{}

// IngestersSecretSeverity struct for IngestersSecretSeverity
type IngestersSecretSeverity struct {
	Level *string `json:"level,omitempty"`
	Score *float32 `json:"score,omitempty"`
}

// NewIngestersSecretSeverity instantiates a new IngestersSecretSeverity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestersSecretSeverity() *IngestersSecretSeverity {
	this := IngestersSecretSeverity{}
	return &this
}

// NewIngestersSecretSeverityWithDefaults instantiates a new IngestersSecretSeverity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestersSecretSeverityWithDefaults() *IngestersSecretSeverity {
	this := IngestersSecretSeverity{}
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *IngestersSecretSeverity) GetLevel() string {
	if o == nil || isNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersSecretSeverity) GetLevelOk() (*string, bool) {
	if o == nil || isNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *IngestersSecretSeverity) HasLevel() bool {
	if o != nil && !isNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *IngestersSecretSeverity) SetLevel(v string) {
	o.Level = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *IngestersSecretSeverity) GetScore() float32 {
	if o == nil || isNil(o.Score) {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersSecretSeverity) GetScoreOk() (*float32, bool) {
	if o == nil || isNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *IngestersSecretSeverity) HasScore() bool {
	if o != nil && !isNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *IngestersSecretSeverity) SetScore(v float32) {
	o.Score = &v
}

func (o IngestersSecretSeverity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestersSecretSeverity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !isNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	return toSerialize, nil
}

type NullableIngestersSecretSeverity struct {
	value *IngestersSecretSeverity
	isSet bool
}

func (v NullableIngestersSecretSeverity) Get() *IngestersSecretSeverity {
	return v.value
}

func (v *NullableIngestersSecretSeverity) Set(val *IngestersSecretSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestersSecretSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestersSecretSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestersSecretSeverity(val *IngestersSecretSeverity) *NullableIngestersSecretSeverity {
	return &NullableIngestersSecretSeverity{value: val, isSet: true}
}

func (v NullableIngestersSecretSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestersSecretSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


