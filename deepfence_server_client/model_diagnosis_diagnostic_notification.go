/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the DiagnosisDiagnosticNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiagnosisDiagnosticNotification{}

// DiagnosisDiagnosticNotification struct for DiagnosisDiagnosticNotification
type DiagnosisDiagnosticNotification struct {
	Content *string `json:"content,omitempty"`
	ExpiryInSecs interface{} `json:"expiry_in_secs,omitempty"`
	FollowUrl interface{} `json:"follow_url,omitempty"`
	SourceApplicationId *string `json:"source_application_id,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewDiagnosisDiagnosticNotification instantiates a new DiagnosisDiagnosticNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiagnosisDiagnosticNotification() *DiagnosisDiagnosticNotification {
	this := DiagnosisDiagnosticNotification{}
	return &this
}

// NewDiagnosisDiagnosticNotificationWithDefaults instantiates a new DiagnosisDiagnosticNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiagnosisDiagnosticNotificationWithDefaults() *DiagnosisDiagnosticNotification {
	this := DiagnosisDiagnosticNotification{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *DiagnosisDiagnosticNotification) GetContent() string {
	if o == nil || isNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosisDiagnosticNotification) GetContentOk() (*string, bool) {
	if o == nil || isNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *DiagnosisDiagnosticNotification) HasContent() bool {
	if o != nil && !isNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *DiagnosisDiagnosticNotification) SetContent(v string) {
	o.Content = &v
}

// GetExpiryInSecs returns the ExpiryInSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiagnosisDiagnosticNotification) GetExpiryInSecs() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ExpiryInSecs
}

// GetExpiryInSecsOk returns a tuple with the ExpiryInSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiagnosisDiagnosticNotification) GetExpiryInSecsOk() (*interface{}, bool) {
	if o == nil || isNil(o.ExpiryInSecs) {
		return nil, false
	}
	return &o.ExpiryInSecs, true
}

// HasExpiryInSecs returns a boolean if a field has been set.
func (o *DiagnosisDiagnosticNotification) HasExpiryInSecs() bool {
	if o != nil && isNil(o.ExpiryInSecs) {
		return true
	}

	return false
}

// SetExpiryInSecs gets a reference to the given interface{} and assigns it to the ExpiryInSecs field.
func (o *DiagnosisDiagnosticNotification) SetExpiryInSecs(v interface{}) {
	o.ExpiryInSecs = v
}

// GetFollowUrl returns the FollowUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiagnosisDiagnosticNotification) GetFollowUrl() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FollowUrl
}

// GetFollowUrlOk returns a tuple with the FollowUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiagnosisDiagnosticNotification) GetFollowUrlOk() (*interface{}, bool) {
	if o == nil || isNil(o.FollowUrl) {
		return nil, false
	}
	return &o.FollowUrl, true
}

// HasFollowUrl returns a boolean if a field has been set.
func (o *DiagnosisDiagnosticNotification) HasFollowUrl() bool {
	if o != nil && isNil(o.FollowUrl) {
		return true
	}

	return false
}

// SetFollowUrl gets a reference to the given interface{} and assigns it to the FollowUrl field.
func (o *DiagnosisDiagnosticNotification) SetFollowUrl(v interface{}) {
	o.FollowUrl = v
}

// GetSourceApplicationId returns the SourceApplicationId field value if set, zero value otherwise.
func (o *DiagnosisDiagnosticNotification) GetSourceApplicationId() string {
	if o == nil || isNil(o.SourceApplicationId) {
		var ret string
		return ret
	}
	return *o.SourceApplicationId
}

// GetSourceApplicationIdOk returns a tuple with the SourceApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosisDiagnosticNotification) GetSourceApplicationIdOk() (*string, bool) {
	if o == nil || isNil(o.SourceApplicationId) {
		return nil, false
	}
	return o.SourceApplicationId, true
}

// HasSourceApplicationId returns a boolean if a field has been set.
func (o *DiagnosisDiagnosticNotification) HasSourceApplicationId() bool {
	if o != nil && !isNil(o.SourceApplicationId) {
		return true
	}

	return false
}

// SetSourceApplicationId gets a reference to the given string and assigns it to the SourceApplicationId field.
func (o *DiagnosisDiagnosticNotification) SetSourceApplicationId(v string) {
	o.SourceApplicationId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DiagnosisDiagnosticNotification) GetUpdatedAt() string {
	if o == nil || isNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosisDiagnosticNotification) GetUpdatedAtOk() (*string, bool) {
	if o == nil || isNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DiagnosisDiagnosticNotification) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *DiagnosisDiagnosticNotification) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o DiagnosisDiagnosticNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiagnosisDiagnosticNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if o.ExpiryInSecs != nil {
		toSerialize["expiry_in_secs"] = o.ExpiryInSecs
	}
	if o.FollowUrl != nil {
		toSerialize["follow_url"] = o.FollowUrl
	}
	if !isNil(o.SourceApplicationId) {
		toSerialize["source_application_id"] = o.SourceApplicationId
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableDiagnosisDiagnosticNotification struct {
	value *DiagnosisDiagnosticNotification
	isSet bool
}

func (v NullableDiagnosisDiagnosticNotification) Get() *DiagnosisDiagnosticNotification {
	return v.value
}

func (v *NullableDiagnosisDiagnosticNotification) Set(val *DiagnosisDiagnosticNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnosisDiagnosticNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnosisDiagnosticNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnosisDiagnosticNotification(val *DiagnosisDiagnosticNotification) *NullableDiagnosisDiagnosticNotification {
	return &NullableDiagnosisDiagnosticNotification{value: val, isSet: true}
}

func (v NullableDiagnosisDiagnosticNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnosisDiagnosticNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


