/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the ModelScanListReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelScanListReq{}

// ModelScanListReq struct for ModelScanListReq
type ModelScanListReq struct {
	NodeId string `json:"node_id"`
	Window ModelFetchWindow `json:"window"`
}

// NewModelScanListReq instantiates a new ModelScanListReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelScanListReq(nodeId string, window ModelFetchWindow) *ModelScanListReq {
	this := ModelScanListReq{}
	this.NodeId = nodeId
	this.Window = window
	return &this
}

// NewModelScanListReqWithDefaults instantiates a new ModelScanListReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelScanListReqWithDefaults() *ModelScanListReq {
	this := ModelScanListReq{}
	return &this
}

// GetNodeId returns the NodeId field value
func (o *ModelScanListReq) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *ModelScanListReq) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *ModelScanListReq) SetNodeId(v string) {
	o.NodeId = v
}

// GetWindow returns the Window field value
func (o *ModelScanListReq) GetWindow() ModelFetchWindow {
	if o == nil {
		var ret ModelFetchWindow
		return ret
	}

	return o.Window
}

// GetWindowOk returns a tuple with the Window field value
// and a boolean to check if the value has been set.
func (o *ModelScanListReq) GetWindowOk() (*ModelFetchWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Window, true
}

// SetWindow sets field value
func (o *ModelScanListReq) SetWindow(v ModelFetchWindow) {
	o.Window = v
}

func (o ModelScanListReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelScanListReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node_id"] = o.NodeId
	toSerialize["window"] = o.Window
	return toSerialize, nil
}

type NullableModelScanListReq struct {
	value *ModelScanListReq
	isSet bool
}

func (v NullableModelScanListReq) Get() *ModelScanListReq {
	return v.value
}

func (v *NullableModelScanListReq) Set(val *ModelScanListReq) {
	v.value = val
	v.isSet = true
}

func (v NullableModelScanListReq) IsSet() bool {
	return v.isSet
}

func (v *NullableModelScanListReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelScanListReq(val *ModelScanListReq) *NullableModelScanListReq {
	return &NullableModelScanListReq{value: val, isSet: true}
}

func (v NullableModelScanListReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelScanListReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


