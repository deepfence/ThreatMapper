/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the ReportersRenderedGraph type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportersRenderedGraph{}

// ReportersRenderedGraph struct for ReportersRenderedGraph
type ReportersRenderedGraph struct {
	Connections []ReportersConnectionSummary `json:"connections"`
	Containers map[string][]string `json:"containers"`
	Hosts map[string]map[string][]string `json:"hosts"`
	Pods map[string][]string `json:"pods"`
	Processes map[string][]string `json:"processes"`
	Providers []string `json:"providers"`
	Regions map[string][]string `json:"regions"`
}

// NewReportersRenderedGraph instantiates a new ReportersRenderedGraph object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportersRenderedGraph(connections []ReportersConnectionSummary, containers map[string][]string, hosts map[string]map[string][]string, pods map[string][]string, processes map[string][]string, providers []string, regions map[string][]string) *ReportersRenderedGraph {
	this := ReportersRenderedGraph{}
	this.Connections = connections
	this.Containers = containers
	this.Hosts = hosts
	this.Pods = pods
	this.Processes = processes
	this.Providers = providers
	this.Regions = regions
	return &this
}

// NewReportersRenderedGraphWithDefaults instantiates a new ReportersRenderedGraph object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportersRenderedGraphWithDefaults() *ReportersRenderedGraph {
	this := ReportersRenderedGraph{}
	return &this
}

// GetConnections returns the Connections field value
// If the value is explicit nil, the zero value for []ReportersConnectionSummary will be returned
func (o *ReportersRenderedGraph) GetConnections() []ReportersConnectionSummary {
	if o == nil {
		var ret []ReportersConnectionSummary
		return ret
	}

	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportersRenderedGraph) GetConnectionsOk() ([]ReportersConnectionSummary, bool) {
	if o == nil || isNil(o.Connections) {
		return nil, false
	}
	return o.Connections, true
}

// SetConnections sets field value
func (o *ReportersRenderedGraph) SetConnections(v []ReportersConnectionSummary) {
	o.Connections = v
}

// GetContainers returns the Containers field value
// If the value is explicit nil, the zero value for map[string][]string will be returned
func (o *ReportersRenderedGraph) GetContainers() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportersRenderedGraph) GetContainersOk() (*map[string][]string, bool) {
	if o == nil || isNil(o.Containers) {
		return nil, false
	}
	return &o.Containers, true
}

// SetContainers sets field value
func (o *ReportersRenderedGraph) SetContainers(v map[string][]string) {
	o.Containers = v
}

// GetHosts returns the Hosts field value
// If the value is explicit nil, the zero value for map[string]map[string][]string will be returned
func (o *ReportersRenderedGraph) GetHosts() map[string]map[string][]string {
	if o == nil {
		var ret map[string]map[string][]string
		return ret
	}

	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportersRenderedGraph) GetHostsOk() (*map[string]map[string][]string, bool) {
	if o == nil || isNil(o.Hosts) {
		return nil, false
	}
	return &o.Hosts, true
}

// SetHosts sets field value
func (o *ReportersRenderedGraph) SetHosts(v map[string]map[string][]string) {
	o.Hosts = v
}

// GetPods returns the Pods field value
// If the value is explicit nil, the zero value for map[string][]string will be returned
func (o *ReportersRenderedGraph) GetPods() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Pods
}

// GetPodsOk returns a tuple with the Pods field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportersRenderedGraph) GetPodsOk() (*map[string][]string, bool) {
	if o == nil || isNil(o.Pods) {
		return nil, false
	}
	return &o.Pods, true
}

// SetPods sets field value
func (o *ReportersRenderedGraph) SetPods(v map[string][]string) {
	o.Pods = v
}

// GetProcesses returns the Processes field value
// If the value is explicit nil, the zero value for map[string][]string will be returned
func (o *ReportersRenderedGraph) GetProcesses() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Processes
}

// GetProcessesOk returns a tuple with the Processes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportersRenderedGraph) GetProcessesOk() (*map[string][]string, bool) {
	if o == nil || isNil(o.Processes) {
		return nil, false
	}
	return &o.Processes, true
}

// SetProcesses sets field value
func (o *ReportersRenderedGraph) SetProcesses(v map[string][]string) {
	o.Processes = v
}

// GetProviders returns the Providers field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ReportersRenderedGraph) GetProviders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportersRenderedGraph) GetProvidersOk() ([]string, bool) {
	if o == nil || isNil(o.Providers) {
		return nil, false
	}
	return o.Providers, true
}

// SetProviders sets field value
func (o *ReportersRenderedGraph) SetProviders(v []string) {
	o.Providers = v
}

// GetRegions returns the Regions field value
// If the value is explicit nil, the zero value for map[string][]string will be returned
func (o *ReportersRenderedGraph) GetRegions() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportersRenderedGraph) GetRegionsOk() (*map[string][]string, bool) {
	if o == nil || isNil(o.Regions) {
		return nil, false
	}
	return &o.Regions, true
}

// SetRegions sets field value
func (o *ReportersRenderedGraph) SetRegions(v map[string][]string) {
	o.Regions = v
}

func (o ReportersRenderedGraph) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportersRenderedGraph) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Connections != nil {
		toSerialize["connections"] = o.Connections
	}
	if o.Containers != nil {
		toSerialize["containers"] = o.Containers
	}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	if o.Pods != nil {
		toSerialize["pods"] = o.Pods
	}
	if o.Processes != nil {
		toSerialize["processes"] = o.Processes
	}
	if o.Providers != nil {
		toSerialize["providers"] = o.Providers
	}
	if o.Regions != nil {
		toSerialize["regions"] = o.Regions
	}
	return toSerialize, nil
}

type NullableReportersRenderedGraph struct {
	value *ReportersRenderedGraph
	isSet bool
}

func (v NullableReportersRenderedGraph) Get() *ReportersRenderedGraph {
	return v.value
}

func (v *NullableReportersRenderedGraph) Set(val *ReportersRenderedGraph) {
	v.value = val
	v.isSet = true
}

func (v NullableReportersRenderedGraph) IsSet() bool {
	return v.isSet
}

func (v *NullableReportersRenderedGraph) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportersRenderedGraph(val *ReportersRenderedGraph) *NullableReportersRenderedGraph {
	return &NullableReportersRenderedGraph{value: val, isSet: true}
}

func (v NullableReportersRenderedGraph) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportersRenderedGraph) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


