from config.app import celery_app
from resource_models.node import Node
from utils.constants import REGISTRY_TYPE_DOCKER_PVT, REGISTRY_TYPE_ECR, REGISTRY_TYPE_HARBOR, NODE_TYPE_HOST, \
    SCOPE_HOST_API_CONTROL_URL, CVE_SCAN_LOGS_INDEX, CVE_SCAN_RUNNING_STATUS, REGISTRY_TYPE_AZURE, \
    CVE_SCAN_STATUS_ERROR, CVE_SCAN_STATUS_QUEUED, REGISTRY_TYPE_DOCKER_HUB, \
    REGISTRY_TYPE_QUAY, REGISTRY_TYPE_GITLAB, REGISTRY_TYPE_GCLOUD, REGISTRY_TYPE_JFROG, NODE_TYPE_CONTAINER_IMAGE, \
    PACKAGE_SCANNER_REGISTRY_API_URL, CVE_SCAN_LOGS_ES_TYPE
from utils.helper import call_scope_control_api
from utils.esconn import ESConn
import json
from datetime import datetime
import time
import requests


@celery_app.task(bind=True, default_retry_delay=60)
def vulnerability_scan(self, **kwargs):
    scan_details = kwargs.get("scan_details", {})
    scan_type = ",".join(scan_details.get("scan_types", []))
    # image_name_with_tag | host_name
    cve_node_id = scan_details["cve_node_id"]
    registry_type = scan_details.get("registry_type", None)
    credential_id = scan_details.get("credential_id", "")
    scan_id = scan_details["scan_id"]
    mask_cve_ids = scan_details.get("mask_cve_ids", "")
    hostname = ""
    node_type = NODE_TYPE_CONTAINER_IMAGE

    def add_scan_log(scan_message, scan_action, host_name, scan_node_type):
        scan_message = scan_message.replace("\n", " ")
        body = {
            "masked": "false", "type": CVE_SCAN_LOGS_ES_TYPE, "scan_id": scan_id, "node_id": cve_node_id,
            "cve_scan_message": scan_message, "@timestamp": datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
            "host": host_name, "action": scan_action, "host_name": host_name, "time_stamp": int(time.time() * 1000.0),
            "node_type": scan_node_type,
        }
        ESConn.create_doc(CVE_SCAN_LOGS_INDEX, body, refresh="wait_for")

    # If it is a image scan from registry
    if registry_type in [REGISTRY_TYPE_ECR, REGISTRY_TYPE_HARBOR, REGISTRY_TYPE_DOCKER_PVT, REGISTRY_TYPE_AZURE,
                         REGISTRY_TYPE_DOCKER_HUB, REGISTRY_TYPE_QUAY, REGISTRY_TYPE_GITLAB, REGISTRY_TYPE_GCLOUD,
                         REGISTRY_TYPE_JFROG]:
        registry_scan_json = {
            "scan_type": scan_type, "node_type": NODE_TYPE_CONTAINER_IMAGE, "scan_id": scan_id, "node_id": cve_node_id,
            "image_name": cve_node_id, "registry_id": str(credential_id), "source": "registry:"+cve_node_id}
        try:
            response = requests.post(PACKAGE_SCANNER_REGISTRY_API_URL, json=registry_scan_json)
            if response.status_code == 200:
                add_scan_log("Vulnerability SBOM scan started", CVE_SCAN_STATUS_QUEUED, hostname, node_type)
            else:
                add_scan_log(str(response.text), CVE_SCAN_STATUS_ERROR, hostname, node_type)
        except Exception as ex:
            add_scan_log(str(ex), CVE_SCAN_STATUS_ERROR, hostname, node_type)

    # if it is a host/container scan
    else:
        node_id = scan_details["node_id"]
        node = Node(node_id)
        hostname = node.host_name
        kubernetes_cluster_name = node.kubernetes_cluster_name
        image_or_host = "host"
        if node.type == NODE_TYPE_HOST:
            node_type = NODE_TYPE_HOST
        else:
            image_or_host = cve_node_id

        cve_status = node.get_cve_status().get("action", None)
        if cve_status in CVE_SCAN_RUNNING_STATUS:
            if node.type == NODE_TYPE_HOST:
                add_scan_log("Scan already running for this host",
                             CVE_SCAN_STATUS_ERROR, hostname, node_type)
            else:
                add_scan_log("Scan already running for this image",
                             CVE_SCAN_STATUS_ERROR, hostname, node_type)
            return
        upload_trigger_url = SCOPE_HOST_API_CONTROL_URL.format(probe_id=node.probe_id, host_name=hostname,
                                                               action="generate_sbom")
        # Trigger the host to upload image to console vm
        json_data = {"image_name": image_or_host, "scan_type": scan_type, "scan_id": scan_id,
                     "image_id": node.image_id, "kubernetes_cluster_name": kubernetes_cluster_name,
                     "container_name": node.container_name}
        resp_status, resp, status_code = call_scope_control_api(upload_trigger_url, hostname,
                                                                data=json.dumps(json_data))
        if not resp_status:
            add_scan_log(str(resp), CVE_SCAN_STATUS_ERROR, hostname, node_type)
            return
        add_scan_log("Vulnerability SBOM upload started",
                     CVE_SCAN_STATUS_QUEUED, hostname, node_type)
