version: "3.7"

x-service-variables: &common-creds
    DEEPFENCE_NEO4J_USER: neo4j
    DEEPFENCE_NEO4J_PASSWORD: e16908ffa5b9f8e9d4ed
    NEO4J_AUTH: neo4j/e16908ffa5b9f8e9d4ed
    DEEPFENCE_POSTGRES_USER_DB_USER: deepfence
    DEEPFENCE_POSTGRES_USER_DB_PASSWORD: deepfence
    DEEPFENCE_KAFKA_BROKERS: deepfence-kafka-broker:9092
    DEEPFENCE_MINIO_BUCKET: deepfence
    DEEPFENCE_MINIO_HOST: deepfence-file-server
    DEEPFENCE_MINIO_PASSWORD: deepfence
    DEEPFENCE_MINIO_PORT: 9000
    DEEPFENCE_MINIO_SECURE: "false"
    DEEPFENCE_MINIO_USER: deepfence
    DEEPFENCE_NEO4J_BOLT_PORT: 7687
    DEEPFENCE_NEO4J_HOST: deepfence-neo4j
    DEEPFENCE_POSTGRES_USER_DB_HOST: deepfence-postgres
    DEEPFENCE_POSTGRES_USER_DB_NAME: users
    DEEPFENCE_POSTGRES_USER_DB_PORT: 5432
    DEEPFENCE_POSTGRES_USER_DB_SSLMODE: disable
    DEEPFENCE_REDIS_DB_NUMBER: 0
    DEEPFENCE_REDIS_HOST: deepfence-redis
    DEEPFENCE_REDIS_PORT: 6379
    DEEPFENCE_SAAS_DEPLOYMENT: "false"
    DEEPFENCE_DEBUG: "false"

services:

  deepfence-postgres:
    container_name: deepfence-postgres
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_postgres_ce:${DF_IMG_TAG:-2.0.0}
    ulimits:
      core: 0
    restart: on-failure
    networks:
      - deepfence_net
    volumes:
      - deepfence_data:/data:rw
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-redis:
    container_name: deepfence-redis
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_redis_ce:${DF_IMG_TAG:-2.0.0}
    environment:
      INITIALIZE_REDIS: "Y"
    ulimits:
      core: 0
    restart: on-failure
    networks:
      - deepfence_net
      #depends_on:
      #  - deepfence-init-container
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-neo4j:
    container_name: deepfence-neo4j
    image: neo4j:4.4.12
    ulimits:
      core: 0
    restart: on-failure
    tmpfs:
      - /tmp
    networks:
      - deepfence_net
    environment:
      <<: *common-creds
      NEO4J_dbms_memory_pagecache_size: 2600m
      NEO4J_dbms_memory_heap_initial__size: 4000m
      NEO4J_dbms_memory_heap_max__size: 4000m
      NEO4JLABS_PLUGINS: '["apoc"]'
    ports:
      - "0.0.0.0:7474:7474"
      - "0.0.0.0:7687:7687"
    volumes:
      - deepfence_neo4j_data:/data:rw
      - deepfence_neo4j_logs:/logs:rw
      - deepfence_neo4j_plugins:/plugins:rw
    #depends_on:
    #  - deepfence-init-container
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-console-agent:
    container_name: deepfence-console-agent
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_agent_ce:${DF_IMG_TAG:-2.0.0}
    ulimits:
      core: 0
    deploy:
      resources:
        limits:
          cpus: ".2"
    restart: on-failure
    environment:
      - MGMT_CONSOLE_URL=127.0.0.1
      - MGMT_CONSOLE_PORT=443
      - DEEPFENCE_KEY=""
    network_mode: "host"
    volumes:
      - /sys/kernel/debug:/sys/kernel/debug:rw
      - /var/log/fenced
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/:/fenced/mnt/host/var/lib/docker/:rw
      - /:/fenced/mnt/host/:ro
    privileged: true
    depends_on:
      - deepfence-server
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-router:
    container_name: deepfence-router
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_router_ce:${DF_IMG_TAG:-2.0.0}
    ulimits:
      core: 0
    networks:
      - deepfence_net
    restart: always
    environment:
      FORCE_HTTPS_REDIRECT: "true"
      KAFKA_REST_PROXY: "deepfence-rest-proxy:8082"
    ports:
      - "80:80"
      - "${MGMT_CONSOLE_PORT:-443}:443"
    volumes:
      - /etc/deepfence/certs:/etc/deepfence/certs/:ro
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-file-server:
    container_name: deepfence-file-server
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_file_server_ce:${DF_IMG_TAG:-2.0.0}
    ulimits:
      core: 0
    networks:
      - deepfence_net
    restart: always
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9090:9090"
    volumes:
      - deepfence_file_server:/data:rw
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-server:
    container_name: deepfence-server
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_server_ce:${DF_IMG_TAG:-2.0.0}
    ulimits:
      core: 0
    tmpfs:
      - /tmp
    environment:
      <<: *common-creds
      ELASTICSEARCH_SCHEME: "http"
      DEEPFENCE_ACCESS_TOKEN_EXPIRY_MINUTES: 5
      DEEPFENCE_CONSOLE_ORCHESTRATOR: "docker"
    networks:
      - deepfence_net
    depends_on:
      - deepfence-redis
      - deepfence-postgres
      - deepfence-neo4j
    ports:
      - "8080:8080"
      - "127.0.0.1:8081:8081"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/docker/certs.d:/etc/docker/certs.d:ro
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-worker:
    container_name: deepfence-worker
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_worker_ce:${DF_IMG_TAG:-2.0.0}
    ulimits:
      core: 0
    restart: on-failure
    networks:
      - deepfence_net
    depends_on:
      - deepfence-redis
      - deepfence-postgres
    logging:
      driver: "json-file"
      options:
        max-size: "1g"
    environment:
      <<: *common-creds
    volumes:
      - /etc/docker/certs.d:/etc/docker/certs.d:ro
      - /var/run/docker.sock:/var/run/docker.sock

  deepfence-scheduler:
    container_name: deepfence-scheduler
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_worker_ce:${DF_IMG_TAG:-2.0.0}
    ulimits:
      core: 0
    restart: on-failure
    environment:
      <<: *common-creds
      DEEPFENCE_MODE: scheduler
    networks:
      - deepfence_net
    depends_on:
      - deepfence-redis
      - deepfence-postgres
      - deepfence-worker
      - deepfence-neo4j
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-ui:
    container_name: deepfence-ui
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_ui_ce:${DF_IMG_TAG:-2.0.0}
    ulimits:
      core: 0
    networks:
      - deepfence_net
    restart: on-failure
    depends_on:
      - deepfence-server
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-kafka-broker:
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_kafka_broker_ce:${DF_IMG_TAG:-2.0.0}
    hostname: deepfence-kafka-broker
    container_name: deepfence-kafka-broker
    # environment:
    #   - KAFKA_LOG_DIRS=/var/lib/kafka/data
    ports:
      - "127.0.0.1:9092:9092"
      - "127.0.0.1:9101:9101"
    volumes:
      - deepfence_kafka_broker:/var/lib/kafka/data:rw
    networks:
      - deepfence_net
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-ingester:
    image: ${IMAGE_REPOSITORY:-deepfenceio}/deepfence_worker_ce:${DF_IMG_TAG:-2.0.0}
    hostname: deepfence-ingester
    container_name: deepfence-ingester
    ports:
      - "127.0.0.1:8090:8090"
    environment:
      <<: *common-creds
      DEEPFENCE_MODE: ingester
    networks:
      - deepfence_net
    depends_on:
      - deepfence-kafka-broker
    logging:
      driver: "json-file"
      options:
        max-size: "1g"

  deepfence-telemetry:
    image: jaegertracing/all-in-one:1.42
    hostname: deepfence-telemetry
    container_name: deepfence-telemetry
    ports:
      - "127.0.0.1:14267:14267"
      - "127.0.0.1:14268:14268"
      - "127.0.0.1:9411:9411"
      - "127.0.0.1:14269:14269"
      - "0.0.0.0:16686:16686"
    networks:
      - deepfence_net

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_POLL_INTERVAL: 60



volumes:
  deepfence_data:
    driver: local
  deepfence_neo4j_data:
    driver: local
  deepfence_neo4j_logs:
    driver: local
  deepfence_neo4j_plugins:
    driver: local
  deepfence_kafka_broker:
    driver: local
  deepfence_file_server:
    driver: local

networks:
  deepfence_net:
    driver: bridge
