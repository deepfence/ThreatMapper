apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepfence-router
  namespace: {{ .Release.Namespace }}
  labels:
    app: deepfence-console
    name: deepfence-router
    {{- include "deepfence-console.labels" . | nindent 4 }}
spec:
  {{- if not .Values.router.autoscaling.enabled }}
  replicas: {{ .Values.router.replicaCount }}
  {{- end }}  
  selector:
    matchLabels:
      name: deepfence-router
      {{- include "deepfence-console.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: deepfence-console
        name: deepfence-router
        {{- include "deepfence-console.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecretName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      containers:
        {{- if .Values.saas_deployment }}
        - name: promtail-sidecar-deepfence-api
          image: grafana/promtail:2.5.0
          args:
          - '-config.expand-env'
          - '-config.file=/etc/promtail/config.yml'
          - '-client.external-labels=cluster={{ .Values.saas_env.clusterName }},env={{ .Values.saas_env.name }},clustertype=workloads,container=deepfence-api'
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          volumeMounts:
          - name: promtail-config
            mountPath: /etc/promtail
          - name: varlog
            mountPath: /var/log/haproxy
        {{- end }}
        - name: deepfence-router
          image: "{{ .Values.registry.imagePrefix }}{{ .Values.router.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.router.image.pullPolicy }}
          env:
            - name: POSTGRES_USER_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_host
            - name: POSTGRES_USER_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_port
            - name: POSTGRES_USER_DB_USER
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_user
            - name: POSTGRES_USER_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_password
            - name: POSTGRES_USER_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_users_db_name
            - name: POSTGRES_USER_DB_SSLMODE
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_ssl_mode
            - name: UI_SERVICE_NAME
              value: "{{ .Values.router.uiServiceName }}"
            - name: ENABLE_AUTH
              value: "true"
            - name: OPERATING_MODE
              value: "k8s"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          volumeMounts:
          {{- if .Values.saas_deployment }}
            - name: varlog
              mountPath: /var/log/haproxy
          {{- end }}
          {{- if .Values.tls.pemfile }}
            - name: deepfence-cert-volume
              mountPath: /usr/local/etc/haproxy/deepfence.pem
              subPath: deepfence.pem
          {{- end }}
          {{- if and .Values.tls.certFile .Values.tls.keyFile }}
            - name: deepfence-ui-ssl-cert-file
              mountPath: /etc/deepfence/certs/deepfence.crt
              subPath: deepfence.crt
              readOnly: true
            - name: deepfence-ui-ssl-key-file
              mountPath: /etc/deepfence/certs/deepfence.key
              subPath: deepfence.key
              readOnly: true
          {{- end }}
          resources:
            requests:
              memory: 100Mi
              cpu: {{ .Values.defaultResourceLimits.requests.cpu }}
{{- if .Values.setDefaultResourceLimits }}
            limits:
              cpu: {{ .Values.defaultResourceLimits.limits.cpu }}
              memory: {{ .Values.defaultResourceLimits.limits.memory }}
{{- end }}
      {{- with .Values.router.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- if .Values.router.setAntiAffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: name
                    operator: In
                    values:
                      - deepfence-router
              topologyKey: kubernetes.io/hostname
{{- end }}
      {{- with .Values.router.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.tls.pemfile }}
        - name: deepfence-cert-volume
          configMap:
            name: deepfence-cert
      {{- end }}
      {{- if and .Values.tls.certFile .Values.tls.keyFile }}
        - name: deepfence-ui-ssl-cert-file
          configMap:
            name: deepfence-ui-ssl-cert
        - name: deepfence-ui-ssl-key-file
          configMap:
            name: deepfence-ui-ssl-cert
      {{- end }}
      {{- if .Values.saas_deployment }}
        - name: varlog
          emptyDir: {}
        - name: promtail-config
          configMap:
            name: sidecar-promtail
      {{- end }}