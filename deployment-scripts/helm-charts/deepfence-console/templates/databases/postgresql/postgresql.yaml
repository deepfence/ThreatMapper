{{- if .Values.postgresql.create }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: deepfence-postgresql
  labels:
    {{- include "deepfence-console.labels" . | nindent 4 }}
    component: postgresql
    name: deepfence-postgresql
spec:
  serviceName: deepfence-postgresql
  replicas: 1
  selector:
    matchLabels:
      {{- include "deepfence-console.selectorLabels" . | nindent 6 }}
      component: postgresql
      name: deepfence-postgresql
  template:
    metadata:
      {{- with .Values.postgresql.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "deepfence-console.selectorLabels" . | nindent 8 }}
        component: postgresql
        name: deepfence-postgresql
    spec:
      serviceAccountName: {{ include "deepfence-console.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.postgresql.podSecurityContext | nindent 8 }}
      containers:
        - name: postgresql
          securityContext:
            {{- toYaml .Values.postgresql.securityContext | nindent 12 }}
          image: "{{ .Values.global.imageRepoPrefix }}/{{ .Values.postgresql.image.repository }}:{{ default .Values.global.imageTag .Values.postgresql.image.tag }}"
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
          envFrom:
            - secretRef:
                name: "deepfence-postgresql"
          ports:
            - name: tcp
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: tcp
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            tcpSocket:
              port: tcp
            initialDelaySeconds: 60
            periodSeconds: 30
          resources:
            {{- toYaml .Values.postgresql.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: "postgresql-{{ .Release.Name }}"
      {{- with .Values.postgresql.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.postgresql.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.postgresql.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: "postgresql-{{ .Release.Name }}"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "{{ .Values.postgresql.volumeSize }}"
        storageClassName: {{ default .Values.global.storageClass .Values.postgresql.storageClass }}
---
apiVersion: v1
kind: Service
metadata:
  name: deepfence-postgresql
  labels:
    {{- include "deepfence-console.labels" . | nindent 4 }}
    component: postgresql
    name: deepfence-postgresql
spec:
  type: ClusterIP
  ports:
    - name: tcp
      port: 5432
      targetPort: tcp
      protocol: TCP
  selector:
    {{- include "deepfence-console.selectorLabels" . | nindent 4 }}
    component: postgresql
    name: deepfence-postgresql
{{- end }}