{{- if eq "true" .Values.db.createDbSecret }}
# Source: postgresql-ha/templates/postgresql/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: deepfence-postgres-postgresql
  labels:
    app.kubernetes.io/name: postgresql-ha
    helm.sh/chart: postgresql-ha-7.12.0
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: postgresql
  namespace: {{ .Values.namespace }}
type: Opaque
data:
  postgresql-username: "{{ .Values.db.postgresUserDb.user | b64enc }}"
  postgresql-password: "{{ .Values.db.postgresUserDb.password | b64enc }}"
  postgresql-db-name: "{{ .Values.db.postgresUserDb.dbname | b64enc }}"
  postgresql-postgres-password: "TVA1ZkZiYllxUw=="
  repmgr-password: "{{ .Values.db.postgresUserDb.password | b64enc }}"
{{- end }}
---
{{- if eq "deepfence-postgres" .Values.db.postgresUserDb.host }}
---
{{- if eq "true" .Values.db.createDbSecret }}
# Source: postgresql-ha/templates/pgpool/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: deepfence-postgres-pgpool
  labels:
    app.kubernetes.io/name: postgresql-ha
    helm.sh/chart: postgresql-ha-7.12.0
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: pgpool
  namespace: {{ .Values.namespace }}
type: Opaque
data:
  admin-password: "ZnJjc1BzVjlGUw=="
{{- end }}
---
# Source: postgresql-ha/templates/postgresql/hooks-scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: deepfence-postgres-postgresql-hooks-scripts
  labels:
    app.kubernetes.io/name: postgresql-ha
    helm.sh/chart: postgresql-ha-7.12.0
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: postgresql
  namespace: {{ .Values.namespace }}
data:
  pre-stop.sh: |-
    #!/bin/bash
    set -o errexit
    set -o pipefail
    set -o nounset

    # Debug section
    exec 3>&1
    exec 4>&2

    # Load Libraries
    . /opt/bitnami/scripts/liblog.sh
    . /opt/bitnami/scripts/libpostgresql.sh
    . /opt/bitnami/scripts/librepmgr.sh

    # Auxiliary functions
    is_new_primary_ready() {
        return_value=1
        currenty_primary_node="$(repmgr_get_primary_node)"
        currenty_primary_host="$(echo $currenty_primary_node | awk '{print $1}')"

        info "$currenty_primary_host != $REPMGR_NODE_NETWORK_NAME"
        if [[ $(echo $currenty_primary_node | wc -w) -eq 2 ]] && [[ "$currenty_primary_host" != "$REPMGR_NODE_NETWORK_NAME" ]]; then
            info "New primary detected, leaving the cluster..."
            return_value=0
        else
            info "Waiting for a new primary to be available..."
        fi
        return $return_value
    }

    export MODULE="pre-stop-hook"

    if [[ "${BITNAMI_DEBUG}" == "true" ]]; then
        info "Bash debug is on"
    else
        info "Bash debug is off"
        exec 1>/dev/null
        exec 2>/dev/null
    fi

    # Load PostgreSQL & repmgr environment variables
    . /opt/bitnami/scripts/postgresql-env.sh

    postgresql_enable_nss_wrapper

    # Prepare env vars for managing roles
    primary_node="$(repmgr_get_primary_node)"
    primary_host="$(echo $primary_node | awk '{print $1}')"

    # Stop postgresql for graceful exit.
    postgresql_stop

    if [[ "$primary_host" == "$REPMGR_NODE_NETWORK_NAME" ]]; then
        info "Primary node need to wait for a new primary node before leaving the cluster"
        retry_while is_new_primary_ready 10 5
    else
        info "Standby node doesn't need to wait, leaving the cluster."
    fi
---
# Source: postgresql-ha/templates/pgpool/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepfence-postgres-pgpool
  labels:
    app: deepfence-console
    app.kubernetes.io/name: postgresql-ha
    helm.sh/chart: postgresql-ha-7.12.0
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: pgpool
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: postgresql
      port: 5432
      targetPort: postgresql
      protocol: TCP
  selector:
    app.kubernetes.io/name: postgresql-ha
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/component: pgpool
---
# Source: postgresql-ha/templates/postgresql/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepfence-postgres-postgresql-headless
  labels:
    app: deepfence-console
    app.kubernetes.io/name: postgresql-ha
    helm.sh/chart: postgresql-ha-7.12.0
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/managed-by: Helm
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: postgresql
      port: 5432
      targetPort: postgresql
      protocol: TCP
  selector:
    app.kubernetes.io/name: postgresql-ha
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/component: postgresql
---
# Source: postgresql-ha/templates/postgresql/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepfence-postgres
  labels:
    app: deepfence-console
    app.kubernetes.io/name: postgresql-ha
    helm.sh/chart: postgresql-ha-7.12.0
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: postgresql
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - name: postgresql
      port: 5432
      targetPort: postgresql
      protocol: TCP
  selector:
    app.kubernetes.io/name: postgresql-ha
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/component: postgresql
    statefulset.kubernetes.io/pod-name: deepfence-postgres-postgresql-0
---
# Source: postgresql-ha/templates/pgpool/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepfence-postgres-pgpool
  labels:
    app: deepfence-console
    app.kubernetes.io/name: postgresql-ha
    helm.sh/chart: postgresql-ha-7.12.0
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: pgpool
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql-ha
      app.kubernetes.io/instance: deepfence-postgres
      app.kubernetes.io/component: pgpool
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql-ha
        helm.sh/chart: postgresql-ha-7.12.0
        app.kubernetes.io/instance: deepfence-postgres
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: pgpool
    spec:
{{- if .Values.topologyNodeAffinityHostName }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: NotIn
                    values:
                      - "{{ .Values.topologyNodeAffinityHostName }}"
{{- end }}
      securityContext:
        fsGroup: 1001
      # Auxiliary vars to populate environment variables
      containers:
        - name: pgpool
          image: docker.io/deepfenceio/pgpool:4.2.5-debian-10-r37
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: PGPOOL_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PGPOOL_BACKEND_NODES
              value: "0:deepfence-postgres-postgresql-0.deepfence-postgres-postgresql-headless.{{ .Values.namespace }}.svc.cluster.local:5432,1:deepfence-postgres-postgresql-1.deepfence-postgres-postgresql-headless.{{ .Values.namespace }}.svc.cluster.local:5432"
            - name: PGPOOL_SR_CHECK_USER
              value: "repmgr"
            - name: PGPOOL_SR_CHECK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-postgresql
                  key: repmgr-password
            - name: PGPOOL_SR_CHECK_DATABASE
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-postgresql
                  key: postgresql-db-name
            - name: PGPOOL_ENABLE_LDAP
              value: "no"
            - name: PGPOOL_POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-postgresql
                  key: postgresql-username
            - name: PGPOOL_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-postgresql
                  key: postgresql-password
            - name: PGPOOL_POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-postgresql
                  key: postgresql-db-name
            - name: PGPOOL_ADMIN_USERNAME
              value: "admin"
            - name: PGPOOL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-pgpool
                  key: admin-password
            - name: PGPOOL_ENABLE_LOAD_BALANCING
              value: "yes"
            - name: PGPOOL_DISABLE_LOAD_BALANCE_ON_WRITE
              value: transaction
            - name: PGPOOL_ENABLE_LOG_CONNECTIONS
              value: "no"
            - name: PGPOOL_ENABLE_LOG_HOSTNAME
              value: "yes"
            - name: PGPOOL_ENABLE_LOG_PER_NODE_STATEMENT
              value: "no"
            - name: PGPOOL_CHILD_LIFE_TIME
              value: ""
            - name: PGPOOL_ENABLE_TLS
              value: "no"
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/pgpool/healthcheck.sh
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - PGPASSWORD="${PGPOOL_POSTGRES_PASSWORD}" psql -U "${PGPOOL_POSTGRES_USERNAME}" -d "${PGPOOL_POSTGRES_DB}" -h /opt/bitnami/pgpool/tmp -tA -c "SELECT 1" >/dev/null
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          resources:
            requests:
              cpu: {{ .Values.defaultResourceLimits.requests.cpu }}
              memory: {{ .Values.defaultResourceLimits.requests.memory }}
{{- if eq "true" .Values.setDefaultResourceLimits }}
            limits:
              cpu: {{ .Values.defaultResourceLimits.limits.cpu }}
              memory: {{ .Values.defaultResourceLimits.limits.memory }}
{{- end }}
---
# Source: postgresql-ha/templates/postgresql/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: deepfence-postgres-postgresql
  labels:
    app: deepfence-console
    app.kubernetes.io/name: postgresql-ha
    helm.sh/chart: postgresql-ha-7.12.0
    app.kubernetes.io/instance: deepfence-postgres
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: postgresql
  namespace: {{ .Values.namespace }}
spec:
  serviceName: deepfence-postgres-postgresql-headless
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql-ha
      app.kubernetes.io/instance: deepfence-postgres
      app.kubernetes.io/component: postgresql
  template:
    metadata:
      labels:
        app: deepfence-console
        app.kubernetes.io/name: postgresql-ha
        helm.sh/chart: postgresql-ha-7.12.0
        app.kubernetes.io/instance: deepfence-postgres
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: postgresql
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/instance
                      operator: In
                      values:
                        - deepfence-postgres
                topologyKey: kubernetes.io/hostname
              weight: 1
{{- if .Values.topologyNodeAffinityHostName }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: NotIn
                    values:
                      - "{{ .Values.topologyNodeAffinityHostName }}"
{{- end }}
      securityContext:
        fsGroup: 1001
      containers:
        - name: postgresql
          lifecycle:
            preStop:
              exec:
                command:
                  - /pre-stop.sh
          image: docker.io/deepfenceio/postgresql-repmgr:12.8.0-debian-10-r71
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          # Auxiliary vars to populate environment variables
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            # PostgreSQL configuration
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-postgresql
                  key: postgresql-username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-postgresql
                  key: postgresql-password
            - name: POSTGRES_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-postgresql
                  key: postgresql-db-name
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "true"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit, repmgr"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: "320"
            # Repmgr configuration
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: REPMGR_UPGRADE_EXTENSION
              value: "yes"
            - name: REPMGR_PGHBA_TRUST_ALL
              value: "no"
            - name: REPMGR_MOUNTED_CONF_DIR
              value: "/bitnami/repmgr/conf"
            - name: REPMGR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REPMGR_PARTNER_NODES
              value: "deepfence-postgres-postgresql-0.deepfence-postgres-postgresql-headless.{{ .Values.namespace }}.svc.cluster.local,deepfence-postgres-postgresql-1.deepfence-postgres-postgresql-headless.{{ .Values.namespace }}.svc.cluster.local"
            - name: REPMGR_PRIMARY_HOST
              value: "deepfence-postgres-postgresql-0.deepfence-postgres-postgresql-headless.{{ .Values.namespace }}.svc.cluster.local"
            - name: REPMGR_NODE_NAME
              value: "$(MY_POD_NAME)"
            - name: REPMGR_NODE_NETWORK_NAME
              value: "$(MY_POD_NAME).deepfence-postgres-postgresql-headless.{{ .Values.namespace }}.svc.cluster.local"
            - name: REPMGR_LOG_LEVEL
              value: "NOTICE"
            - name: REPMGR_CONNECT_TIMEOUT
              value: "5"
            - name: REPMGR_RECONNECT_ATTEMPTS
              value: "3"
            - name: REPMGR_RECONNECT_INTERVAL
              value: "5"
            - name: REPMGR_USERNAME
              value: "repmgr"
            - name: REPMGR_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: deepfence-postgres-postgresql
                  key: repmgr-password
            - name: REPMGR_DATABASE
              value: "repmgr"
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - bash
                - -ec
                - 'PGPASSWORD="$POSTGRES_PASSWORD" psql -w -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -c "SELECT 1"'
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - 'PGPASSWORD="$POSTGRES_PASSWORD" psql -w -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -c "SELECT 1"'
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            requests:
              memory: {{ .Values.defaultResourceLimits.requests.memory }}
              cpu: {{ .Values.defaultResourceLimits.requests.cpu }}
{{- if eq "true" .Values.setDefaultResourceLimits }}
            limits:
              memory: {{ .Values.defaultResourceLimits.limits.memory }}
              cpu: {{ .Values.defaultResourceLimits.limits.cpu }}
{{- end }}
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
            - name: hooks-scripts
              mountPath: /pre-stop.sh
              subPath: pre-stop.sh
      volumes:
        - name: hooks-scripts
          configMap:
            name: deepfence-postgres-postgresql-hooks-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "{{ .Values.volume.postgresStorage }}"
        storageClassName: {{ .Values.volume.storageClass }}
---
{{- end }}