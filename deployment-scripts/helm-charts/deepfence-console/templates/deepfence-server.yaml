apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepfence-server
  labels:
    {{- include "deepfence-console.labels" . | nindent 4 }}
    component: server
spec:
  {{- if not .Values.server.autoscaling.enabled }}
  replicas: {{ .Values.server.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "deepfence-console.selectorLabels" . | nindent 6 }}
      component: server
  template:
    metadata:
      {{- with .Values.server.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "deepfence-console.selectorLabels" . | nindent 8 }}
        component: server
    spec:
      serviceAccountName: {{ include "deepfence-console.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.server.podSecurityContext | nindent 8 }}
      containers:
        - name: server
          securityContext:
            {{- toYaml .Values.server.securityContext | nindent 12 }}
          image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.server.image.pullPolicy }}
          env:
            - name: CONSOLE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DEEPFENCE_ACCESS_TOKEN_EXPIRY_MINUTES
              value: "5"
            - name: DEEPFENCE_CONSOLE_ORCHESTRATOR
              value: "kubernetes"
          envFrom:
            - configMapRef:
                name: "deepfence-console-config"
            - secretRef:
                {{- if .Values.redis.create }}
                name: "deepfence-console-secrets-redis"
                {{- else }}
                name: {{ .Values.redis.secretName }}
                {{- end }}
            - secretRef:
                {{- if .Values.minio.create }}
                name: "deepfence-console-secrets-minio"
                {{- else }}
                name: {{ .Values.minio.secretName }}
                {{- end }}
            - secretRef:
                {{- if .Values.kafka.create }}
                name: "deepfence-console-secrets-kafka"
                {{- else }}
                name: {{ .Values.kafka.secretName }}
                {{- end }}
            - secretRef:
                {{- if .Values.postgresql.create }}
                name: "deepfence-console-secrets-postgresql"
                {{- else }}
                name: {{ .Values.postgresql.secretName }}
                {{- end }}
            - secretRef:
                {{- if .Values.neo4j.create }}
                name: "deepfence-console-secrets-neo4j"
                {{- else }}
                name: {{ .Values.neo4j.secretName }}
                {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: internal
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /deepfence/ping
              port: http
            initialDelaySeconds: 120
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /deepfence/ping
              port: http
            initialDelaySeconds: 120
            periodSeconds: 20
          resources:
            {{- toYaml .Values.server.resources | nindent 12 }}
      {{- with .Values.server.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.server.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.server.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: deepfence-server
  labels:
    {{- include "deepfence-console.labels" . | nindent 4 }}
    component: server
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.server.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.server.service.internalPort }}
      targetPort: internal
      protocol: TCP
      name: internal
  selector:
    {{- include "deepfence-console.selectorLabels" . | nindent 4 }}
    component: server
---
{{- if .Values.server.autoscaling.enabled }}
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: deepfence-server
  labels:
    {{- include "deepfence-console.labels" . | nindent 4 }}
    component: server
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: deepfence-server
  minReplicas: {{ .Values.server.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.server.autoscaling.maxReplicas }}
  metrics:
    {{- if .Values.server.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: {{ .Values.server.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if .Values.server.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: {{ .Values.server.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}