apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepfence-backend
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "deepfence-console.labels" . | nindent 4 }}
    app: deepfence-console
    name: deepfence-backend
spec:
  {{- if not .Values.backend.autoscaling.enabled }}
  replicas: {{ .Values.backend.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      name: deepfence-backend
      {{- include "deepfence-console.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: deepfence-console
        name: deepfence-backend
        {{- include "deepfence-console.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecretName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      automountServiceAccountToken: false
{{- if .Values.backend.initContainerRequired }}
      initContainers:
      - name: init-sysctl
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        command:
        - /bin/sh
        - -c
        - |
          sysctl -w net.core.somaxconn=10240
          sysctl -w net.ipv4.tcp_mem="1048576 1048576 6291456"
          sysctl -w net.ipv4.tcp_max_syn_backlog=1024
          sysctl -w net.ipv4.ip_local_port_range="1024 65534"
          sysctl -w fs.nr_open=1048576
          sysctl -w fs.file-max=1048576
{{ end }}
      containers:
        {{- if .Values.saas_deployment }}
        - name: promtail-sidecar-deepfence-backend
          image: grafana/promtail:2.5.0
          args:
          - '-config.expand-env'
          - '-config.file=/etc/promtail/config.yml'
          - '-client.external-labels=cluster={{ .Values.saas_env.clusterName }},env={{ .Values.saas_env.name }},clustertype=workloads,container=deepfence-backend'
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          volumeMounts:
          - mountPath: /etc/promtail
            name: promtail-config
          - name: varlog
            mountPath: /var/log/supervisor
        {{- end }}
        - name: deepfence-backend
          image: "{{ .Values.registry.imagePrefix }}{{ .Values.backend.image.repository }}:{{ .Values.image.tag }}"
          command: ["/app/code/dockerify/backend/entrypoint.sh"]
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          env:
            - name: POSTGRES_USER_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_host
            - name: POSTGRES_USER_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_port
            - name: POSTGRES_USER_DB_USER
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_user
            - name: POSTGRES_USER_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_password
            - name: POSTGRES_USER_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_users_db_name
            - name: POSTGRES_USER_DB_SSLMODE
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_ssl_mode
            - name: ELASTICSEARCH_HOST
              valueFrom:
                secretKeyRef:
                  name: es-secret-{{ include "deepfence-console.fullname" . }}
                  key: es_host
            - name: ELASTICSEARCH_PORT
              valueFrom:
                secretKeyRef:
                  name: es-secret-{{ include "deepfence-console.fullname" . }}
                  key: es_port
            - name: ELASTICSEARCH_SCHEME
              valueFrom:
                secretKeyRef:
                  name: es-secret-{{ include "deepfence-console.fullname" . }}
                  key: es_scheme
            {{- if .Values.db.elasticsearch.user }}
            - name: ELASTICSEARCH_USER
              valueFrom:
                secretKeyRef:
                  name: es-secret-{{ include "deepfence-console.fullname" . }}
                  key: es_user
            {{- end }}
            {{- if .Values.db.elasticsearch.password }}
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: es-secret-{{ include "deepfence-console.fullname" . }}
                  key: es_password
            {{- end }}
            {{- if .Values.saas_deployment }}
            - name: CUSTOMER_UNIQUE_ID
              valueFrom:
                secretKeyRef:
                  name: es-secret-{{ include "deepfence-console.fullname" . }}
                  key: es_customer_unique_id
            {{- end }}
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: redis-secret-{{ include "deepfence-console.fullname" . }}
                  key: host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: redis-secret-{{ include "deepfence-console.fullname" . }}
                  key: port
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          ports:
            - name: http
              containerPort: 4041
              protocol: TCP
          volumeMounts:
{{- if .Values.saas_deployment }}
            - name: varlog
              mountPath: /var/log/supervisor
{{- end }}
            - mountPath: /data
              name: data
      {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
{{- if .Values.saas_deployment }}
        - name: varlog
          emptyDir: {}
        - name: promtail-config
          configMap:
            name: sidecar-promtail
{{- end }}
        - name: data
          emptyDir: {}
