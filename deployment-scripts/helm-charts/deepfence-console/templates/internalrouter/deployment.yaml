apiVersion:  apps/v1
kind: Deployment
metadata:
  name: deepfence-internal-router
  namespace: {{ .Release.Namespace }}
  labels:
    app: deepfence-console
    name: deepfence-internal-router
    {{- include "deepfence-console.labels" . | nindent 4 }}
spec:
  {{- if not .Values.internalRouter.autoscaling.enabled }}
  replicas: {{ .Values.internalRouter.replicaCount }}
  {{- end }}  
  selector:
    matchLabels:
      name: deepfence-internal-router
      {{- include "deepfence-console.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: deepfence-console
        name: deepfence-internal-router
        {{- include "deepfence-console.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecretName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      automountServiceAccountToken: false
      containers:
        - image: "{{ .Values.registry.imagePrefix }}{{ .Values.internalRouter.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.router.image.pullPolicy }}
          name: deepfence-internal-router
          env:
            - name: POSTGRES_USER_DB_HOST
              valueFrom:
                secretKeyRef:
                    name: pg-secret-{{ include "deepfence-console.fullname" . }}
                    key: pg_host
            - name: POSTGRES_USER_DB_PORT
              valueFrom:
                secretKeyRef:
                    name: pg-secret-{{ include "deepfence-console.fullname" . }}
                    key: pg_port
            - name: POSTGRES_USER_DB_USER
              valueFrom:
                secretKeyRef:
                    name: pg-secret-{{ include "deepfence-console.fullname" . }}
                    key: pg_user
            - name: POSTGRES_USER_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                    name: pg-secret-{{ include "deepfence-console.fullname" . }}
                    key: pg_password
            - name: POSTGRES_USER_DB_NAME
              valueFrom:
                secretKeyRef:
                    name: pg-secret-{{ include "deepfence-console.fullname" . }}
                    key: pg_users_db_name
            - name: POSTGRES_USER_DB_SSLMODE
              valueFrom:
                secretKeyRef:
                    name: pg-secret-{{ include "deepfence-console.fullname" . }}
                    key: pg_ssl_mode
            - name: UI_SERVICE_NAME
              value: "{{ .Values.router.uiServiceName }}"
            - name: ENABLE_AUTH
              value: "false"
            - name: OPERATING_MODE
              value: "k8s"
          volumeMounts:
          {{- if or .Values.tls.secretName (and .Values.tls.cert .Values.tls.key) }}
          - name: certs
            mountPath: /etc/deepfence/certs
            readOnly: true
          {{- end }}
          ports:
          - containerPort: 443
          resources:
            {{- toYaml .Values.internalRouter.resources | nindent 12 }}
      {{- with .Values.internalRouter.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
{{- if .Values.internalRouter.setAntiAffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - deepfence-internal-router
            topologyKey: kubernetes.io/hostname
{{- end }}
      {{- with .Values.internalRouter.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.tls.secretName }}
      - name: certs
        secret:
          secretName: {{ .Values.tls.secretName }}
      {{- else if and .Values.tls.cert .Values.tls.key }}
      - name: certs
        secret:
          secretName: deepfence-ui-ssl-cert
      {{- end }}
