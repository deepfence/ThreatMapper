# Default values for deepfence-console.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

global:
  imageRepoPrefix: "docker.io"
  # this image tag is used every where for console services
  # to override set tag at service level
  imageTag: 2.0.0
  storageClass: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

imagePullSecret:
  # Specifies whether a image pull secret should be created
  create: false
  registry: "https://index.docker.io/v1/"
  username: ""
  password: ""
  # The name of the imagePullSecret to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

kafka:
  # Specifies whether a kafka cluster should be created
  create: true
  # if create false provide name of the existing secret
  # secret format refer templates/console-secrets/kafka.yaml
  secretName: ""
  # if create true then below values are used to create kafka cluster
  replicaCount: 1 # recommended 3 for high availability kafka
  image:
    repository: deepfenceio/deepfence_kafka_broker_ce
    pullPolicy: Always
    # Overrides the image tag whose default is .global.imageTag
    # tag: 2.0.0
  storageUUID: hNQ55qppT5GGybF52ZGlOQ
  storageClass: ""
  volumeSize: 30G
  resources:
    limits:
      # cpu: 100m
      memory: 4000Mi
    requests:
      # cpu: 100m
      memory: 1000Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

postgresql:
  # Specifies whether a postgres database instance should be created
  create: true
  # if create false provide name of the existing secret
  # secret format refer templates/console-secrets/postgresql.yaml
  secretName: ""
  # if create true then below values are used to create postgres database instance
  secrets:
    POSTGRES_PASSWORD: deepfence
    POSTGRES_USER: deepfence
    POSTGRES_DB: users
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_postgres_ce
    pullPolicy: Always
    # Overrides the image tag whose default is .global.imageTag
    # tag: 2.0.0
  storageClass: ""
  volumeSize: 10G
  resources:
    limits:
      # cpu: 100m
      memory: 2000Mi
    requests:
      # cpu: 100m
      memory: 512Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

redis:
  # Specifies whether a postgres database instance should be created
  create: true
  # if create false provide name of the existing secret
  # secret format refer templates/console-secrets/redis.yaml
  secretName: ""
  # if create true then below values are used to create postgres database instance
  image:
    repository: deepfenceio/deepfence_redis_ce
    pullPolicy: Always
    # Overrides the image tag whose default is .global.imageTag
    # tag: 2.0.0
  storageClass: ""
  volumeSize: 5G
  resources:
    limits:
      # cpu: 100m
      memory: 1000Mi
    requests:
      # cpu: 100m
      memory: 128Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

minio:
  # Specifies whether a postgres database instance should be created
  create: true
  # if create false provide name of the existing secret
  # secret format refer templates/console-secrets/minio.yaml
  secretName: ""
  # if create true then below values are used to create postgres database instance
  secrets:
    MINIO_ROOT_USER: deepfence
    MINIO_ROOT_PASSWORD: deepfence
  image:
    repository: deepfenceio/deepfence_file_server_ce
    pullPolicy: Always
    # Overrides the image tag whose default is .global.imageTag
    # tag: 2.0.0
  storageClass: ""
  volumeSize: 30G
  resources:
    limits:
      # cpu: 100m
      memory: 1000Mi
    requests:
      # cpu: 100m
      memory: 128Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

neo4j:
  # Specifies whether a neo4j database instance should be created
  create: true
  # if create false provide name of the existing secret
  # secret format refer templates/console-secrets/neo4j.yaml
  secretName: ""
  # if create true then below values are used to create neo4j database instance
  secrets:
    # format should be username/password
    NEO4J_AUTH: neo4j/e16908ffa5b9f8e9d4ed
  config:
    NEO4J_dbms_memory_pagecache_size: 2600m
    NEO4J_dbms_memory_heap_initial__size: 4000m
    NEO4J_dbms_memory_heap_max__size: 4000m
    NEO4JLABS_PLUGINS: '["apoc"]'
  image:
    repository: neo4j
    pullPolicy: Always
    tag: 4.4.12
  storageClass: ""
  volumeSize: 30G
  resources:
    {}
    # limits:
    #   # cpu: 100m
    #   memory: 5000Mi
    # requests:
    #   # cpu: 100m
    #   memory: 1000Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

# ingress for console
ingress:
  enable: false
  ## name of the ingress class for ingress provider installed on the cluster, cannot be empty
  ## Example: nginx
  class: nginx
  ## host example: threat.example.com
  host: ""
  ## annotations to customize ingress
  annotations:
    ## nginx ingress annotations
    ## https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 200m

    ## aws alb annotations
    ## aws load balancer controller needs to be installed on the cluster for these annotations to work
    ## documentation aws load balancer controller https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/ingress/annotations/
    # alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    # alb.ingress.kubernetes.io/backend-protocol: HTTPS
    ## arn of the certificate available on aws certificate manager
    # alb.ingress.kubernetes.io/certificate-arn: ""
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=3600
    # alb.ingress.kubernetes.io/target-type: ip

router:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_router_ce
    pullPolicy: Always
    # Overrides the image tag whose default is .global.imageTag
    # tag: 2.0.0
  forceHttpsRedirect: true
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    ## useful if deepfence-router chart is not installed
    create: false
    # useful for configuring loadbalancer options on supported clouds
    annotations: {}
    ## service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
    type: ClusterIP # set service type to cluster ip and enable ingress if available
    httpsPort: 443
    httpPort: 80
  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Use custom ssl certificate for Deepfence UI
  # custom certificates can be configured using two options
  # existing secret or base64 encoded cert and key string
  # provide one off the two options to configure custom certificates
  tls:
    # provide secret name which contains tls cert and key
    # reference: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets
    # make sure to create secret in the same namespace as that of the console
    secretName: ""
    # embed given cert and key as secret and mount to router pod
    # provide certificate and key in below example format
    # cert: |-
    #   -----BEGIN CERTIFICATE-----
    #   MIIFCTCCAvGgAwIBAgIUNshy8GFTjfUR7inZ1JCcN+tDuh4wDQYJKoZIhvcNAQEL
    #   .....
    #   BMepE4d9+TQFcPQ/OKSlP8FB2nPKZJdM+JlXDFWqeKvbdYS4QErRLd33qUmq
    #   -----END CERTIFICATE-----
    # key: |-
    #   -----BEGIN PRIVATE KEY-----
    #   MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDECeUraonCz/89
    #   .....
    #   bHEvWp7ugCTFhurM+lla0d+ElDO2
    #   -----END PRIVATE KEY-----
    cert: ""
    key: ""

server:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_server_ce
    pullPolicy: Always
    # Overrides the image tag whose default is .global.imageTag
    # tag: 2.0.0
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8080
    internalPort: 8081
  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

worker:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_worker_ce
    pullPolicy: Always
    # Overrides the image tag whose default is .global.imageTag
    # tag: 2.0.0
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8080
  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

ingester:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_worker_ce
    pullPolicy: Always
    # Overrides the image tag whose default is .global.imageTag
    # tag: 2.0.0
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8080
  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

scheduler:
  image:
    repository: deepfenceio/deepfence_worker_ce
    pullPolicy: Always
    # Overrides the image tag whose default is .global.imageTag
    # tag: 2.0.0
  service:
    type: ClusterIP
    port: 8080
  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

ui:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_ui_ce
    pullPolicy: Always
    # Overrides the image tag whose default is .global.imageTag
    # tag: 2.0.0
  service:
    type: ClusterIP
    port: 8081
  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
