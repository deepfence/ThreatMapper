# Default values for deepfence-console.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

registry:
  name: "https://index.docker.io/v1/"
  imagePrefix: ""
  # This will create a secret called "deepfence-docker-secret"
  username: ""
  password: ""
  # If kubernetes secret is already defined externally, change following value to false
  # https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  createRegistrySecret: true

image:
  tag: 1.4.1
  pullSecretName: docker-deepfence-secret

# Use custom ssl certificate for Deepfence UI
# custom certificates can be configured using two options
# existing secret or base64 encoded cert and key string
# provide one off the two options to configure custom certificates
tls:
  # provide secret name which contains tls cert and key
  # reference: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets
  # make sure to create secret in the same namespace as that of the console
  secretName: ""
  # embed given cert and key as secret and mount to router pod
  # provide certificate and key in below example format
  # cert: |-
  #   -----BEGIN CERTIFICATE-----
  #   MIIFCTCCAvGgAwIBAgIUNshy8GFTjfUR7inZ1JCcN+tDuh4wDQYJKoZIhvcNAQEL
  #   .....
  #   JY7f+DC42mQvWWXbll+I60CEtZyExtfBEbSihOR2NoG3WMhXEGAXO5C/jEnSDHKt
  #   BMepE4d9+TQFcPQ/OKSlP8FB2nPKZJdM+JlXDFWqeKvbdYS4QErRLd33qUmq
  #   -----END CERTIFICATE-----
  # key: |-
  #   -----BEGIN PRIVATE KEY-----
  #   MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDECeUraonCz/89
  #   .....
  #   uK1Rv6SE6KrBFb8JYEpjyjiAlVUGDANqbMtB2dvJ/GD6vTch/kLyZ95x7+V0qXGV
  #   bHEvWp7ugCTFhurM+lla0d+ElDO2
  #   -----END PRIVATE KEY-----
  cert: ""
  key: ""

# Configure port for browser / agents
managementConsolePort: "443"

# URL or ip address of Deepfence management console:
# Example: deepfence.company.com, 11.22.33.44
deepfenceUrl: ""

volume:
  storageClass: openebs-hostpath
  # Change stoage class when using different PV provisioner.
  # For example, it will be 'openebs-hostpath' when using openebs
  # or it will be 'default' when using cloud managed Persistent Volumes.
  esStorage: 30Gi
  postgresStorage: 30Gi

# If config update needed for postgres instance
# postgresql:
#   extendedConf: |-
#     huge_pages = off

clusterDomain: "cluster.local"

db:
  # If kubernetes secret is already defined externally, change following value to false
  createDbSecret: true
  #  Change following values accordingly if using externally managed database
  postgresUserDb:
    host: deepfence-postgres
    port: "5432"
    user: "cve"
    password: "cve"
    dbname: "users"
    sslmode: "disable"
    # Following values are only for SaaS deployments
    customer_user_name: ""
    customer_user_password: ""
  elasticsearch:
    scheme: "http"
    host: deepfence-es
    port: "9200"
    user: ""
    password: ""
  redis:
    host: deepfence-redis
    port: "6379"

# (Optional) Set custom name for the cluster and hostname prefix for console vm's to easily identify in Deepfence UI.
# Example: df-console or deepfence-console
# It will be suffixed with hostname - df-console-aks-agentpool-123456-vmss000001
clusterName: "df-console"

# SaaS specific values
saas_deployment: false
saas_portal_url: ""

awsALB:
  wafAnnotation: ""
  certArn: ""
  groupName: "deepfence-1"

saas_env:
  name: ""
  clusterName: ""
  lokiUrl: ""

mountContainerRuntimeSocket:
  dockerSock: false
  # Change if socket path is not the following
  dockerSockPath: "/var/run/docker.sock"
  containerdSock: true
  # Change if socket path is not the following
  containerdSockPath: "/run/containerd/containerd.sock"
  crioSock: false
  # Change if socket path is not the following
  crioSockPath: "/var/run/crio/crio.sock"

serviceAccountName: deepfence-console

api:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_api_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 150Mi
    limits:
      cpu: 4000m
      memory: 4Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

backend:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_api_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  initContainerRequired: true
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 512Mi
    limits:
      cpu: 4000m
      memory: 4Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP


celery:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_api_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 1Gi
    limits:
      cpu: 8000m
      memory: 8Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

diagnosis:
  replicaCount: 1
  nodeMetrics: false
  image:
    repository: deepfenceio/deepfence_diagnosis_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 100Mi
    limits:
      cpu: 2000m
      memory: 200Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

discovery:
  # Show console vm in management console UI
  runConsoleDiscovery: true
  image:
    repository: deepfenceio/deepfence_discovery_ce
    pullPolicy: Always
  enableGraphReport: true
  clusterName: ""

  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 150Mi
    limits:
      cpu: 2000m
      memory: 2Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists

  service:
    type: ClusterIP

topology:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_discovery_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 16000m
      memory: 32Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

fetcher:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_fetcher_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 100Mi
    limits:
      cpu: 2000m
      memory: 2Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

router:
  replicaCount: 1
  uiServiceName: "deepfence-ui"
  image:
    repository: deepfenceio/deepfence_router_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 100Mi
    limits:
      cpu: 4000m
      memory: 4Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  setAntiAffinity: false
  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP


redis:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_redis_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  initContainerRequired: true
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 100Mi
    limits:
      cpu: 8000m
      memory: 16Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

secretScanner:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_secret_scanner_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 100m
      memory: 40Mi
      # ephemeral-storage: 10Gi
    limits:
      cpu: 4000m
      memory: 4Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

vulnerabilityMapper:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_vulnerability_mapper_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 100Mi
    limits:
      cpu: 4000m
      memory: 4Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

internalRouter:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_router_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 100Mi
    limits:
      cpu: 4000m
      memory: 4Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  setAntiAffinity: false
  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

packageScanner:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_package_scanner_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 1Gi
      # ephemeral-storage: 10Gi
    limits:
      cpu: 4000m
      memory: 4Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

ui:
  runUIPod: true
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_ui_ce
    pullPolicy: Always
  imagePullSecrets: 
      - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 50m
      memory: 40Mi
    limits:
      cpu: 2000m
      memory: 2Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  service:
    type: ClusterIP

elasticsearch:
  # Replication factor for elasticsearch
  # Recommended: 3+ for production, 1 for dev setup, minikube
  replicaCount: 3
  image:
    repository: deepfenceio/deepfence_elastic_ce
    pullPolicy: Always
  imagePullSecrets:
  - name: docker-deepfence-secret
  nameOverride: ""
  fullnameOverride: ""

  resources:
    requests:
      cpu: 200m
      memory: 2Gi
    limits:
      cpu: 8000m
      memory: 8Gi
  heapSize: "2g"

  autoscaling:
    enabled: false
  
  nodeSelector: {}
  
  tolerations: []
  
  service:
    type: ClusterIP

postgresqlPgpool:
  image:
    name: docker.io/deepfenceio/pgpool:4.2.5-debian-10-r37
    pullPolicy: IfNotPresent

  resources:
    requests:
      cpu: 50m
      memory: 40Mi
    limits:
      cpu: 4000m
      memory: 8Gi

  nodeSelector: {}
  
  tolerations: []
  
  service:
    type: ClusterIP

postgresql:
  image:
    name: docker.io/deepfenceio/postgresql-repmgr:12.8.0-debian-10-r71
    pullPolicy: IfNotPresent

  resources:
    requests:
      cpu: 50m
      memory: 40Mi
    limits:
      cpu: 4000m
      memory: 8Gi

  nodeSelector: {}
  
  tolerations: []
  
  service:
    type: ClusterIP
