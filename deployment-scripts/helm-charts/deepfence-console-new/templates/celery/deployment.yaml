apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepfence-celery
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "deepfence-console.labels" . | nindent 4 }}
    app: deepfence-console
    name: deepfence-celery
spec:
  {{- if not .Values.celery.autoscaling.enabled }}
  replicas: {{ .Values.celery.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      name: deepfence-celery
      {{- include "deepfence-console.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: deepfence-console
        name: deepfence-celery
        {{- include "deepfence-console.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecretName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      volumes:
{{- if eq .Values.mountContainerRuntimeSocket.dockerSock "true" }}
        - name: docker-sock
          hostPath:
            path: {{ .Values.mountContainerRuntimeSocket.containerdSockPath }}
            type: Socket
        - name: docker-certs
          hostPath:
            path: /etc/docker/certs.d
            type: ""
{{ end }}
{{- if eq .Values.mountContainerRuntimeSocket.containerdSock "true" }}
        - name: containerd-certs
          hostPath:
            path: /etc/containerd/certs.d
            type: ""
        - name: containerd-sock
          hostPath:
            path: {{ .Values.mountContainerRuntimeSocket.containerdSockPath }}
            type: Socket
{{ end }}
        - name: data
          emptyDir: {}
      containers:
        - name: deepfence-celery
          image: "{{ .Values.celery.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.celery.image.pullPolicy }}
          command: ["/app/code/dockerify/celery/entrypoint.sh"]
          env:
            - name: POSTGRES_USER_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_host
            - name: POSTGRES_USER_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_port
            - name: POSTGRES_USER_DB_USER
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_user
            - name: POSTGRES_USER_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_password
            - name: POSTGRES_USER_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_users_db_name
            - name: POSTGRES_USER_DB_SSLMODE
              valueFrom:
                secretKeyRef:
                  name: pg-secret-{{ include "deepfence-console.fullname" . }}
                  key: pg_ssl_mode
            - name: ELASTICSEARCH_HOST
              valueFrom:
                configMapKeyRef:
                  name: "main-cm-{{ include "deepfence-console.fullname" . }}"
                  key: elasticsearch_host
            - name: ELASTICSEARCH_PORT
              valueFrom:
                configMapKeyRef:
                  name: "main-cm-{{ include "deepfence-console.fullname" . }}"
                  key: elasticsearch_port
            - name: ELASTICSEARCH_SCHEME
              valueFrom:
                configMapKeyRef:
                  name: "main-cm-{{ include "deepfence-console.fullname" . }}"
                  key: es_scheme
            {{- if .Values.db.elasticsearch.user }}
            - name: ELASTICSEARCH_USER
              valueFrom:
                secretKeyRef:
                  name: "es-secret-{{ include "deepfence-console.fullname" . }}"
                  key: es_user
            {{- end }}
            {{- if .Values.db.elasticsearch.password }}
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "es-secret-{{ include "deepfence-console.fullname" . }}"
                  key: es_password
            {{- end }}
            {{- if eq "true" .Values.saas_deployment }}
            - name: CUSTOMER_UNIQUE_ID
              valueFrom:
                secretKeyRef:
                  name: "es-secret-{{ include "deepfence-console.fullname" . }}"
                  key: es_customer_unique_id
            {{- end }}
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: "main-cm-{{ include "deepfence-console.fullname" . }}"
                  key: redis_host
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: "main-cm-{{ include "deepfence-console.fullname" . }}"
                  key: redis_port
          volumeMounts:
{{- if eq .Values.mountContainerRuntimeSocket.dockerSock "true" }}
            - mountPath: {{ .Values.mountContainerRuntimeSocket.dockerSockPath }}
              name: docker-sock
            - mountPath: /etc/docker/certs.d
              name: docker-certs
{{ end }}
{{- if eq .Values.mountContainerRuntimeSocket.containerdSock "true" }}
            - mountPath: /etc/containerd/certs.d
              name: containerd-certs
            - mountPath: {{ .Values.mountContainerRuntimeSocket.containerdSockPath }}
              name: containerd-sock
{{ end }}
            - mountPath: /data
              name: data

          resources:
            requests:
              memory: 1Gi
              cpu: {{ .Values.defaultResourceLimits.requests.cpu }}
            limits:
              memory: 8Gi
{{- if eq "true" .Values.setDefaultResourceLimits }}
              cpu: {{ .Values.defaultResourceLimits.limits.cpu }}
{{- end }}
      {{- with .Values.celery.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: name
                    operator: In
                    values:
                      - deepfence-backend
                      - deepfence-api
              topologyKey: kubernetes.io/hostname
{{- if .Values.topologyNodeAffinityHostName }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: NotIn
                    values:
                      - "{{ .Values.topologyNodeAffinityHostName }}"
{{- end }}
      {{- with .Values.celery.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

