/* eslint-disable jsx-a11y/label-has-associated-control */
/* eslint-disable camelcase */
import React, { useEffect, useState } from 'react';
import { Map } from 'immutable';
import { connect } from 'react-redux';
import { reduxForm, Field, formValueSelector } from 'redux-form/immutable';
import ClassNames from 'classnames';
import { CVE_SCAN_TYPE_OPTIONS } from '../../../../constants/menu-collection';
import ToggleSwitchField from '../../../common/toggle-switch/redux-form-field';
import styles from './cve-scan-form.module.scss';

const priorityOption = [
  {
    value: 'priority',
    label: 'Priority Scan',
  },
];

const CheckboxGroupField = ({ input, meta, options }) => {
  const { name, onChange } = input;
  const { touched, error } = meta;
  const inputValue = input.value;

  const checkboxes = options.map(({ label, value, disabled }, index) => {
    const handleChange = (event) => {
      const arr = [...inputValue];
      if (event.target.checked) {
        arr.push(value);
      } else {
        arr.splice(arr.indexOf(value), 1);
      }
      return onChange(arr);
    };
    const checked = inputValue.includes(value);
    return (
      <div className={ClassNames("df-checkbox-button", styles.languageCheckboxField)} key={label}>
        <input
          type="checkbox"
          name={`${name}[${index}]`}
          id={`${name}[${index}]`}
          value={value}
          checked={checked}
          onChange={handleChange}
          disabled={disabled}
        />
        <label htmlFor={`${name}[${index}]`}>
          <span>{label}</span>
        </label>
      </div>
    );
  });

  return (
    <div>
      <div className={ClassNames("df-checkbox-group", styles.languageCheckboxGroup)}>{checkboxes}</div>
      {touched && error && <p className="error">{error}</p>}
    </div>
  );
};


const CVEScanForm = (props) => {
  const {
    submitting,
    userDefinedTags,
    hasPodAsParent,
    hasKubeClusterId,
    handleSubmit,
    change,
    toggleAll
  } = props;
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);
  useEffect(() => {
    if (toggleAll) {
      change('scanType', CVE_SCAN_TYPE_OPTIONS.map(el => el.value));
    } else {
      change('scanType', ['base', 'java']);
    }
  }, [toggleAll]);
  const tagList = userDefinedTags ? userDefinedTags.split(',') : [];
  const tagOptions = tagList.map(el => ({
    label: el,
    value: el,
  }));

  const hasTags = tagOptions.length > 0;
  const showKubeOptions = hasPodAsParent || hasKubeClusterId;
  const showAdvancedOptionsLink = hasTags || showKubeOptions;
  const languageOptions = [...CVE_SCAN_TYPE_OPTIONS];

  return (
    <div className={styles.cveScanForm}>
      <form onSubmit={(values) => {
        if (handleSubmit) handleSubmit(values);
      }}>
        <Field
          name="toggle"
          component={ToggleSwitchField}
          label="Select All"
        />
        <div className={ClassNames("form-field", styles.osPackagesCheckbox)} style={{ marginBottom: 0 }}>
          <div className="df-checkbox-group">
            <div className="df-checkbox-button">
              <input
                type="checkbox"
                checked
                disabled
                id="osPackages"
              />
              {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}
              <label htmlFor="osPackages">
                <span>OS Packages</span>
              </label>
            </div>
          </div>
        </div>
        <Field
          component={CheckboxGroupField}
          options={languageOptions}
          name="scanType"
        />
        {showAdvancedOptionsLink && (
          <div
            onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
            className={styles.advancedOptionToggleText}
            aria-hidden="true"
          >
            <i className={`fa ${ showAdvancedOptions ? 'fa-caret-down' : 'fa-caret-right'}`} />&nbsp;&nbsp;Advanced Options
          </div>
        )}
        {showAdvancedOptions
          && (
            <div className="form-field">
              {showKubeOptions && (
                <div className="df-checkbox-group">
                  {hasPodAsParent && (
                    <div className="df-checkbox-button" style={{marginTop: '8px'}}>
                      <Field
                        component="input"
                        type="checkbox"
                        name="scanThisNamespace"
                        id="scanThisNamespace"
                      />
                      <label htmlFor='scanThisNamespace' style={{display: 'inline'}}>
                        Scan entire namespace (container images of all pods in the namespace)
                      </label>
                    </div>
                  )}
                  <div className="df-checkbox-button" style={{marginTop: '8px'}}>
                    <Field
                      component="input"
                      type="checkbox"
                      name="scanThisCluster"
                      id="scanThisCluster"
                    />
                    <label htmlFor='scanThisCluster' style={{display: 'inline'}}>
                      Scan entire cluster (all hosts and container images of all pods in the cluster)
                    </label>
                  </div>
                </div>
              )}
              {hasTags && (
                <div className="df-checkbox-button"  style={{marginTop: '8px'}}>
                  <div className="sub-heading">Start scan on all nodes with the chosen tags </div>
                  <Field
                    component={CheckboxGroupField}
                    options={tagOptions}
                    name="taglist"
                  />
                </div>
              )}
            </div>
          )
        }
        <div style={{ marginTop: '6px', marginBottom: '6px' }}>
          <Field
            component={CheckboxGroupField}
            options={priorityOption}
            name="priority"
          />
        </div>
        <div className="form-field">
          <button
            className={ClassNames("primary-btn relative", styles.submitButton)}
            type="submit"
            disabled={submitting}
          >
            Start Scan
          </button>
        </div>
      </form>
    </div>
  );
}

const cveScanFormSelector = formValueSelector('cve-scan');

function mapStateToProps(state) {
  return {
    toggleAll: cveScanFormSelector(state, 'toggle'),
  };
}

export default reduxForm({
  form: 'cve-scan',
  initialValues: Map({
    scanType: ['base', 'java'],
  }),
})(connect(mapStateToProps)(CVEScanForm));
