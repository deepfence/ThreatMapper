/* eslint-disable camelcase */
import React from 'react';
import {Map} from 'immutable';
import {connect} from 'react-redux';
import {reduxForm, Field, formValueSelector} from 'redux-form/immutable';
import {CVE_SCAN_TYPE_OPTIONS} from '../../constants/menu-collection';
import ToggleSwitchField from '../common/toggle-switch/redux-form-field';

const priorityOption = [
  {
    value: 'priority',
    label: 'Priority Scan',
  },
];

const renderCheckboxGroupField = ({input, meta, options}) => {
  const {name, onChange} = input;
  const {touched, error} = meta;
  const inputValue = input.value;

  const checkboxes = options.map(({label, value, disabled}, index) => {
    const handleChange = (event) => {
      const arr = [...inputValue];
      if (event.target.checked) {
        arr.push(value);
      } else {
        arr.splice(arr.indexOf(value), 1);
      }
      return onChange(arr);
    };
    const checked = inputValue.includes(value);
    return (
      <div className="df-checkbox-button" key={label}>
        <input
          type="checkbox"
          name={`${name}[${index}]`}
          id={`${name}[${index}]`}
          value={value}
          checked={checked}
          onChange={handleChange}
          disabled={disabled}
        />
        <label htmlFor={`${name}[${index}]`}>
          <span>{label}</span>
        </label>
      </div>
    );
  });

  return (
    <div>
      <div className="df-checkbox-group">{checkboxes}</div>
      {touched && error && <p className="error">{error}</p>}
    </div>
  );
};


class CVEScanForm extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      showAdvancedOptions: false
    };
    this.toggleState = this.toggleState.bind(this);
    this.submitClickHandler = this.submitClickHandler.bind(this);
  }

  UNSAFE_componentWillReceiveProps(newProps) {
    const {
      change,
      toggleAll,
    } = this.props;
    if (toggleAll !== newProps.toggleAll) {
      if (newProps.toggleAll) {
        change('scanType', CVE_SCAN_TYPE_OPTIONS.map(el => el.value));
      } else {
        change('scanType', ['base', 'java']);
      }
    }
  }

  submitClickHandler(values) {
    const {handleSubmit} = this.props;
    return handleSubmit(values);
  }

  toggleState() {
    const { showAdvancedOptions } = this.state;
    this.setState(
      {showAdvancedOptions: !showAdvancedOptions},
    );
  }

  render() {
    const {
      submitting,
      userDefinedTags,
      hasPodAsParent,
      hasKubeClusterId,
    } = this.props;
    const tagList = userDefinedTags ? userDefinedTags.split(',') : [];
    const tagOptions = tagList.map(el => ({
      label: el,
      value: el,
    }));

    const hasTags = tagOptions.length > 0;
    const showKubeOptions = hasPodAsParent || hasKubeClusterId;
    const showAdvancedOptionsLink = hasTags || showKubeOptions;
    const {
      showAdvancedOptions,
    } = this.state;
    const languageOptions = CVE_SCAN_TYPE_OPTIONS;
    return (
      <div className="cve-scan-form">
        <div className="title">
          Start a new scan
        </div>
        <form onSubmit={this.submitClickHandler}>
          <Field
            name="toggle"
            component={ToggleSwitchField}
            label="Select All"
          />
          <div className="form-field">
            <input
              type="checkbox"
              checked
              disabled
            />
            <span className="label">
              OS Packages
            </span>
          </div>
          <Field
            component={renderCheckboxGroupField}
            options={languageOptions}
            name="scanType"
          />
          {showAdvancedOptionsLink && (
          <div className="form-field">
            <span
              onClick={this.toggleState}
              className="link"
              aria-hidden="true"
            >
              Advanced Options
            </span>
          </div>
          )}
          {showAdvancedOptions
            && (
            <div className="form-field">
              {showKubeOptions && (
              <div className="form-field">
                {hasPodAsParent && (
                <div className="form-field">
                  <Field
                    component="input"
                    type="checkbox"
                    name="scanThisNamespace"
                  />
                  <span className="label">
                    Scan entire namespace (container images of all pods in the namespace)
                  </span>
                </div>
                )}
                <div className="form-field">
                  <Field
                    component="input"
                    type="checkbox"
                    name="scanThisCluster"
                  />
                  <span className="label">
                    Scan entire cluster (all hosts and container images of all pods in the cluster)
                  </span>
                </div>
              </div>
              )}
              {hasTags && (
              <div className="form-field">
                <div className="sub-heading"> Start scan on all nodes with the chosen tags </div>
                <Field
                  component={renderCheckboxGroupField}
                  options={tagOptions}
                  name="taglist"
                 />
              </div>
              )}
            </div>
            )
          }
           <div style={{marginTop: '10px', marginBottom: '10px'}}>
            <Field
              component={renderCheckboxGroupField}
              options={priorityOption}
              name="priority"
            />
          </div>
          <div className="form-field">
            <button
              className="primary-btn full-width relative"
              type="submit"
              disabled={submitting}
             >
              Start Scan
            </button>
          </div>
        </form>
      </div>
    );
  }
}

const cveScanFormSelector = formValueSelector('cve-scan');

function mapStateToProps(state) {
  return {
    toggleAll: cveScanFormSelector(state, 'toggle'),
  };
}

export default reduxForm({
  form: 'cve-scan',
  initialValues: Map({
    scanType: ['base', 'java'],
  }),
})(connect(mapStateToProps)(CVEScanForm));
