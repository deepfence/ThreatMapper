/* eslint-disable */
import React from 'react';
import { Map } from 'immutable';
import { connect } from 'react-redux';
import { mergeArraysByKey } from '../../utils/array-utils';
import SemiDonutChart from '../common/charts/semi-donut-chart/index';
import {
  getNodeCVESeverityAction,
  openDonutDetailsModal,
  updateActiveDonut,
} from '../../actions/app-actions';

class CVESeverityChart extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.getNodeCVESeverity = this.getNodeCVESeverity.bind(this);
    this.handleSectionClick = this.handleSectionClick.bind(this);
  }

  componentDidMount() {
    this.getNodeCVESeverity();
  }

  getNodeCVESeverity() {
    const { getNodeCVESeverityAction: action, details } = this.props;

    const metaIndex = details.metadata.reduce((acc, meta) => {
      acc[meta.id] = meta;
      return acc;
    }, {});

    let fullImageName;

    if (details.type === 'container' || details.type === 'container_image') {
      const { docker_image_name: imageNameMeta, docker_image_tag: tagMeta } =
        metaIndex;

      // the backend does not provide this metadata for some containers
      if (!imageNameMeta || !tagMeta) {
        return;
      }

      const { value: dockerImageName } = imageNameMeta;

      const { value: dockerTagName } = tagMeta;

      fullImageName = `${dockerImageName}:${dockerTagName}`;
    } else if (details.type === 'host') {
      const { host_name: hostnameMeta } = metaIndex;

      const { value: hostname } = hostnameMeta;

      fullImageName = hostname;
    }

    this.setState({
      fullImageName,
    });

    const params = {
      doc_type: 'cve',
      fields: [
        {
          name: 'scan_id.keyword',
          type: 'terms',
        },
        {
          name: 'cve_severity.keyword',
          type: 'terms',
        },
      ],
      filters: {
        cve_container_image: fullImageName,
      },
      timeUnit: 'all',
      number: 0,
    };
    return action(params);
  }

  handleSectionClick(section) {
    const {
      openDonutDetailsModal: openAction,
      updateActiveDonut: updateDonutAction,
      nodeCveSeverityIm = Map(),
    } = this.props;

    const { fullImageName } = this.state;

    const nodeCveSeverity = nodeCveSeverityIm.get(fullImageName, []);
    if (nodeCveSeverity.length > 0) {
      const { scanId } = nodeCveSeverity[0];
      updateDonutAction(section.name, 'cve_severity', fullImageName, scanId);
      openAction();
    }
  }

  render() {
    const { fullImageName = '' } = this.state;

    const { nodeCveSeverityIm = Map() } = this.props;

    const nodeCveSeverity = nodeCveSeverityIm.get(fullImageName, []);
    const template = [
      {
        label: 'critical',
        value: '',
      },
      {
        label: 'high',
        value: '',
      },
      {
        label: 'medium',
        value: '',
      },
      {
        label: 'low',
        value: '',
      },
    ];
    const severityPaddedData = mergeArraysByKey(
      template,
      nodeCveSeverity,
      'label'
    );
    const showChart = nodeCveSeverity.length > 0;
    return (
      <div className="node-details-content-section">
        <div className="node-details-content-section-header">
          Vulnerabilities
        </div>
        {showChart ? (
          <SemiDonutChart
            data={severityPaddedData}
            title="CVE Severity"
            chartHeight={200}
            chartWidth={340}
            innerRadius={0.8}
            onSectionClick={this.handleSectionClick}
          />
        ) : (
          <div className="info" style={{ fontSize: '14px' }}>
            No Data Available
          </div>
        )}
      </div>
    );
  }
}

const mapStateToProps = state => ({
  nodeCveSeverityIm: state.getIn(['cve', 'topology', 'node_cve_severity']),
});

export default connect(mapStateToProps, {
  getNodeCVESeverityAction,
  openDonutDetailsModal,
  updateActiveDonut,
})(CVESeverityChart);
