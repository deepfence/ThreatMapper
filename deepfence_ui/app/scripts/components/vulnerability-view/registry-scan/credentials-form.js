/*eslint-disable*/
import React from 'react';
import { Map } from 'immutable';
import { connect } from 'react-redux';
import {
  Field, reduxForm, formValueSelector, getFormValues
} from 'redux-form/immutable';
import Loader from '../../common/app-loader/horizontal-dots-loader';
import FileUploadField from '../../common/file-upload/index';
import ToggleSwitchField from '../../common/toggle-switch/redux-form-field';

const validateJsonFileType = (input) => {
  if (input?.file && input?.file?.type?.toLowerCase?.() !== 'application/json') {
    return 'Invalid file type, only json file is allowed'
  }
};

const renderTextField = ({
  input,
  label,
  labelInfo,
  type,
  placeholder,
  disabled,
  meta:
  {
    touched,
    error,
    warning
  }
}) => (
  <div className="form-field">
    <span className="label">
      {label}
      {labelInfo && (
        <i
          className="label-info fa fa-info-circle"
          title={labelInfo}
        />
      )}
    </span>
    <div>
      <input {...input} className="full-width" placeholder={placeholder} type={type} disabled={disabled} />
      {touched && ((error && <span className="error-message">{error}</span>) || (warning && <span className="warning-message">{warning}</span>))}
    </div>
  </div>
);

const fieldTypeRenderer = (type) => {
  switch (type) {
    case 'file': {
      return FileUploadField;
    }
    case 'toggle': {
      return ToggleSwitchField;
    }
    default:
      return renderTextField;
  }
};


class ContainerImageRegistryCredentialsForm extends React.PureComponent {
  constructor(props) {
    super(props);
    this.submitClickHandler = this.submitClickHandler.bind(this);
    this.resetForm = this.resetForm.bind(this);
  }

  resetForm() {
    const {
      reset,
      hide,
      errorMessageIm = Map(),
    } = this.props;
    if (errorMessageIm.size === 0) {
      reset();
      hide();
    }
  }

  submitClickHandler(values) {
    const {
      handleSubmit,
    } = this.props;
    handleSubmit(values)?.then?.(
      this.resetForm
    );
  }

  render() {
    const {
      pristine,
      submitting,
      registryType,
      loadingIm = Map(),
      errorMessageIm = Map(),
      credentialsFieldList,
      instructions: {
        message: instructionsMessage = '',
        title: instructionsTitle = '',
        link: instructionsLink = '',
        version = '',
      } = {},
      fileValuesIm = Map(),
      formValuesIm = Map(),
    } = this.props;

    // adding 'file' prefix for easy access using full field name
    // ex: fileValues['file.ca_cert']
    const fileValues = fileValuesIm.reduce((acc, value, key) => {
      acc[`file.${key}`] = value;
      return acc;
    }, {});

    const loading = loadingIm.get(registryType);
    const errorMessage = errorMessageIm.get(registryType);
    const hasInstructions = instructionsMessage.length > 0;

    return (
      <div className="credentials">
        <form
          onSubmit={this.submitClickHandler}
          className="df-modal-form"
        >
          {credentialsFieldList.map((field) => {
            const disableField = formValuesIm.getIn(field.disableOnField
              ? field.disableOnField.split('.') : ['']);
            const enableField = formValuesIm.getIn(field.enableOnField
              ? field.enableOnField.split('.') : ['']);
            if (disableField == true || enableField == false) {
              return null;
            }
            return (
              <Field
                key={field.name}
                name={field.name}
                component={fieldTypeRenderer(field.type)}
                fileName={fileValues[field.name] ? fileValues[field.name].name : ''}
                labelBefore={field.label}
                filenamePosition="before"
                validate={validateJsonFileType}
                {...field}
              />
            );
          })}
          {hasInstructions && (
            <div className="meta-description clear-margin-left">
              <div>
                {instructionsTitle}
              </div>
              <div className="small">
                {instructionsMessage}
              </div>
              <div className="small">
                <a href={instructionsLink}>
                  {instructionsLink}
                </a>
              </div>
            </div>
          )}
          {version && (
            <div
              className="meta-description clear-margin-left message warning-message"
            >
              Supported Versions:
              {' '}
              {version}
            </div>
          )
          }
          <div className="form-field relative">
            {(!loading && <button
              className="primary-btn-save-credentials"
              type="submit"
              disabled={pristine || submitting}
            >
              Save Credentials
            </button>
            )}
            {loading
              && <Loader style={{ left: '40%', top: '0%', position: 'relative' }} />
            }
          </div>
          <div>
            {errorMessage
              && (
                <span className="error-message">
                  {errorMessage}
                </span>
              )
            }
          </div>
        </form>
      </div>
    );
  }
}

const selector = formValueSelector('container-image-registry-credentials');
const allValueSelector = getFormValues('container-image-registry-credentials');
const mapStateToProps = (state) => {
  return {
    loadingIm: state.getIn(['cve', 'container_image_registry', 'add_credentials', 'loading']),
    errorMessageIm: state.getIn(['cve', 'container_image_registry', 'add_credentials', 'error', 'message']),
    fileValuesIm: selector(state, 'file'),
    formValuesIm: allValueSelector(state),
  }
};

export default connect(mapStateToProps)(reduxForm({
  form: 'container-image-registry-credentials',
})(ContainerImageRegistryCredentialsForm));
