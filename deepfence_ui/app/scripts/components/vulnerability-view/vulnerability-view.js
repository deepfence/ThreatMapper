/*eslint-disable*/

// React imports
import React from 'react';
import { connect } from 'react-redux';
import classnames from 'classnames';
import { Redirect } from 'react-router-dom';
import moment from 'moment';

// Custom component imports
import HeaderView from '../common/header-view/header-view';
import SideNavigation from '../common/side-navigation/side-navigation';
import NotificationToaster from '../common/notification-toaster/notification-toaster';
import CvBubbleChartView from './cv-bubble-chart-view/cv-bubble-chart-view';
import VulnerabilityTableView from './vulnerability-table-view/vulnerability-table-v2-view';
import CVEStatsPerImageViewContainer from './cve-stats-per-image-container';
import injectModalTrigger from '../common/generic-modal/modal-trigger-hoc';

import {
  IS_NOTIFICATION_CHECK_ENABLE,
  NOTIFICATION_POLLING_DURATION
} from '../../constants/visualization-config';
import {
  setActiveFilters,
  breadcrumbChange,
  toaster,
  getSBOMByScanIdAction
} from '../../actions/app-actions';
import { ADMIN_SIDE_NAV_MENU_COLLECTION, USER_SIDE_NAV_MENU_COLLECTION } from '../../constants/menu-collection';
import { getUserRole } from '../../helpers/auth-helper';
import { SBOMModal } from './sbom-modal';

class VulnerabilityView extends React.Component {
  constructor() {
    super();
    this.sideNavMenuCollection = (getUserRole() == 'admin') ? ADMIN_SIDE_NAV_MENU_COLLECTION : USER_SIDE_NAV_MENU_COLLECTION;
    this.state = {
      activeMenu: this.sideNavMenuCollection[0],
      redirectBack: false,
      isSBOMModalOpen: false,
      sbomData: null
    };
    this.handleBackButton = this.handleBackButton.bind(this);
    this.showSBOMModal = this.showSBOMModal.bind(this);
  }

  handleBackButton() {
    this.setState({
      redirectBack: true,
      link: '/vulnerability/scans?b',
    });
  }

  componentDidMount() {
    const {
      match: {
        params: {
          scanId,
        } = {},
      } = {},
    } = this.props;
    const unEscapedScanId = decodeURIComponent(scanId);
    const lastUnderscoreIndex = unEscapedScanId.lastIndexOf('_');
    const unEscapedImageName = unEscapedScanId.substring(0, lastUnderscoreIndex);
    let changedImageName = unEscapedImageName;
    if (unEscapedImageName.length > 20) {
      changedImageName = unEscapedImageName.substring(0, 19) + "...";
    }
    this.props.dispatch(breadcrumbChange([{ name: 'Vulnerability', link: '/vulnerability/scans' }, { name: changedImageName }]));
    if (IS_NOTIFICATION_CHECK_ENABLE) {
      let interval = setInterval(() => {
      }, NOTIFICATION_POLLING_DURATION * 1000);
      this.setState({ intervalObj: interval });
    }
  }

  UNSAFE_componentWillReceiveProps(newProps) {
    if ((newProps.isLicenseActive && !newProps.isLicenseExpired) &&
      (newProps.licenseResponse.license_status == 'expired' || newProps.licenseResponse.license_status == 'hosts_exceeded')) {
      this.setState({
        licenseResponse: newProps.licenseResponse,
        isLicenseExpiryModalVisible: true
      });
    } else {
      this.setState({
        isLicenseExpiryModalVisible: false
      });
    }
  }

  componentWillUnmount() {
    if (this.state.intervalObj) {
      clearInterval(this.state.intervalObj);
    }
    // Resetting table filters.
    this.props.dispatch(setActiveFilters(undefined, undefined));
  }

  async showSBOMModal() {
    const {
      dispatch,
      match: {
        params: {
          scanId,
        } = {},
      } = {},
    } = this.props;
    const unEscapedScanId = decodeURIComponent(scanId);
    const lastUnderscoreIndex = unEscapedScanId.lastIndexOf('_');
    const unEscapedImageName = unEscapedScanId.substring(0, lastUnderscoreIndex);

    dispatch(toaster('Getting SBOM data...'));
    const sbomResponse = await dispatch(getSBOMByScanIdAction({scanId: unEscapedScanId}));
    if (sbomResponse?.success && !sbomResponse?.error && sbomResponse?.data?.rows?.[0]) {
      const doc = sbomResponse.data.rows[0];
      const sbomJson = {
        artifacts: doc?._source?.artifacts,
        distro: doc?._source?.distro,
        source: doc?._source?.source,
      }
      this.setState({
        isSBOMModalOpen: true,
        sbomData: {
          sbomJson,
          nodeId: unEscapedImageName,
          scanId
        }
      });
    } else {
      dispatch(toaster('Error getting SBOM data.'));
    }
  }

  render() {
    const { redirectBack, link } = this.state;
    if (redirectBack) {
      return (<Redirect to={link} />);
    }
    const { isLicenseExpiryModalVisible } = this.state;
    const {
      isToasterVisible,
      match: {
        params: {
          scanId,
        } = {},
      } = {},
    } = this.props;
    const unEscapedScanId = decodeURIComponent(scanId);

    const lastUnderscoreIndex = unEscapedScanId.lastIndexOf('_');
    const unEscapedImageName = unEscapedScanId.substring(0, lastUnderscoreIndex);
    const timeOfScanStr = unEscapedScanId.substring(lastUnderscoreIndex + 1);
    const timeOfScan = moment.utc(timeOfScanStr);

    const { isSideNavCollapsed, isFiltersViewVisible } = this.props;
    const divClassName = classnames(
      { 'collapse-side-nav': isSideNavCollapsed },
      { 'expand-side-nav': !isSideNavCollapsed });
    const contentClassName = classnames(
      'content-header',
      { 'with-filters': isFiltersViewVisible },
    );
    let changedImageName;
    if (unEscapedImageName.length > 10) {
      changedImageName = unEscapedImageName.substring(0, 9) + "...";
    }
    return (
      <div>

        <SideNavigation navMenuCollection={this.sideNavMenuCollection} activeMenu={this.state.activeMenu} />

        <div className={`vulnerability-view-wrapper cve-details ${divClassName}`}>
          <HeaderView />
          <div className={("vulnerability-table-scan-wrapper", contentClassName)}>
            <div className=''>
              <div className="title vulnerability-scan-wrapper">
                Vulnerabilities
                <div className="sub-title">
                  {unEscapedImageName} (scanned {timeOfScan.fromNow()}) {" "}&middot;{" "}
                  <span className='sbom-link' onClick={() => {
                    this.showSBOMModal()
                  }}>
                    <i className='fa fa-list'/> Show SBOM
                  </span>
                </div>
              </div>
            </div>

            <CVEStatsPerImageViewContainer
              imageName={unEscapedImageName}
              scanId={unEscapedScanId}
            />
            <CvBubbleChartView
              imageName={unEscapedImageName}
              scanId={unEscapedScanId}
            />
          </div>
          <div className="vulnerability-view-table-wrapper">
            <VulnerabilityTableView
              imageName={unEscapedImageName}
              scanId={unEscapedScanId}
            />
          </div>
        </div>

        {
          this.state.isSBOMModalOpen && this.state.sbomData ? (
            <SBOMModal
              data={this.state.sbomData}
              onRequestClose={() => {
                this.setState({
                  isSBOMModalOpen: false,
                  sbomData: null
                });
              }}
            />
          ) : null
        }

        {isToasterVisible && <NotificationToaster />}

      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    hosts: state.get('hosts'),
    isToasterVisible: state.get('isToasterVisible'),
    isSideNavCollapsed: state.get('isSideNavCollapsed'),
    isFiltersViewVisible: state.get('isFiltersViewVisible'),
  };
}

export default connect(
  mapStateToProps
)(injectModalTrigger(VulnerabilityView));
