/* eslint-disable */
import React from 'react';
import { connect } from 'react-redux';
import { nodeFilterValueSelector } from '../../selectors/node-filters';
import {
  reportGenerateAction,
  reportDownloadStatusAction,
  downloadReportAction,
  toaster,
  getSBOMByScanIdAction,
} from '../../actions/app-actions';
import CVEImageReport from './cve-image-report';
import { downloadBlobAsFile } from '../../utils/file-utils';
import { SBOMModal } from './sbom-modal';

class CVEImageReportContainer extends React.PureComponent {
  constructor(props) {
    super(props);
    this.handleDownload = this.handleDownload.bind(this);
    this.handleDownloadSBOM = this.handleDownloadSBOM.bind(this);
    this.handleShowSBOM = this.handleShowSBOM.bind(this);
    this.state = {
      isSBOMModalOpen: false,
      sbomData: null,
    }
  }

  async handleDownload(params) {
    const {
      reportGenerateAction,
      reportDownloadStatusAction,
      toaster,
      downloadReportAction
    } = this.props;

    const { scanId = '', nodeType = '' } = params;

    const apiParams = {
      action: 'download_report',
      node_type: nodeType,
      add_hist: false,
      action_args: {
        resources: [
          {
            type: 'cve',
            filter: {
              scan_id: [scanId],
            },
          },
        ],
        filters: {
          type: [nodeType],
        },
      },
    };

    toaster('Generating Report ...');
    const reportGenerateResponse = await reportGenerateAction(apiParams);
    if (reportGenerateResponse.success) {
      const reportDownloadStatusResponse = await reportDownloadStatusAction();
      if (reportDownloadStatusResponse?.data?.[0]) {
        let tries = 0
        const totalTries = 3
        while (tries < totalTries) {
          await new Promise(resolve => setTimeout(resolve, 2000));
          const res = await downloadReportAction({
            path: `/data/xlsx-report/${reportDownloadStatusResponse.data[0].report_id}/report.xlsx`,
          });
          if (!res) {
            toaster('Dowloading ...');
            tries = 3
          } else if (tries + 1 < totalTries) {
            toaster('File not generated yet, Trying again ..');
            tries = tries + 1
          } else {
            toaster('File generation failed, Try again later');
            tries = tries + 1
          }
        }
      } else {
        toaster('Report generation status failed');
      }
    } else {
      toaster('Generation failed');
    }
  }

  async handleDownloadSBOM(params) {
    const {
      toaster,
      getSBOMByScanIdAction,
    } = this.props;

    const { scanId = '' } = params;

    toaster('Downloading SBOM ...');
    const sbomResponse = await getSBOMByScanIdAction({
      scanId,
      action: 'download'
    });
    if (sbomResponse?.ok) {
      const blob = await sbomResponse?.blob();
      downloadBlobAsFile(`SBOM-${scanId}.json`, blob);
    } else {
      toaster('SBOM download failed');
    }
  }

  async handleShowSBOM(params) {
    const {
      scanId,
    } = params;
    const {
      toaster,
      getSBOMByScanIdAction,
    } = this.props;
    const lastUnderscoreIndex = scanId.lastIndexOf('_');
    const unEscapedImageName = scanId.substring(0, lastUnderscoreIndex);

    toaster('Getting SBOM data...');
    const sbomResponse = await getSBOMByScanIdAction({ scanId });
    if (sbomResponse?.success && !sbomResponse?.error && sbomResponse?.data?.rows?.[0]) {
      const doc = sbomResponse.data.rows[0];
      const sbomJson = {
        artifacts: doc?._source?.artifacts,
        distro: doc?._source?.distro,
        source: doc?._source?.source,
      }
      this.setState({
        isSBOMModalOpen: true,
        sbomData: {
          sbomJson,
          nodeId: unEscapedImageName,
          scanId
        }
      });
    } else {
      toaster('Error getting SBOM data.');
    }
  }

  render() {
    const { reportView, ...rest } = this.props;
    const data = reportView.get('images');
    const total = reportView.get('total');
    const { isToasterVisible } = this.props;
    return (
      <div>
        <CVEImageReport
          data={data}
          total={total}
          handleDownload={this.handleDownload}
          handleDownloadSBOM={this.handleDownloadSBOM}
          handleShowSBOM={this.handleShowSBOM}
          isToasterVisible={isToasterVisible}
          {...rest}
        />
        {
          this.state.isSBOMModalOpen && this.state.sbomData ? (
            <SBOMModal
              data={this.state.sbomData}
              onRequestClose={() => {
                this.setState({
                  isSBOMModalOpen: false,
                  sbomData: null
                });
              }}
            />
          ) : null
        }
      </div>
    );
  }
}

function mapStateToProps(state) {
  const reportView = state.getIn(['cve', 'image_report_view']);
  const savedTablePageNumber = state.getIn([
    'cve',
    'image_report_table',
    'state',
    'page_number',
  ]);
  return {
    reportView,
    savedTablePageNumber,
    filterValues: nodeFilterValueSelector(state),
    isToasterVisible: state.get('isToasterVisible'),
  };
}

export default connect(mapStateToProps, {
  reportGenerateAction,
  getSBOMByScanIdAction,
  reportDownloadStatusAction,
  downloadReportAction,
  toaster
})(CVEImageReportContainer);
