/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */
import React from 'react';
import Tippy from '@tippyjs/react';
import { dateTimeFormat } from '../../utils/time-utils';
import { DfTableV2 } from '../common/df-table-v2'
import {
  showModal,
  deleteScanActions,
  toaster,
} from '../../actions/app-actions';
import NotificationToaster from '../common/notification-toaster/notification-toaster';
import MORE_IMAGE from '../../../images/more.svg';

class CVEImageReportRowDetail extends React.PureComponent {
  constructor(props) {
    super(props);
    this.handleDeleteDialogScans = this.handleDeleteDialogScans.bind(this);
    this.deleteScanActions = this.deleteScanActions.bind(this);
  }

  handleDeleteDialogScans(scanId) {
    const params = {
      dialogTitle: 'Delete Results ?',
      dialogBody: 'Are you sure you want to delete?',
      confirmButtonText: 'Yes',
      cancelButtonText: 'No',
      onConfirmButtonClick: () => this.deleteScanActions(scanId),
      contentStyles: {
        width: '375px',
      },
    };
    this.props.dispatch(showModal('DIALOG_MODAL', params));
  }


  deleteScanActions(scanId) {
    const params = {
      scan_id: scanId,
      doc_type: 'cve',
      time_unit: 'all',
      number: '0',
    };
    const successHandler = (response) => {
      const {
        success,
        error: apiError,
      } = response;
      if (success) {
        this.props.dispatch(toaster('Successfully deleted'));
        setTimeout(this.props.onDelete, 2000);
      } else {
        this.props.dispatch(toaster(`ERROR: ${apiError.message}`));
      }
    };
    const apiErrorHandler = () => {
      this.props.dispatch(toaster('Something went wrong'));
    };
    return this.props.dispatch(deleteScanActions(params)).then(successHandler, apiErrorHandler);
  }

  render() {
    const {
      data,
      rowClickHandler,
      handleDownload,
      handleDownloadSBOM,
      handleShowSBOM,
      isToasterVisible,
    } = this.props;

    return (
      <div>
        <DfTableV2
          data={data}
          onRowClick={(row) => rowClickHandler(row.original.scan_id)}
          enableSorting
          columns={[
            {
              Header: '',
              accessor: 'cve_scan_message',
              minWidth: 178,
              Cell: row => (
                <div
                  className="truncate"
                  title={row.value}>
                  {row.value}
                </div>
              ),
            },
            {
              Header: 'Timestamp',
              accessor: row => (
                dateTimeFormat(row.time_stamp)
              ),
              id: 'timestamp',
            },
            {
              Header: 'Status',
              accessor: 'action',
              minWidth: 120,
              Cell: cell => (
                <div className={cell.value === 'COMPLETED' ? 'status-success' : 'status-failed'}>
                  {cell.value}
                </div>
              ),
            },
            {
              Header: 'Total',
              accessor: 'total',
              maxWidth: 80,
              sortType: 'number'
            },
            {
              Header: 'Score',
              accessor: row => (
                row.cve_score ? row.cve_score.toFixed(2) : 0
              ),
              id: 'cveScore',
              maxWidth: 80,
              sortType: 'number'
            },
            {
              Header: 'Critical',
              accessor: 'severity.critical',
              Cell: row => (
                <div>
                  <div className="cve-severity-box-wrap-critical value">
                    {row.value || 0}
                  </div>
                </div>
              ),
              maxWidth: 80,
              sortType: 'number'
            },
            {
              Header: 'High',
              accessor: 'severity.high',
              Cell: row => (
                <div>
                  <div className="cve-severity-box-wrap-high value">
                    {row.value || 0}
                  </div>
                </div>
              ),
              maxWidth: 80,
              sortType: 'number'
            },
            {
              Header: 'Medium',
              accessor: 'severity.medium',
              Cell: row => (
                <div>
                  <div className="cve-severity-box-wrap-medium value">
                    {row.value || 0}
                  </div>
                </div>
              ),
              maxWidth: 80,
              sortType: 'number'
            },
            {
              Header: 'Low',
              accessor: 'severity.low',
              Cell: row => (
                <div>
                  <div className="cve-severity-box-wrap-low value">
                    {row.value || 0}
                  </div>
                </div>
              ),
              maxWidth: 80,
              sortType: 'number'
            },
            {
              Header: '',
              width: 60,
              accessor: 'scan_id',
              disableSortBy: true,
              Cell: cell => (
                  <Tippy
                    arrow
                    interactive
                    trigger='click'
                    hideOnClick
                    placement='bottom'
                    zIndex={1}
                    allowHTML
                    appendTo={document.body}
                    content={(
                      <div className='row-action-menu'>
                        <div className="row-action-dropdown-wrapper">
                          <div className="row-action-dropdown-item" onClick={(e) => {
                            e.stopPropagation();
                            handleDownload(cell.value, cell.row.original.node_type);
                          }}>
                            <div className="row-action-item-icon">
                              <i className="fa fa-download" aria-hidden="true" />
                            </div>
                            <div className="row-action-item-text">
                              Download Report
                            </div>
                          </div>
                          <div className="row-action-dropdown-item" onClick={(e) => {
                            e.stopPropagation();
                            handleShowSBOM(cell.value);
                          }}>
                            <div className="row-action-item-icon">
                              <i className="fa fa-eye" aria-hidden="true" />
                            </div>
                            <div className="row-action-item-text">
                              View SBOM
                            </div>
                          </div>
                          <div className="row-action-dropdown-item" onClick={(e) => {
                            e.stopPropagation();
                            handleDownloadSBOM(cell.value);
                          }}>
                            <div className="row-action-item-icon">
                              <i className="fa fa-list" aria-hidden="true" />
                            </div>
                            <div className="row-action-item-text">
                              Download SBOM
                            </div>
                          </div>
                          <div className="row-action-dropdown-item" onClick={ev => {
                            ev.stopPropagation();
                            this.handleDeleteDialogScans(cell.value);
                          }}>
                            <div className="row-action-item-icon">
                              <i className="fa fa-trash-o" aria-hidden="true" style={{ color: 'red' }} />
                            </div>
                            <div className="row-action-item-text">
                              Delete
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  >
                    <img
                      src={MORE_IMAGE}
                      alt="more"
                      className="table-row-actions-target"
                      onClick={e => {
                        e.stopPropagation();
                      }}
                    />
                  </Tippy>
              ),
            },
          ]}
        />
        {isToasterVisible && <NotificationToaster />}
      </div>

    );
  }
}

export default CVEImageReportRowDetail;
