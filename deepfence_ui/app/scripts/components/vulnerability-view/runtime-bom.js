/* eslint-disable import/order */
/* eslint-disable import/named */
import React, { useEffect } from 'react';
import { DfTableV2 } from '../common/df-table-v2';
import pollable from '../common/header-view/pollable';



import { getRuntimeBomAction } from '../../actions/app-actions';
import { useDispatch, useSelector } from 'react-redux';
import { severitySort } from '../../utils/table-utils';

const humanizeString = str => str.replace(/(_)/g, ' ').replace(/^./, st => st.toUpperCase());

const RuntimeBom = (props) => {

  const dispatch = useDispatch();
  useEffect(() => {
    const { registerPolling, startPolling } = props;
    registerPolling(getRuntimeBomData);
    startPolling();
  }, [])

  useEffect(
    () => () => {
      const { stopPolling } = props;
      stopPolling();
    },
    []
  );
  const tableChangeHandler = (params = {}) => {
    const { updatePollParams } = props;
    updatePollParams(params);
  };

  const runtimeBomData = useSelector(state => state.get('runtime_bom')) || [];
  const getRuntimeBomData = (pollParams = {}) => {
    const {
      page = 0,
      pageSize = 15,
      globalSearchQuery,
    } = pollParams;

    const params = {
      lucene_query: globalSearchQuery,
      size: pageSize,
      start_index: page * pageSize
    };
    return dispatch(getRuntimeBomAction(params));
  }

  const handlePageChange = pageNumber => {
    tableChangeHandler({
      page: pageNumber
    });
  };

  const tableData = runtimeBomData.data || [];

  const renderSubComponent = (rowInfo) => {
    return (
      <DfTableV2
        data={rowInfo.row.original.packages}
        showPagination
        noDataText='No rows found'
        enableSorting
        columns={[
          {
            Header: 'Package Name',
            accessor: 'package_name',
            maxWidth: 200,
            Cell: row => (
              <div
                className="truncate"
                title={row.value}>
                {row.value}
              </div>
            ),
          },
          {
            Header: 'File Path',
            accessor: 'filepath',
            maxWidth: 200,
            Cell: row => (
              <div
                className="truncate"
                title={row.value}>
                {row.value}
              </div>
            ),
          },
          {
            Header: 'Top CVE ID',
            accessor: 'cve_id',
            maxWidth: 200,
            Cell: row => (
              <div
                className="truncate"
                title={row.value}>
                {row.value}
              </div>
            ),
          },
          {
            Header: 'Vulnerability Status',
            accessor: 'vulnerability_status',
            Cell: cell => {
              return (<div className={`${cell.value}-severity`} title={cell.row.original.top_cves}>
                {humanizeString(cell.value)}
              </div>
              )
            },
            maxWidth: 50,
            sortType: severitySort
          },
        ]} />
    )
  }


  return (
    <div className="">
      <div className="">
        <div className="report" />
        <div className="table severity-report-table">
          <DfTableV2
            data={tableData}
            showPagination
            enableSorting
            defaultPageSize={15}
            manual
            onPageChange={pageNumber => handlePageChange(pageNumber)}
            noDataText='No rows found'
            renderRowSubComponent={(row) => renderSubComponent(row)}
            totalRows={runtimeBomData.total}
            columns={[
              {
                Header: 'Node Type',
                accessor: 'node_type',
                Cell: row => (
                  <div
                    className="truncate"
                    title={row.value}>
                    {row.value}
                  </div>
                ),
              },
              {
                Header: 'Node',
                accessor: 'node_name',
                Cell: row => (
                  <div
                    className="truncate"
                    title={row.value}>
                    {row.value}
                  </div>
                ),
              },
            ]}
          />
        </div>
      </div>
    </div>
  )
}

export default pollable()(RuntimeBom);
