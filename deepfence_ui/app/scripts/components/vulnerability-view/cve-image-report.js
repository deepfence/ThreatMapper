import React from 'react';
import { Redirect } from 'react-router-dom';
import { connect } from 'react-redux';
import { isEqual } from 'lodash';
import {
  getCVEImageReportAction,
  saveImageReportTableStateAction,
} from '../../actions/app-actions';
import pollable from '../common/header-view/pollable';
import CVEImageReportRowDetail from './cve-image-report-row-detail';
import NodesFilter from '../../charts/nodes-filter';
import { DfTableV2 } from '../common/df-table-v2'
import { resetTablePageIndexSelector } from '../../selectors/node-filters';

class CVEImageReport extends React.PureComponent {
  constructor(props) {
    super(props);
    this.rowClickHandler = this.rowClickHandler.bind(this);
    const arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    const defaultExpandedRows = arr.reduce((acc, el) => {
      acc[el] = {};
      return acc;
    }, {});
    this.defaultExpandedRows = defaultExpandedRows;
    this.handlePageChange = this.handlePageChange.bind(this);
    this.handleDownload = this.handleDownload.bind(this);
    this.handleDownloadSBOM = this.handleDownloadSBOM.bind(this);
    this.handleShowSBOM = this.handleShowSBOM.bind(this);
    this.tableChangeHandler = this.tableChangeHandler.bind(this);
    this.setRowCount = this.setRowCount.bind(this);
    this.state = {};
    this.getCVEImageReport = this.getCVEImageReport.bind(this);
  }

  columns = [{
    Header: 'Node Type',
    accessor: 'node_type',
    Cell: (row) => {
      let displayValue = row.value || 'container image';
      displayValue = displayValue.replace('_', ' ');
      return displayValue;
    },
    width: 40,
  },
  {
    Header: 'Image',
    accessor: 'image_name',
    width: 60,
    Cell: row => (
      <div
        className="truncate"
        title={row.value}>
        {!row.value ? "-" : row.value}
      </div>
    ),
  },
  {
    Header: 'Host',
    accessor: 'host_name',
    width: 60,
    Cell: row => (
      <div
        className="truncate"
        title={row.value}>
        {!row.value ? "-" : row.value}
      </div>
    ),
  },
  {
    Header: 'Container',
    accessor: 'container_name',
    width: 60,
    Cell: row => (
      <div
        className="truncate"
        title={row.value}>
        {!row.value ? "-" : row.value}
      </div>
    ),
  },
  {
    Header: 'Registry',
    accessor: 'registry_name',
    width: 60,
    Cell: row => (
      <div
        className="truncate"
        title={row.value}>
        {!row.value ? "-" : row.value}
      </div>
    ),
  },
  {
    Header: 'Pass Status',
    accessor: row => (
      `${row.total_count - row.error_count}/${row.total_count} PASSED`
    ),
    Cell: ({ row, value }) => (
      <div className={row?.original?.error_count === 0 ? 'status-success' : 'status-failed'}>
        {value}
      </div>
    ),
    id: 'status',
    width: 60,
  }]

  UNSAFE_componentWillReceiveProps(newProps) {
    const {
      filterValues: currentFiltervalues,
    } = this.props;
    if (newProps.filterValues && currentFiltervalues !== newProps.filterValues) {
      this.getCVEImageReport({
        filters: newProps.filterValues,
      });
      this.handlePageChange(0);
    }
    if (!isEqual(newProps.resetPageIndexData, this.props.resetPageIndexData)) {
      /* eslint-disable */
      this.setState({
        page: 0
      })
    }
  }

  componentDidMount() {
    // pollable: register the function which needs to be polled
    const {
      registerPolling,
      startPolling,
      dispatch,
      urlLocation: {
        search = '',
      } = {},
    } = this.props;
    registerPolling(this.getCVEImageReport);
    startPolling();
    if (search.length === 0) {
      // set save table page number to 0 if there is no search query
      // This resets the page number if user navigates to this page for the 1st time.
      // If user navigates from vulnerability details page, that sets a search query
      // and the page number is not reset. it will should previous page number.
      dispatch(saveImageReportTableStateAction({ pageNumber: 0 }));
    }
  }

  componentWillUnmount() {
    // pollable: stop polling on unmount
    const { stopPolling } = this.props;
    stopPolling();
  }

  handleDownload(scanId, nodeType) {
    const {
      handleDownload,
    } = this.props;
    return handleDownload({
      scanId,
      nodeType,
    });
  }

  handleDownloadSBOM(scanId) {
    const {
      handleDownloadSBOM,
    } = this.props;
    return handleDownloadSBOM({
      scanId,
    });
  }

  handleShowSBOM(scanId) {
    const {
      handleShowSBOM,
    } = this.props;
    return handleShowSBOM({
      scanId,
    });
  }

  rowClickHandler(scanId) {
    this.setState({
      redirect: true,
      link: `/vulnerability/details/${encodeURIComponent(scanId)}`,
    });
  }

  tableChangeHandler(params = {}) {
    // pollable: on any change in the DF Table params, update the polling params,
    // which will update and restart polling with new params.
    const { updatePollParams } = this.props;
    updatePollParams(params);
  }

  getCVEImageReport(pollParams = {}) {
    const {
      dispatch,
      filterValues = {},
    } = this.props;

    const {
      page = 0,
      pageSize = 10,
      globalSearchQuery,
      alertPanelHistoryBound = this.props.alertPanelHistoryBound || {},
    } = pollParams;

    const tableFilters = pollParams.filters || filterValues;
    const nonEmptyFilters = Object.keys(tableFilters).filter(
      key => tableFilters[key].length
    ).reduce((acc, key) => {
      // replacing back the dot which was removed redux-form as it considers that a nested field.
      acc[[key.replace('-', '.')]] = tableFilters[key];
      return acc;
    }, {});

    const params = {
      lucene_query: globalSearchQuery,
      // Conditionally adding number and time_unit fields
      ...(alertPanelHistoryBound.value
        ? { number: alertPanelHistoryBound.value.number } : {}),
      ...(alertPanelHistoryBound.value
        ? { time_unit: alertPanelHistoryBound.value.time_unit } : {}),
      node_filters: nonEmptyFilters,
      start_index: page ? page * pageSize : page,
      size: pageSize,
    };
    return dispatch(getCVEImageReportAction(params));
  }


  handlePageChange(pageNumber) {
    this.setState({
      page: pageNumber
    })
    this.tableChangeHandler({
      page: pageNumber
    });
    const {
      dispatch,
    } = this.props;
    dispatch(saveImageReportTableStateAction({ pageNumber }));
  }

  setRowCount(e) {
    const { updatePollParams } = this.props;
    const rowCount = Number(e.target.value);
    this.setState({
      rowCountValue: rowCount
    }, () => {
      updatePollParams({
        pageSize: rowCount,
        page: 0,
      });
    });
  }

  renderSubComponent({ row }) {
    return (
      <CVEImageReportRowDetail
        data={row.original.scans}
        rowClickHandler={this.rowClickHandler}
        handleDownload={this.handleDownload}
        handleDownloadSBOM={this.handleDownloadSBOM}
        handleShowSBOM={this.handleShowSBOM}
        dispatch={this.props.dispatch}
        isToasterVisible={this.props.isToasterVisible}
        onDelete={this.getCVEImageReport}
      />)
  }

  render() {
    const { redirect, link, rowCountValue = 10 } = this.state;
    if (redirect) {
      return (<Redirect to={link} />);
    }

    const {
      data = [],
      total,
      savedTablePageNumber = 0, // if page number is saved, pick it else start from 0
    } = this.props;

    const rowCounts = [{
      label: 10,
      value: 10
    },
    {
      label: 25,
      value: 25
    },
    {
      label: 50,
      value: 50
    },
    {
      label: 100,
      value: 100
    }];
    return (
      <div>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <div className="dataTables_length d-flex justify-content-start" style={{width: 'auto'}}>
            <label htmlFor="true">
              {'Show '}
              <select
                style={{
                  backgroundColor: '#252525',
                  color: 'white',
                  borderRadius: '4px',
                  borderColor: '#252525'
                }}
                onChange={this.setRowCount}>
                {rowCounts.map(el => (<option key={el.value} value={el.value}>{el.label}</option>))}
              </select>
              {' Entries'}
            </label>
          </div>
          <NodesFilter
            resourceType="cve"
          />
        </div>
        <DfTableV2
          data={data}
          columns={this.columns}
          renderRowSubComponent={({ row }) => this.renderSubComponent({ row })}
          showPagination
          manual
          defaultPageSize={rowCountValue}
          page={this.state.page}
          totalRows={total}
          onPageChange={this.handlePageChange}
        />
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    resetPageIndexData: resetTablePageIndexSelector(state),
  };
}

const connected = connect(mapStateToProps)(CVEImageReport);

export default pollable()(connected);
