/* eslint-disable no-unused-vars */
/* eslint-disable arrow-body-style */
import React, { useCallback } from 'react';
import Tippy from '@tippyjs/react';
import { useDispatch } from 'react-redux';
import { DetailModal } from '../../common/detail-modal';
import { DetailModalHeader } from '../../common/detail-modal/header';
import { ModalBody } from '../../common/detail-modal/body';
import { downloadBlobAsFile } from '../../../utils/file-utils';
import { DfTableV2 } from '../../common/df-table-v2';
import { getSBOMByScanIdAction, toaster } from '../../../actions/app-actions';

export const SBOMModal = ({
  data,
  onRequestClose,
}) => {
  const {
    sbomJson,
    nodeId,
    scanId
  } = data;
  const dispatch = useDispatch();

  const downloadSbom = useCallback(() => {
    const scanIdDecoded = decodeURIComponent(scanId);
    dispatch(toaster('Download will start shortly, please wait...'));
    dispatch(getSBOMByScanIdAction({
      scanId: scanIdDecoded,
      action: 'download'
    })).then((response) => {
      if (response?.ok) {
        return response?.blob();
      }
      throw new Error('response is not ok.');
    }).then((blob) => {
      downloadBlobAsFile(`SBOM-${scanIdDecoded}.json`, blob);
    }).catch(() => {
      dispatch(toaster('SBOM download failed...'));
    });
  }, [scanId]);

  return (
    <DetailModal isOpen onRequestClose={onRequestClose}>
      <DetailModalHeader
        onRequestClose={onRequestClose}
        data={[{
          key: <div>SBOM for</div>,
          value: nodeId,
          valueAsText: nodeId
        }]}
        actions={[
          {
            title: 'Download JSON',
            onClick: downloadSbom,
            label: 'Download JSON',
            icon: <i className='fa fa-download' />,
          }
        ]}
      />
      <ModalBody>
        <DfTableV2
          columns={[{
            Header: 'Package Name',
            accessor: 'name',
            width: 250,
          }, {
            Header: 'Version',
            accessor: 'version',
            width: 100,
            disableSortBy: true
          }, {
            Header: 'Licences',
            accessor: 'licenses',
            Cell: (row) => {
              const val = row.value?.filter?.((v) => {
                return !!v?.trim?.()?.length;
              });
              if (!val.length) return 'Unknown';
              if (val.length <= 2) return val.join(', ');
              const firstTwo = val.slice(0, 2);
              const rest = val.slice(2);
              return (
                <Tippy content={val.join(', ')} placement="bottom" trigger="mouseenter" interactive>
                  <div style={{ cursor: 'pointer' }}>
                    <span className='truncate'>
                      {
                        firstTwo.join(', ')
                      }
                    </span>
                    <i>
                      {` & ${rest.length} more`}
                    </i>
                  </div>
                </Tippy>
              );
            },
            disableSortBy: true,
            width: 300
          }, {
            Header: 'Filename',
            accessor: 'locations',
            Cell: (row) => {
              const val = row.value?.filter?.((v) => {
               return !!v?.path?.trim?.()?.length;
              });
              if (!val?.length) return 'Unknown';
              if (val.length > 0) return val.map((v) => v.path).join(', ');
            },
            disableSortBy: true,
            width: 300
          }]}
          data={sbomJson?.artifacts ?? []}
          defaultPageSize={15}
          noDataText="No SBOM data"
          showPagination
          enableSorting
          noMargin
        />
      </ModalBody>
    </DetailModal>
  )
}

