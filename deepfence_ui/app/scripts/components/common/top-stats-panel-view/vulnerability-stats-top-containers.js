/* eslint-disable react/destructuring-assignment */
/* eslint-disable */
import React from 'react';
import {connect} from 'react-redux';
import {
  setSearchQuery,
} from '../../../actions/app-actions';
import {constructGlobalSearchQuery} from '../../../utils/search-utils';
import StackedChart, { sortChartNodes } from '../charts/stacked-chart/index';

// HACK-NOTE: This component relies on data fetched by vulnerability-stats-top-hosts.js
// Make sure not to deploy this as a standalone component. It should always
// accompany the other component.
// This hack saves use from writing a new API call

class VulnerabilityStatsTopHosts extends React.PureComponent {
  constructor(props) {
    super(props);
    this.getTopVulnerableActiveHosts = this.getTopVulnerableActiveHosts.bind(this);
    this.sectionClickHandler = this.sectionClickHandler.bind(this);
  }

  // As there doesn't exist a field in vulnerability document to check if its a host or
  // container, we make use of data from another API which correlates data with Scope topology.
  // This component and vulnerability-stats-top-hosts.js component get data from same API, so we
  // disabled the API call from this and just read the store populated by the other component.
  // As there will no API call, we can use this component to do the other dependent API call
  // which the selectors/top-vulnerable-nodes use.
  getTopVulnerableActiveHosts(params = {}) {
    const {
      alertPanelHistoryBound = this.props.alertPanelHistoryBound || [],
      globalSearchQuery = this.props.globalSearchQuery || [],
    } = params;

    const {
      getTopVulnerableActiveHostsAction: action,
    } = this.props;

    const apiParams = {
      luceneQuery: globalSearchQuery,
      // Conditionally adding number and time_unit fields
      ...(alertPanelHistoryBound.value
        ? {number: alertPanelHistoryBound.value.number} : {}),
      ...(alertPanelHistoryBound.value
        ? {timeUnit: alertPanelHistoryBound.value.time_unit} : {}),
    };

    action(apiParams);
  }

  sectionClickHandler(point) {
    if (!point.type) {
      return;
    }
    const {
      globalSearchQuery: existingQuery = [],
      dispatch,
    } = this.props;

    let searchQuery = [];
    if (point.type) {
      const severityParams = {
        cve_severity: point.type,
      };
      searchQuery = constructGlobalSearchQuery(existingQuery, severityParams);
    }

    const globalSearchQuery = {
      searchQuery,
    };
    dispatch(setSearchQuery(globalSearchQuery));
  }

  render() {
    const {nodes = []} = this.props;
    const isDataAvailable = nodes.length > 0;
    return (
      <div className="compliance-pass-stats flex-item flex-item-box margin-right-box">
        {!isDataAvailable
          && (
          <div className="info" style={{zIndex: 10}}>
            no data available
          </div>
          )
        }
        <div className="name heading">Top Vulnerable Running Containers</div>
        {isDataAvailable && <StackedChart
          data={sortChartNodes(nodes)}
          chartHeight={200}
          onSectionClick={this.sectionClickHandler}
        />}
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    alertPanelHistoryBound: state.get('alertPanelHistoryBound') || [],
    globalSearchQuery: state.get('globalSearchQuery') || [],
    nodes: state.getIn(['cve', 'top_vulnerable_nodes', 'container_data']),
  };
}

export default connect(mapStateToProps)(VulnerabilityStatsTopHosts);
