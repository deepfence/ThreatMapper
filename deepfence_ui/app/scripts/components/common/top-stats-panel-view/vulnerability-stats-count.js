/* eslint-disable */
import {connect} from 'react-redux';
import React from 'react';
import {constructGlobalSearchQuery} from '../../../utils/search-utils';
import {setSearchQuery} from '../../../actions/app-actions';

class VulnerabilityStatsCount extends React.PureComponent {
  constructor(props) {
    super(props);
    this.statsClickHandler = this.statsClickHandler.bind(this);
  }

  statsClickHandler(severity) {
    const {
      globalSearchQuery: existingQuery = [],
      dispatch,
    } = this.props;

    const searchQuery = constructGlobalSearchQuery(existingQuery, {
      cve_severity: severity,
    });

    const globalSearchQuery = {
      searchQuery,
    };
    dispatch(setSearchQuery(globalSearchQuery));
  }

  render() {
    const {
      summaryStats,
      activeTab,
      topExploitableCounts
    } = this.props;

    let total = 0;
    let critical = 0;
    let high = 0;
    let medium = 0;
    let low = 0;

    if (activeTab === 'vulnerabilities') {
      total = topExploitableCounts?.total ?? total;
      critical = topExploitableCounts?.critical ?? critical;
      high = topExploitableCounts?.high ?? high;
      medium = topExploitableCounts?.medium ?? medium;
      low = topExploitableCounts?.low ?? low;
    } else if(summaryStats !== undefined) {
      summaryStats.map(s=>{
        switch(s.type){
          case "medium": medium=medium+s.value;break;
          case "low": low=low+s.value;break;
          case "high": high=high+s.value;break;
          case "critical": critical=critical+s.value;break;
        }
      })
    }
    total = low + medium + high + critical;

    return (
      <div className="compliance-stats-count flex-item">
        <div className="stats-table">
          <div className="name heading">
            {activeTab === 'vulnerabilities' ? 'Most Exploitable Vulnerabilities' : 'Unique Vulnerabilities'}
          </div>
          <div className="total">
            <div className="value">
              {' '}
              {total}
              {' '}
            </div>
            <div className="label"> Total </div>
          </div>
          <div className="checktype-breakup-vulnerability">
            <div className="severity-item" onClick={() => this.statsClickHandler('critical')} aria-hidden="true">
              <div className="critical value">
                {' '}
                {critical}
                {' '}
              </div>
              <div className="label"> Critical </div>
            </div>
            <div className="severity-item" onClick={() => this.statsClickHandler('high')} aria-hidden="true">
              <div className="high value">
                {' '}
                {high}
                {' '}
              </div>
              <div className="label"> High </div>
            </div>
            <div className="severity-item" onClick={() => this.statsClickHandler('medium')} aria-hidden="true">
              <div className="medium value">
                {' '}
                {medium}
                {' '}
              </div>
              <div className="label"> Medium </div>
            </div>
            <div className="severity-item" onClick={() => this.statsClickHandler('low')} aria-hidden="true">
              <div className="low value">
                {' '}
                {low}
                {' '}
              </div>
              <div className="label"> Low </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

const mapStateToProps = state => ({
  summaryStats: state.getIn(['cve', 'severity_report_view', 'summary_stats']),
  topExploitableCounts: state.getIn(['cve', 'top_exploits_counts']),
  globalSearchQuery: state.get('globalSearchQuery')
});
export default connect(mapStateToProps)(VulnerabilityStatsCount);
