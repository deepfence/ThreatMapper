package router

import (
	"context"
	"fmt"
	"os"

	pb "github.com/deepfence/agent-plugins-grpc/srcgo"
	"google.golang.org/grpc"

	ctl "github.com/deepfence/golang_deepfence_sdk/utils/controls"
	"github.com/deepfence/golang_deepfence_sdk/utils/log"
)

const (
	ebpfMalwareSocketPath         = "/tmp/yara-hunter.sock"
	ssEbpfMalwareLogPath          = "/var/log/fenced/malwareScanner.log"
	defaultMalwareScanConcurrency = 1
)

func getDfInstallDir() string {
	installDir, exists := os.LookupEnv("DF_INSTALL_DIR")
	if exists {
		return installDir
	} else {
		return ""
	}
}

var (
	MalwareCertPath           = "/etc/filebeat/filebeat.crt"
	malwareScanFilename       = getDfInstallDir() + "/var/log/fenced/malware-scan/malware_scan.log"
	malwareScanStatusFilename = getDfInstallDir() + "/var/log/fenced/malware-scan-log/malware_scan_log.log"
)

var (
	MalwareScanConcurrency int
	MalwareMgmtConsoleUrl  string
	MalwareDeepfenceKey    string
	MalwareScanDir         string
)

type malwareScanParameters struct {
	client      pb.MalwareScannerClient
	req         *pb.MalwareRequest
	controlArgs map[string]string
	hostName    string
}

func init() {
	MalwareMgmtConsoleUrl = os.Getenv("MGMT_CONSOLE_URL")
	consolePort := os.Getenv("MGMT_CONSOLE_PORT")
	if consolePort != "" && consolePort != "443" {
		MalwareMgmtConsoleUrl += ":" + consolePort
	}
	MalwareDeepfenceKey = os.Getenv("DEEPFENCE_KEY")
	if os.Getenv("DF_SERVERLESS") == "true" {
		MalwareCertPath = "/deepfence/etc/filebeat/filebeat.crt"
		MalwareScanDir = "/"
	} else {
		MalwareScanDir = HostMountDir
	}
}

func StartMalwareScan(req ctl.StartMalwareScanRequest) error {
	log.Info().Msgf("Start malware scan: %v\n", req)
	var greq pb.MalwareRequest
	switch req.NodeType {
	case ctl.Container:
		greq = pb.MalwareRequest{
			Input: &pb.MalwareRequest_Container{
				Container: &pb.MalwareContainer{Id: req.BinArgs["node_id"]},
			},
			ScanId: req.BinArgs["scan_id"],
		}
	case ctl.Image:
		greq = pb.MalwareRequest{
			Input: &pb.MalwareRequest_Image{
				Image: &pb.MalwareDockerImage{Id: req.BinArgs["node_id"], Name: req.BinArgs["image_name"]},
			},
			ScanId: req.BinArgs["scan_id"],
		}
	case ctl.Host:
		greq = pb.MalwareRequest{
			Input:  &pb.MalwareRequest_Path{Path: MalwareScanDir},
			ScanId: req.BinArgs["scan_id"],
		}
	}

	conn, err := grpc.Dial("unix://"+ebpfMalwareSocketPath, grpc.WithAuthority("dummy"),
		grpc.WithInsecure())
	if err != nil {
		fmt.Printf("error in creating malware scanner client: %s\n", err.Error())
		return err
	}
	defer conn.Close()
	client := pb.NewMalwareScannerClient(conn)
	if err != nil {
		return err
	}
	_, err = client.FindMalwareInfo(context.Background(), &greq)
	if err != nil {
		return err
	}

	fmt.Printf("Malware scan started for scan id %s\n", req.BinArgs["scan_id"])

	return nil
}

func GetMalwareScannerJobCount() int32 {
	conn, err := grpc.Dial("unix://"+ebpfMalwareSocketPath, grpc.WithAuthority("dummy"),
		grpc.WithInsecure())
	if err != nil {
		fmt.Printf("error in creating malware scanner client: %s\n", err.Error())
		return 0
	}
	defer conn.Close()
	client := pb.NewScannersClient(conn)
	jobReport, err := client.ReportJobsStatus(context.Background(), &pb.Empty{})
	if err != nil {
		return 0
	}
	return jobReport.RunningJobs
}
