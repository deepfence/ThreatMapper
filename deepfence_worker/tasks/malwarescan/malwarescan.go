package malwarescan

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil" //nolint:staticcheck
	"os"
	"os/exec"
	"sync"
	"time"

	"github.com/deepfence/YaraHunter/pkg/output"
	"github.com/deepfence/golang_deepfence_sdk/utils/tasks"
	"github.com/hibiken/asynq"

	workerUtils "github.com/deepfence/ThreatMapper/deepfence_worker/utils"
	malwareScanConstants "github.com/deepfence/YaraHunter/constants"
	malwareConfig "github.com/deepfence/YaraHunter/pkg/config"
	malwareScan "github.com/deepfence/YaraHunter/pkg/scan"
	yararules "github.com/deepfence/YaraHunter/pkg/yararules"

	"github.com/deepfence/ThreatMapper/deepfence_utils/directory"
	"github.com/deepfence/ThreatMapper/deepfence_utils/log"
	"github.com/deepfence/ThreatMapper/deepfence_utils/threatintel"
	"github.com/deepfence/ThreatMapper/deepfence_utils/utils"
	pb "github.com/deepfence/agent-plugins-grpc/srcgo"
	"github.com/twmb/franz-go/pkg/kgo"
)

var (
	failOnCompileWarning = false
	malwareRulesDir      = "/usr/local/malware"
	malwareRulesPath     = "/usr/local/malware/yara-rules"
	malwareConfigPath    = "/malware-config"
	opts                 *malwareConfig.Options
	yaraconfig           *malwareConfig.Config
	yr                   *yararules.YaraRules
)

var ScanMap sync.Map

var malwareRulesHash = ""
var malwareRuleLock = new(sync.Mutex)

func init() {
	ScanMap = sync.Map{}
}

type MalwareScan struct {
	ingestC chan *kgo.Record
}

func NewMalwareScanner(ingest chan *kgo.Record) MalwareScan {
	return MalwareScan{ingestC: ingest}
}

func checkMalwareRulesUpdate(ctx context.Context) error {
	// fetch rules url
	path, hash, err := threatintel.FetchMalwareRulesInfo(ctx)
	if err != nil {
		return err
	}

	malwareRuleLock.Lock()
	defer malwareRuleLock.Unlock()

	if malwareRulesHash != hash {
		malwareRulesHash = hash

		// remove old rules
		os.RemoveAll(malwareRulesPath)
		os.MkdirAll(malwareRulesDir, 0755)

		log.Info().Msgf("update rules from path: %s", path)
		if err := workerUtils.UpdateRules(ctx, path, malwareRulesDir); err != nil {
			return err
		}
		opts, yaraconfig, yr = initMalwareScanner()
	}

	return nil
}

func (s MalwareScan) StopMalwareScan(ctx context.Context, task *asynq.Task) error {

	log := log.WithCtx(ctx)

	var params utils.MalwareScanParameters

	log.Info().Msgf("StopMalwareScan, payload: %s ", string(task.Payload()))

	if err := json.Unmarshal(task.Payload(), &params); err != nil {
		log.Error().Msgf("StopMalwareScan, error in Unmarshal: %s", err.Error())
		return nil
	}

	scanID := params.ScanID

	obj, found := ScanMap.Load(scanID)
	if !found {
		log.Error().Msgf("Failed to Stop scan, may be already completed or errored out, ScanID: %s", scanID)
		return nil
	}

	scanner := obj.(*tasks.ScanContext)
	scanner.StopTriggered.Store(true)
	scanner.Cancel()
	log.Error().Msgf("Stop request submitted, ScanID: %s", scanID)

	return nil

}

func (s MalwareScan) StartMalwareScan(ctx context.Context, task *asynq.Task) error {

	log := log.WithCtx(ctx)

	if err := checkMalwareRulesUpdate(ctx); err != nil {
		log.Error().Err(err).Msg("failed to update malware rules")
		return err
	}

	var err error
	tenantID, err := directory.ExtractNamespace(ctx)
	if err != nil {
		return err
	}

	log.Info().Msgf("payload: %s ", string(task.Payload()))

	var params utils.MalwareScanParameters

	if err := json.Unmarshal(task.Payload(), &params); err != nil {
		return err
	}

	res, scanCtx := tasks.StartStatusReporter(params.ScanID,
		func(status tasks.ScanStatus) error {
			sb, err := json.Marshal(status)
			if err != nil {
				log.Error().Msgf("%v", err)
				return err
			}

			s.ingestC <- &kgo.Record{
				Topic:   utils.MalwareScanStatus,
				Value:   sb,
				Headers: []kgo.RecordHeader{{Key: "namespace", Value: []byte(tenantID)}},
			}
			return nil
		}, tasks.StatusValues{
			IN_PROGRESS: utils.ScanStatusInProgress,
			CANCELLED:   utils.ScanStatusCancelled,
			FAILED:      utils.ScanStatusFailed,
			SUCCESS:     utils.ScanStatusSuccess,
		},
		time.Minute*10,
	)

	ScanMap.Store(params.ScanID, scanCtx)

	defer func() {
		log.Info().Msgf("Removing from scan map, scan_id: %s", params.ScanID)
		ScanMap.Delete(params.ScanID)
		res <- err
		close(res)
	}()

	if params.RegistryID == "" {
		return fmt.Errorf("registry id is empty in params %+v: %w", params, err)
	}

	// opts, yaraconfig, yr = initMalwareScanner()
	yrScanner, err := yr.NewScanner()
	if err != nil {
		return err
	}

	// scanResult, err := malwareScan.ExtractAndScanFromTar(dir, imagename)
	malwareScanner := malwareScan.New(opts, yaraconfig, yrScanner, params.ScanID)

	// send inprogress status
	err = scanCtx.Checkpoint("After initialization")
	if err != nil {
		return err
	}

	// get registry credentials
	authDir, creds, err := workerUtils.GetConfigFileFromRegistry(ctx, params.RegistryID)
	if err != nil {
		return err
	}

	defer func() {
		log.Info().Msgf("remove auth directory %s", authDir)
		if authDir == "" {
			return
		}
		if err := os.RemoveAll(authDir); err != nil {
			log.Error().Msg(err.Error())
		}
	}()

	// pull image
	var imageName string
	if params.ImageName != "" {
		if creds.ImagePrefix != "" {
			imageName = creds.ImagePrefix + "/" + params.ImageName
		} else {
			imageName = params.ImageName
		}
	} else {
		imageName = params.ImageID
	}

	dir, err := ioutil.TempDir("/tmp", "malwarescan-*")
	if err != nil {
		return err
	}
	defer os.RemoveAll(dir)

	authFile := authDir + "/config.json"
	imgTar := dir + "/save-output.tar"
	var cmd *exec.Cmd
	if authDir != "" {
		cmd = exec.Command("skopeo", []string{"copy", "--insecure-policy", "--src-tls-verify=false",
			"--authfile", authFile, "docker://" + imageName, "docker-archive:" + imgTar}...)
	} else {
		cmd = exec.Command("skopeo", []string{"copy", "--insecure-policy", "--src-tls-verify=false",
			"docker://" + imageName, "docker-archive:" + imgTar}...)
	}

	log.Info().Msgf("command: %s", cmd.String())
	if out, err := workerUtils.RunCommand(cmd); err != nil {
		log.Error().Err(err).Msg(cmd.String())
		log.Error().Msgf("output: %s", out.String())
		return err
	}

	err = scanCtx.Checkpoint("After skopeo download")

	if err != nil {
		return err
	}
	// set imageName in malwareScanner
	malwareScanner.SetImageName(imageName)
	scanResult, err := malwareScanner.ExtractAndScanFromTar(scanCtx, dir)
	if err != nil {
		return err
	}

	type malwareScanResult struct {
		utils.MalwareScanParameters
		pb.MalwareInfo
	}

	for _, c := range output.MalwaresToMalwareInfos(scanResult.IOCs) {
		var r malwareScanResult
		r.MalwareScanParameters = params
		r.MalwareInfo = *c         //nolint:govet
		cb, err := json.Marshal(r) //nolint:govet
		if err != nil {
			log.Error().Msg(err.Error())
		} else {
			s.ingestC <- &kgo.Record{
				Topic:   utils.MalwareScan,
				Value:   cb,
				Headers: []kgo.RecordHeader{{Key: "namespace", Value: []byte(tenantID)}},
			}
		}
	}

	return nil
}

func initMalwareScanner() (*malwareConfig.Options, *malwareConfig.Config, *yararules.YaraRules) {
	opts := malwareConfig.NewDefaultOptions()
	opts.RulesPath = &malwareRulesPath
	opts.ConfigPath = &malwareConfigPath
	opts.FailOnCompileWarning = &failOnCompileWarning

	yaraconfig, err := malwareConfig.ParseConfig(*opts.ConfigPath)
	if err != nil {
		log.Error().Msg(err.Error())
	}

	yr := yararules.New(*opts.RulesPath)
	err = yr.Compile(malwareScanConstants.Filescan, *opts.FailOnCompileWarning)
	if err != nil {
		log.Error().Msg(err.Error())
	}

	return opts, yaraconfig, yr
}
