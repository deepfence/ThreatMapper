package ingesters

import (
	"encoding/json"
	"fmt"
	"hash/fnv"
	"time"

	"github.com/deepfence/golang_deepfence_sdk/utils/directory"
	"github.com/neo4j/neo4j-go-driver/v4/neo4j"
)

type MalwareScanStatus struct {
	Timestamp             time.Time `json:"@timestamp"`
	ContainerName         string    `json:"container_name"`
	HostName              string    `json:"host_name"`
	KubernetesClusterName string    `json:"kubernetes_cluster_name"`
	Masked                string    `json:"masked"`
	NodeID                string    `json:"node_id"`
	NodeName              string    `json:"node_name"`
	NodeType              string    `json:"node_type"`
	ScanID                string    `json:"scan_id"`
	ScanStatus            string    `json:"scan_status"`
}

type Malware struct {
	Timestamp             time.Time         `json:"@timestamp,omitempty"`
	ImageName             string            `json:"image_name"`
	ImageID               string            `json:"image_id"`
	ScanID                string            `json:"scan_id"`
	KubernetesClusterName string            `json:"kubernetes_cluster_name"`
	HostName              string            `json:"host_name"`
	NodeID                string            `json:"node_id"`
	NodeType              string            `json:"node_type"`
	ScanType              string            `json:"scan_type"`
	ContainerName         string            `json:"container_name"`
	RegistryID            string            `json:"registry_id"`
	ImageLayerID          string            `json:"image_layer_id"`
	RuleName              string            `json:"rule_name"`
	StringsToMatch        []string          `json:"strings_to_match"`
	FileSeverity          string            `json:"file_severity"`
	CompleteFilename      string            `json:"complete_filename"`
	Meta                  []string          `json:"meta"`
	MetaRules             map[string]string `json:"meta_rules"`
	Summary               string            `json:"summary"`
	Class                 string            `json:"class"`
	Masked                bool              `json:"masked"`
}

func generateHashFromMetaRules(metaRules map[string]string) string {
	hash := ""
	for k, v := range metaRules {
		hash += k + v
	}
	return generateHashFromString(hash)
}

func generateHashFromString(s string) string {
	h := fnv.New32a()
	h.Write([]byte(s))
	return fmt.Sprintf("%x", h.Sum32())
}

func CommitFuncMalware(ns string, data []Malware) error {
	malwareMap := []map[string]interface{}{}
	for _, i := range data {
		malware := map[string]interface{}{}
		malware["image_layer_id"] = i.ImageLayerID
		malware["class"] = i.Class
		malware["complete_file_name"] = i.CompleteFilename
		// malware["file_sev_score"] = i.FileSevScore
		malware["file_severity"] = i.FileSeverity
		// malware["severity_score"] = i.SeverityScore
		malware["summary"] = i.Summary
		malware["rule_name"] = i.RuleName
		malware["masked"] = i.Masked
		// malware["node_id"] = i.NodeID
		malware["timestamp"] = time.Now().Unix()
		malware["container_name"] = i.ContainerName
		malware["kubernetes_cluster_name"] = i.KubernetesClusterName
		malware["masked"] = i.Masked
		malware["node_id"] = i.NodeID
		malware["node_type"] = i.NodeType
		malware["scan_id"] = i.ScanID
		malware["malware_id"] = generateHashFromMetaRules(i.MetaRules)
		for k, v := range i.MetaRules {
			key := fmt.Sprintf("meta_rules_%v", k)
			malware[key] = v
		}

		for i, s := range i.StringsToMatch {
			key := fmt.Sprintf("%v[%v]", "match", i)
			malware[key] = s
		}
		malwareMap = append(malwareMap, malware)
	}

	ctx := directory.NewContextWithNameSpace(directory.NamespaceID(ns))
	driver, err := directory.Neo4jClient(ctx)
	if err != nil {
		return err
	}

	session := driver.NewSession(neo4j.SessionConfig{AccessMode: neo4j.AccessModeWrite})
	if err != nil {
		return err
	}
	defer session.Close()

	tx, err := session.BeginTransaction()
	if err != nil {
		return err
	}
	defer tx.Close()

	if _, err = tx.Run(`
        UNWIND $batch as row 
		MERGE (n:Malware{node_id: row.malware_id}) 
        SET n += row
		WITH n, row
		MERGE (m:MalwareScan{node_id: row.scan_id})
		WITH n, m
		MERGE (m) -[:DETECTED]-> (n)`,
		map[string]interface{}{"batch": malwareMap}); err != nil {
		return err
	}

	return tx.Commit()
}

func (c Malware) ToMap() map[string]interface{} {
	out, err := json.Marshal(c)
	if err != nil {
		return nil
	}
	bb := map[string]interface{}{}
	_ = json.Unmarshal(out, &bb)
	return bb
}
