stages:
  - test-go-app-build
  - test-docker-build

test-go-app-build:
  image: golang:latest
  stage: test-go-app-build

  variables:
    # Please edit to your GitLab project
    REPO_NAME: gitlab.com/deepfence-gitlab/simple_go_server

    # The problem is that to be able to use go get, one needs to put
    # the repository in the $GOPATH. So for example if your gitlab domain
    # is gitlab.com, and that your repository is namespace/project, and
    # the default GOPATH being /go, then you'd need to have your
    # repository in /go/src/gitlab.com/namespace/project
    # Thus, making a symbolic link corrects this.
  before_script:
    - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME

  script:
    - go build -o $CI_PROJECT_DIR/demo-app src/main.go
  artifacts:
    paths:
      - demo-app
    
test-docker-build-and-cve:
  image: docker:latest
  stage: test-docker-build
  services: 
    - docker:dind
  variables:
    IMAGE_NAME: go-server-test:latest
  script:
    - docker run -i --rm --net=host -v /var/run/docker.sock:/var/run/docker.sock deepfenceio/deepfence_package_scanner_ce:1.3.0 -mgmt-console-url=$DEEPFENCE_CONSOLE_IP -deepfence-key="$DEEPFENCE_KEY" -vulnerability-scan=true -output=table -mode=local -source="$IMAGE_NAME" -fail-on-count=$FAIL_CVE_COUNT -fail-on-score=$FAIL_CVE_SCORE
