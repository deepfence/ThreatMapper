/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ModelNodeIdentifier } from './ModelNodeIdentifier';
import {
    ModelNodeIdentifierFromJSON,
    ModelNodeIdentifierFromJSONTyped,
    ModelNodeIdentifierToJSON,
} from './ModelNodeIdentifier';
import type { ModelScanFilter } from './ModelScanFilter';
import {
    ModelScanFilterFromJSON,
    ModelScanFilterFromJSONTyped,
    ModelScanFilterToJSON,
} from './ModelScanFilter';
import type { ModelVulnerabilityScanConfigLanguage } from './ModelVulnerabilityScanConfigLanguage';
import {
    ModelVulnerabilityScanConfigLanguageFromJSON,
    ModelVulnerabilityScanConfigLanguageFromJSONTyped,
    ModelVulnerabilityScanConfigLanguageToJSON,
} from './ModelVulnerabilityScanConfigLanguage';

/**
 * 
 * @export
 * @interface ModelVulnerabilityScanTriggerReq
 */
export interface ModelVulnerabilityScanTriggerReq {
    /**
     * 
     * @type {ModelScanFilter}
     * @memberof ModelVulnerabilityScanTriggerReq
     */
    filters: ModelScanFilter;
    /**
     * 
     * @type {Array<ModelNodeIdentifier>}
     * @memberof ModelVulnerabilityScanTriggerReq
     */
    node_ids: Array<ModelNodeIdentifier> | null;
    /**
     * 
     * @type {Array<ModelVulnerabilityScanConfigLanguage>}
     * @memberof ModelVulnerabilityScanTriggerReq
     */
    scan_config: Array<ModelVulnerabilityScanConfigLanguage> | null;
}

/**
 * Check if a given object implements the ModelVulnerabilityScanTriggerReq interface.
 */
export function instanceOfModelVulnerabilityScanTriggerReq(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "filters" in value;
    isInstance = isInstance && "node_ids" in value;
    isInstance = isInstance && "scan_config" in value;

    return isInstance;
}

export function ModelVulnerabilityScanTriggerReqFromJSON(json: any): ModelVulnerabilityScanTriggerReq {
    return ModelVulnerabilityScanTriggerReqFromJSONTyped(json, false);
}

export function ModelVulnerabilityScanTriggerReqFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelVulnerabilityScanTriggerReq {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'filters': ModelScanFilterFromJSON(json['filters']),
        'node_ids': (json['node_ids'] === null ? null : (json['node_ids'] as Array<any>).map(ModelNodeIdentifierFromJSON)),
        'scan_config': (json['scan_config'] === null ? null : (json['scan_config'] as Array<any>).map(ModelVulnerabilityScanConfigLanguageFromJSON)),
    };
}

export function ModelVulnerabilityScanTriggerReqToJSON(value?: ModelVulnerabilityScanTriggerReq | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'filters': ModelScanFilterToJSON(value.filters),
        'node_ids': (value.node_ids === null ? null : (value.node_ids as Array<any>).map(ModelNodeIdentifierToJSON)),
        'scan_config': (value.scan_config === null ? null : (value.scan_config as Array<any>).map(ModelVulnerabilityScanConfigLanguageToJSON)),
    };
}

