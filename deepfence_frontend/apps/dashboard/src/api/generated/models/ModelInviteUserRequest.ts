/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: v2.3.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelInviteUserRequest
 */
export interface ModelInviteUserRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelInviteUserRequest
     */
    action: ModelInviteUserRequestActionEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelInviteUserRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ModelInviteUserRequest
     */
    role: ModelInviteUserRequestRoleEnum;
}


/**
 * @export
 */
export const ModelInviteUserRequestActionEnum = {
    SendInviteEmail: 'send-invite-email',
    GetInviteLink: 'get-invite-link'
} as const;
export type ModelInviteUserRequestActionEnum = typeof ModelInviteUserRequestActionEnum[keyof typeof ModelInviteUserRequestActionEnum];

/**
 * @export
 */
export const ModelInviteUserRequestRoleEnum = {
    Admin: 'admin',
    StandardUser: 'standard-user',
    ReadOnlyUser: 'read-only-user'
} as const;
export type ModelInviteUserRequestRoleEnum = typeof ModelInviteUserRequestRoleEnum[keyof typeof ModelInviteUserRequestRoleEnum];


/**
 * Check if a given object implements the ModelInviteUserRequest interface.
 */
export function instanceOfModelInviteUserRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "role" in value;

    return isInstance;
}

export function ModelInviteUserRequestFromJSON(json: any): ModelInviteUserRequest {
    return ModelInviteUserRequestFromJSONTyped(json, false);
}

export function ModelInviteUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelInviteUserRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': json['action'],
        'email': json['email'],
        'role': json['role'],
    };
}

export function ModelInviteUserRequestToJSON(value?: ModelInviteUserRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'email': value.email,
        'role': value.role,
    };
}

