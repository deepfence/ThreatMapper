/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelSbomRequest
 */
export interface ModelSbomRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelSbomRequest
     */
    node_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelSbomRequest
     */
    node_type?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelSbomRequest
     */
    scan_id?: string;
}

/**
 * Check if a given object implements the ModelSbomRequest interface.
 */
export function instanceOfModelSbomRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ModelSbomRequestFromJSON(json: any): ModelSbomRequest {
    return ModelSbomRequestFromJSONTyped(json, false);
}

export function ModelSbomRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelSbomRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'node_id': !exists(json, 'node_id') ? undefined : json['node_id'],
        'node_type': !exists(json, 'node_type') ? undefined : json['node_type'],
        'scan_id': !exists(json, 'scan_id') ? undefined : json['scan_id'],
    };
}

export function ModelSbomRequestToJSON(value?: ModelSbomRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'node_id': value.node_id,
        'node_type': value.node_type,
        'scan_id': value.scan_id,
    };
}

