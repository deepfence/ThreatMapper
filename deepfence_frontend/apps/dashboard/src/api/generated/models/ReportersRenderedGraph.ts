/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReportersConnectionSummary } from './ReportersConnectionSummary';
import {
    ReportersConnectionSummaryFromJSON,
    ReportersConnectionSummaryFromJSONTyped,
    ReportersConnectionSummaryToJSON,
} from './ReportersConnectionSummary';

/**
 * 
 * @export
 * @interface ReportersRenderedGraph
 */
export interface ReportersRenderedGraph {
    /**
     * 
     * @type {Array<ReportersConnectionSummary>}
     * @memberof ReportersRenderedGraph
     */
    connections?: Array<ReportersConnectionSummary> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ReportersRenderedGraph
     */
    containers?: { [key: string]: Array<string>; } | null;
    /**
     * 
     * @type {{ [key: string]: { [key: string]: Array<string>; }; }}
     * @memberof ReportersRenderedGraph
     */
    hosts?: { [key: string]: { [key: string]: Array<string>; }; } | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ReportersRenderedGraph
     */
    pods?: { [key: string]: Array<string>; } | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ReportersRenderedGraph
     */
    processes?: { [key: string]: Array<string>; } | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReportersRenderedGraph
     */
    providers?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ReportersRenderedGraph
     */
    regions?: { [key: string]: Array<string>; } | null;
}

/**
 * Check if a given object implements the ReportersRenderedGraph interface.
 */
export function instanceOfReportersRenderedGraph(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReportersRenderedGraphFromJSON(json: any): ReportersRenderedGraph {
    return ReportersRenderedGraphFromJSONTyped(json, false);
}

export function ReportersRenderedGraphFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportersRenderedGraph {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connections': !exists(json, 'connections') ? undefined : (json['connections'] === null ? null : (json['connections'] as Array<any>).map(ReportersConnectionSummaryFromJSON)),
        'containers': !exists(json, 'containers') ? undefined : json['containers'],
        'hosts': !exists(json, 'hosts') ? undefined : json['hosts'],
        'pods': !exists(json, 'pods') ? undefined : json['pods'],
        'processes': !exists(json, 'processes') ? undefined : json['processes'],
        'providers': !exists(json, 'providers') ? undefined : json['providers'],
        'regions': !exists(json, 'regions') ? undefined : json['regions'],
    };
}

export function ReportersRenderedGraphToJSON(value?: ReportersRenderedGraph | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connections': value.connections === undefined ? undefined : (value.connections === null ? null : (value.connections as Array<any>).map(ReportersConnectionSummaryToJSON)),
        'containers': value.containers,
        'hosts': value.hosts,
        'pods': value.pods,
        'processes': value.processes,
        'providers': value.providers,
        'regions': value.regions,
    };
}

