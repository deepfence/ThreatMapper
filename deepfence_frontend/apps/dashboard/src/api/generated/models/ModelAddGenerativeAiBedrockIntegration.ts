/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: v2.3.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelAddGenerativeAiBedrockIntegration
 */
export interface ModelAddGenerativeAiBedrockIntegration {
    /**
     * 
     * @type {string}
     * @memberof ModelAddGenerativeAiBedrockIntegration
     */
    aws_access_key?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAddGenerativeAiBedrockIntegration
     */
    aws_region: ModelAddGenerativeAiBedrockIntegrationAwsRegionEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelAddGenerativeAiBedrockIntegration
     */
    aws_secret_key?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelAddGenerativeAiBedrockIntegration
     */
    model_id: ModelAddGenerativeAiBedrockIntegrationModelIdEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ModelAddGenerativeAiBedrockIntegration
     */
    use_iam_role?: boolean;
}


/**
 * @export
 */
export const ModelAddGenerativeAiBedrockIntegrationAwsRegionEnum = {
    UsEast1: 'us-east-1',
    UsEast2: 'us-east-2',
    UsWest1: 'us-west-1',
    UsWest2: 'us-west-2',
    AfSouth1: 'af-south-1',
    ApEast1: 'ap-east-1',
    ApSouth1: 'ap-south-1',
    ApNortheast1: 'ap-northeast-1',
    ApNortheast2: 'ap-northeast-2',
    ApNortheast3: 'ap-northeast-3',
    ApSoutheast1: 'ap-southeast-1',
    ApSoutheast2: 'ap-southeast-2',
    ApSoutheast3: 'ap-southeast-3',
    CaCentral1: 'ca-central-1',
    EuCentral1: 'eu-central-1',
    EuWest1: 'eu-west-1',
    EuWest2: 'eu-west-2',
    EuWest3: 'eu-west-3',
    EuSouth1: 'eu-south-1',
    EuNorth1: 'eu-north-1',
    MeSouth1: 'me-south-1',
    MeCentral1: 'me-central-1',
    SaEast1: 'sa-east-1',
    UsGovEast1: 'us-gov-east-1',
    UsGovWest1: 'us-gov-west-1'
} as const;
export type ModelAddGenerativeAiBedrockIntegrationAwsRegionEnum = typeof ModelAddGenerativeAiBedrockIntegrationAwsRegionEnum[keyof typeof ModelAddGenerativeAiBedrockIntegrationAwsRegionEnum];

/**
 * @export
 */
export const ModelAddGenerativeAiBedrockIntegrationModelIdEnum = {
    AnthropicClaudeV2: 'anthropic.claude-v2',
    AnthropicClaudeInstantV1: 'anthropic.claude-instant-v1',
    AmazonTitanTextLiteV1: 'amazon.titan-text-lite-v1',
    AmazonTitanTextExpressV1: 'amazon.titan-text-express-v1',
    Ai21J2UltraV1: 'ai21.j2-ultra-v1',
    Ai21J2MidV1: 'ai21.j2-mid-v1',
    MetaLlama213bChatV1: 'meta.llama2-13b-chat-v1',
    CohereCommandTextV14: 'cohere.command-text-v14',
    CohereCommandLightTextV14: 'cohere.command-light-text-v14'
} as const;
export type ModelAddGenerativeAiBedrockIntegrationModelIdEnum = typeof ModelAddGenerativeAiBedrockIntegrationModelIdEnum[keyof typeof ModelAddGenerativeAiBedrockIntegrationModelIdEnum];


/**
 * Check if a given object implements the ModelAddGenerativeAiBedrockIntegration interface.
 */
export function instanceOfModelAddGenerativeAiBedrockIntegration(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "aws_region" in value;
    isInstance = isInstance && "model_id" in value;

    return isInstance;
}

export function ModelAddGenerativeAiBedrockIntegrationFromJSON(json: any): ModelAddGenerativeAiBedrockIntegration {
    return ModelAddGenerativeAiBedrockIntegrationFromJSONTyped(json, false);
}

export function ModelAddGenerativeAiBedrockIntegrationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelAddGenerativeAiBedrockIntegration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'aws_access_key': !exists(json, 'aws_access_key') ? undefined : json['aws_access_key'],
        'aws_region': json['aws_region'],
        'aws_secret_key': !exists(json, 'aws_secret_key') ? undefined : json['aws_secret_key'],
        'model_id': json['model_id'],
        'use_iam_role': !exists(json, 'use_iam_role') ? undefined : json['use_iam_role'],
    };
}

export function ModelAddGenerativeAiBedrockIntegrationToJSON(value?: ModelAddGenerativeAiBedrockIntegration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'aws_access_key': value.aws_access_key,
        'aws_region': value.aws_region,
        'aws_secret_key': value.aws_secret_key,
        'model_id': value.model_id,
        'use_iam_role': value.use_iam_role,
    };
}

