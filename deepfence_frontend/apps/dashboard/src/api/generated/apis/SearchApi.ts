/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  ModelCloudCompliance,
  ModelCompliance,
  ModelContainer,
  ModelContainerImage,
  ModelHost,
  ModelMalware,
  ModelScanInfo,
  ModelSecret,
  ModelVulnerability,
  SearchSearchCountResp,
  SearchSearchNodeReq,
  SearchSearchScanReq,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    ModelCloudComplianceFromJSON,
    ModelCloudComplianceToJSON,
    ModelComplianceFromJSON,
    ModelComplianceToJSON,
    ModelContainerFromJSON,
    ModelContainerToJSON,
    ModelContainerImageFromJSON,
    ModelContainerImageToJSON,
    ModelHostFromJSON,
    ModelHostToJSON,
    ModelMalwareFromJSON,
    ModelMalwareToJSON,
    ModelScanInfoFromJSON,
    ModelScanInfoToJSON,
    ModelSecretFromJSON,
    ModelSecretToJSON,
    ModelVulnerabilityFromJSON,
    ModelVulnerabilityToJSON,
    SearchSearchCountRespFromJSON,
    SearchSearchCountRespToJSON,
    SearchSearchNodeReqFromJSON,
    SearchSearchNodeReqToJSON,
    SearchSearchScanReqFromJSON,
    SearchSearchScanReqToJSON,
} from '../models';

export interface CountCloudComplianceScansRequest {
    searchSearchScanReq?: SearchSearchScanReq;
}

export interface CountCloudCompliancesRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface CountComplianceScansRequest {
    searchSearchScanReq?: SearchSearchScanReq;
}

export interface CountCompliancesRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface CountContainerImagesRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface CountContainersRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface CountHostsRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface CountMalwareScansRequest {
    searchSearchScanReq?: SearchSearchScanReq;
}

export interface CountMalwaresRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface CountSecretsRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface CountSecretsScansRequest {
    searchSearchScanReq?: SearchSearchScanReq;
}

export interface CountVulnerabilitiesRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface CountVulnerabilityScansRequest {
    searchSearchScanReq?: SearchSearchScanReq;
}

export interface SearchCloudComplianceScansRequest {
    searchSearchScanReq?: SearchSearchScanReq;
}

export interface SearchCloudCompliancesRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface SearchComplianceScansRequest {
    searchSearchScanReq?: SearchSearchScanReq;
}

export interface SearchCompliancesRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface SearchContainerImagesRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface SearchContainersRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface SearchHostsRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface SearchMalwareScansRequest {
    searchSearchScanReq?: SearchSearchScanReq;
}

export interface SearchMalwaresRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface SearchSecretsRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface SearchSecretsScansRequest {
    searchSearchScanReq?: SearchSearchScanReq;
}

export interface SearchVulnerabilitiesRequest {
    searchSearchNodeReq?: SearchSearchNodeReq;
}

export interface SearchVulnerabilityScansRequest {
    searchSearchScanReq?: SearchSearchScanReq;
}

/**
 * SearchApi - interface
 * 
 * @export
 * @interface SearchApiInterface
 */
export interface SearchApiInterface {
    /**
     * Search scan results
     * @summary Search Vulnerability Scan results
     * @param {SearchSearchScanReq} [searchSearchScanReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countCloudComplianceScansRaw(requestParameters: CountCloudComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    countCloudComplianceScans(requestParameters: CountCloudComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * List all the images present in the given registry
     * @summary Search Cloud compliances
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countCloudCompliancesRaw(requestParameters: CountCloudCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * List all the images present in the given registry
     * Search Cloud compliances
     */
    countCloudCompliances(requestParameters: CountCloudCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * Search scan results
     * @summary Search Vulnerability Scan results
     * @param {SearchSearchScanReq} [searchSearchScanReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countComplianceScansRaw(requestParameters: CountComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    countComplianceScans(requestParameters: CountComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * List all the images present in the given registry
     * @summary Search Compliances
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countCompliancesRaw(requestParameters: CountCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * List all the images present in the given registry
     * Search Compliances
     */
    countCompliances(requestParameters: CountCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * Retrieve all the data associated with processes
     * @summary Search Container images
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countContainerImagesRaw(requestParameters: CountContainerImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * Retrieve all the data associated with processes
     * Search Container images
     */
    countContainerImages(requestParameters: CountContainerImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * Retrieve all the data associated with containers
     * @summary Search Containers data
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countContainersRaw(requestParameters: CountContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * Retrieve all the data associated with containers
     * Search Containers data
     */
    countContainers(requestParameters: CountContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * Retrieve all the data associated with hosts
     * @summary Search hosts
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countHostsRaw(requestParameters: CountHostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * Retrieve all the data associated with hosts
     * Search hosts
     */
    countHosts(requestParameters: CountHostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * Search scan results
     * @summary Search Vulnerability Scan results
     * @param {SearchSearchScanReq} [searchSearchScanReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countMalwareScansRaw(requestParameters: CountMalwareScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    countMalwareScans(requestParameters: CountMalwareScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * List all the images present in the given registry
     * @summary Search Malwares
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countMalwaresRaw(requestParameters: CountMalwaresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * List all the images present in the given registry
     * Search Malwares
     */
    countMalwares(requestParameters: CountMalwaresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * Retrieve all the data associated with pods
     * @summary Search Secrets
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countSecretsRaw(requestParameters: CountSecretsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * Retrieve all the data associated with pods
     * Search Secrets
     */
    countSecrets(requestParameters: CountSecretsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * Search scan results
     * @summary Search Vulnerability Scan results
     * @param {SearchSearchScanReq} [searchSearchScanReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countSecretsScansRaw(requestParameters: CountSecretsScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    countSecretsScans(requestParameters: CountSecretsScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * Retrieve all the data associated with k8s clusters
     * @summary Search Vulnerabilities
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countVulnerabilitiesRaw(requestParameters: CountVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * Retrieve all the data associated with k8s clusters
     * Search Vulnerabilities
     */
    countVulnerabilities(requestParameters: CountVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * Search scan results
     * @summary Search Vulnerability Scan results
     * @param {SearchSearchScanReq} [searchSearchScanReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    countVulnerabilityScansRaw(requestParameters: CountVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>>;

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    countVulnerabilityScans(requestParameters: CountVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp>;

    /**
     * Search scan results
     * @summary Search Vulnerability Scan results
     * @param {SearchSearchScanReq} [searchSearchScanReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchCloudComplianceScansRaw(requestParameters: SearchCloudComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelScanInfo>>>;

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    searchCloudComplianceScans(requestParameters: SearchCloudComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelScanInfo>>;

    /**
     * List all the images present in the given registry
     * @summary Search Cloud compliances
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchCloudCompliancesRaw(requestParameters: SearchCloudCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelCloudCompliance>>>;

    /**
     * List all the images present in the given registry
     * Search Cloud compliances
     */
    searchCloudCompliances(requestParameters: SearchCloudCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelCloudCompliance>>;

    /**
     * Search scan results
     * @summary Search Vulnerability Scan results
     * @param {SearchSearchScanReq} [searchSearchScanReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchComplianceScansRaw(requestParameters: SearchComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelScanInfo>>>;

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    searchComplianceScans(requestParameters: SearchComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelScanInfo>>;

    /**
     * List all the images present in the given registry
     * @summary Search Compliances
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchCompliancesRaw(requestParameters: SearchCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelCompliance>>>;

    /**
     * List all the images present in the given registry
     * Search Compliances
     */
    searchCompliances(requestParameters: SearchCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelCompliance>>;

    /**
     * Retrieve all the data associated with processes
     * @summary Search Container images
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchContainerImagesRaw(requestParameters: SearchContainerImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelContainerImage>>>;

    /**
     * Retrieve all the data associated with processes
     * Search Container images
     */
    searchContainerImages(requestParameters: SearchContainerImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelContainerImage>>;

    /**
     * Retrieve all the data associated with containers
     * @summary Search Containers data
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchContainersRaw(requestParameters: SearchContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelContainer>>>;

    /**
     * Retrieve all the data associated with containers
     * Search Containers data
     */
    searchContainers(requestParameters: SearchContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelContainer>>;

    /**
     * Retrieve all the data associated with hosts
     * @summary Search hosts
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchHostsRaw(requestParameters: SearchHostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelHost>>>;

    /**
     * Retrieve all the data associated with hosts
     * Search hosts
     */
    searchHosts(requestParameters: SearchHostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelHost>>;

    /**
     * Search scan results
     * @summary Search Vulnerability Scan results
     * @param {SearchSearchScanReq} [searchSearchScanReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchMalwareScansRaw(requestParameters: SearchMalwareScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelScanInfo>>>;

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    searchMalwareScans(requestParameters: SearchMalwareScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelScanInfo>>;

    /**
     * List all the images present in the given registry
     * @summary Search Malwares
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchMalwaresRaw(requestParameters: SearchMalwaresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelMalware>>>;

    /**
     * List all the images present in the given registry
     * Search Malwares
     */
    searchMalwares(requestParameters: SearchMalwaresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelMalware>>;

    /**
     * Retrieve all the data associated with pods
     * @summary Search Secrets
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchSecretsRaw(requestParameters: SearchSecretsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelSecret>>>;

    /**
     * Retrieve all the data associated with pods
     * Search Secrets
     */
    searchSecrets(requestParameters: SearchSecretsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelSecret>>;

    /**
     * Search scan results
     * @summary Search Vulnerability Scan results
     * @param {SearchSearchScanReq} [searchSearchScanReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchSecretsScansRaw(requestParameters: SearchSecretsScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelScanInfo>>>;

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    searchSecretsScans(requestParameters: SearchSecretsScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelScanInfo>>;

    /**
     * Retrieve all the data associated with k8s clusters
     * @summary Search Vulnerabilities
     * @param {SearchSearchNodeReq} [searchSearchNodeReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchVulnerabilitiesRaw(requestParameters: SearchVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelVulnerability>>>;

    /**
     * Retrieve all the data associated with k8s clusters
     * Search Vulnerabilities
     */
    searchVulnerabilities(requestParameters: SearchVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelVulnerability>>;

    /**
     * Search scan results
     * @summary Search Vulnerability Scan results
     * @param {SearchSearchScanReq} [searchSearchScanReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchVulnerabilityScansRaw(requestParameters: SearchVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelScanInfo>>>;

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    searchVulnerabilityScans(requestParameters: SearchVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelScanInfo>>;

}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI implements SearchApiInterface {

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async countCloudComplianceScansRaw(requestParameters: CountCloudComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/cloud-compliance/scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchScanReqToJSON(requestParameters.searchSearchScanReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async countCloudComplianceScans(requestParameters: CountCloudComplianceScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countCloudComplianceScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the images present in the given registry
     * Search Cloud compliances
     */
    async countCloudCompliancesRaw(requestParameters: CountCloudCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/cloud-compliances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * List all the images present in the given registry
     * Search Cloud compliances
     */
    async countCloudCompliances(requestParameters: CountCloudCompliancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countCloudCompliancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async countComplianceScansRaw(requestParameters: CountComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/compliance/scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchScanReqToJSON(requestParameters.searchSearchScanReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async countComplianceScans(requestParameters: CountComplianceScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countComplianceScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the images present in the given registry
     * Search Compliances
     */
    async countCompliancesRaw(requestParameters: CountCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/compliances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * List all the images present in the given registry
     * Search Compliances
     */
    async countCompliances(requestParameters: CountCompliancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countCompliancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with processes
     * Search Container images
     */
    async countContainerImagesRaw(requestParameters: CountContainerImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * Retrieve all the data associated with processes
     * Search Container images
     */
    async countContainerImages(requestParameters: CountContainerImagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countContainerImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with containers
     * Search Containers data
     */
    async countContainersRaw(requestParameters: CountContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/containers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * Retrieve all the data associated with containers
     * Search Containers data
     */
    async countContainers(requestParameters: CountContainersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with hosts
     * Search hosts
     */
    async countHostsRaw(requestParameters: CountHostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/hosts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * Retrieve all the data associated with hosts
     * Search hosts
     */
    async countHosts(requestParameters: CountHostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countHostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async countMalwareScansRaw(requestParameters: CountMalwareScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/malware/scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchScanReqToJSON(requestParameters.searchSearchScanReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async countMalwareScans(requestParameters: CountMalwareScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countMalwareScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the images present in the given registry
     * Search Malwares
     */
    async countMalwaresRaw(requestParameters: CountMalwaresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/malwares`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * List all the images present in the given registry
     * Search Malwares
     */
    async countMalwares(requestParameters: CountMalwaresRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countMalwaresRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with pods
     * Search Secrets
     */
    async countSecretsRaw(requestParameters: CountSecretsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/secrets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * Retrieve all the data associated with pods
     * Search Secrets
     */
    async countSecrets(requestParameters: CountSecretsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countSecretsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async countSecretsScansRaw(requestParameters: CountSecretsScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/secret/scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchScanReqToJSON(requestParameters.searchSearchScanReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async countSecretsScans(requestParameters: CountSecretsScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countSecretsScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with k8s clusters
     * Search Vulnerabilities
     */
    async countVulnerabilitiesRaw(requestParameters: CountVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/vulnerabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * Retrieve all the data associated with k8s clusters
     * Search Vulnerabilities
     */
    async countVulnerabilities(requestParameters: CountVulnerabilitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countVulnerabilitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async countVulnerabilityScansRaw(requestParameters: CountVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSearchCountResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/count/vulnerability/scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchScanReqToJSON(requestParameters.searchSearchScanReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSearchCountRespFromJSON(jsonValue));
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async countVulnerabilityScans(requestParameters: CountVulnerabilityScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSearchCountResp> {
        const response = await this.countVulnerabilityScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async searchCloudComplianceScansRaw(requestParameters: SearchCloudComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelScanInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/cloud-compliance/scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchScanReqToJSON(requestParameters.searchSearchScanReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelScanInfoFromJSON));
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async searchCloudComplianceScans(requestParameters: SearchCloudComplianceScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelScanInfo>> {
        const response = await this.searchCloudComplianceScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the images present in the given registry
     * Search Cloud compliances
     */
    async searchCloudCompliancesRaw(requestParameters: SearchCloudCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelCloudCompliance>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/cloud-compliances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelCloudComplianceFromJSON));
    }

    /**
     * List all the images present in the given registry
     * Search Cloud compliances
     */
    async searchCloudCompliances(requestParameters: SearchCloudCompliancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelCloudCompliance>> {
        const response = await this.searchCloudCompliancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async searchComplianceScansRaw(requestParameters: SearchComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelScanInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/compliance/scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchScanReqToJSON(requestParameters.searchSearchScanReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelScanInfoFromJSON));
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async searchComplianceScans(requestParameters: SearchComplianceScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelScanInfo>> {
        const response = await this.searchComplianceScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the images present in the given registry
     * Search Compliances
     */
    async searchCompliancesRaw(requestParameters: SearchCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelCompliance>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/compliances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelComplianceFromJSON));
    }

    /**
     * List all the images present in the given registry
     * Search Compliances
     */
    async searchCompliances(requestParameters: SearchCompliancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelCompliance>> {
        const response = await this.searchCompliancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with processes
     * Search Container images
     */
    async searchContainerImagesRaw(requestParameters: SearchContainerImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelContainerImage>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelContainerImageFromJSON));
    }

    /**
     * Retrieve all the data associated with processes
     * Search Container images
     */
    async searchContainerImages(requestParameters: SearchContainerImagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelContainerImage>> {
        const response = await this.searchContainerImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with containers
     * Search Containers data
     */
    async searchContainersRaw(requestParameters: SearchContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelContainer>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/containers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelContainerFromJSON));
    }

    /**
     * Retrieve all the data associated with containers
     * Search Containers data
     */
    async searchContainers(requestParameters: SearchContainersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelContainer>> {
        const response = await this.searchContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with hosts
     * Search hosts
     */
    async searchHostsRaw(requestParameters: SearchHostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelHost>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/hosts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelHostFromJSON));
    }

    /**
     * Retrieve all the data associated with hosts
     * Search hosts
     */
    async searchHosts(requestParameters: SearchHostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelHost>> {
        const response = await this.searchHostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async searchMalwareScansRaw(requestParameters: SearchMalwareScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelScanInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/malware/scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchScanReqToJSON(requestParameters.searchSearchScanReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelScanInfoFromJSON));
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async searchMalwareScans(requestParameters: SearchMalwareScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelScanInfo>> {
        const response = await this.searchMalwareScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the images present in the given registry
     * Search Malwares
     */
    async searchMalwaresRaw(requestParameters: SearchMalwaresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelMalware>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/malwares`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelMalwareFromJSON));
    }

    /**
     * List all the images present in the given registry
     * Search Malwares
     */
    async searchMalwares(requestParameters: SearchMalwaresRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelMalware>> {
        const response = await this.searchMalwaresRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with pods
     * Search Secrets
     */
    async searchSecretsRaw(requestParameters: SearchSecretsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelSecret>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/secrets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelSecretFromJSON));
    }

    /**
     * Retrieve all the data associated with pods
     * Search Secrets
     */
    async searchSecrets(requestParameters: SearchSecretsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelSecret>> {
        const response = await this.searchSecretsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async searchSecretsScansRaw(requestParameters: SearchSecretsScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelScanInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/secret/scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchScanReqToJSON(requestParameters.searchSearchScanReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelScanInfoFromJSON));
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async searchSecretsScans(requestParameters: SearchSecretsScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelScanInfo>> {
        const response = await this.searchSecretsScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with k8s clusters
     * Search Vulnerabilities
     */
    async searchVulnerabilitiesRaw(requestParameters: SearchVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelVulnerability>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/vulnerabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchNodeReqToJSON(requestParameters.searchSearchNodeReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelVulnerabilityFromJSON));
    }

    /**
     * Retrieve all the data associated with k8s clusters
     * Search Vulnerabilities
     */
    async searchVulnerabilities(requestParameters: SearchVulnerabilitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelVulnerability>> {
        const response = await this.searchVulnerabilitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async searchVulnerabilityScansRaw(requestParameters: SearchVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelScanInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/search/vulnerability/scans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSearchScanReqToJSON(requestParameters.searchSearchScanReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelScanInfoFromJSON));
    }

    /**
     * Search scan results
     * Search Vulnerability Scan results
     */
    async searchVulnerabilityScans(requestParameters: SearchVulnerabilityScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelScanInfo>> {
        const response = await this.searchVulnerabilityScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
