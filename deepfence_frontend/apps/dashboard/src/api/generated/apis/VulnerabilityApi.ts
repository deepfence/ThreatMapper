/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  IngestersDfCveStruct,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    IngestersDfCveStructFromJSON,
    IngestersDfCveStructToJSON,
} from '../models';

export interface IngestCVEsRequest {
    ingestersDfCveStruct?: Array<IngestersDfCveStruct> | null;
}

/**
 * VulnerabilityApi - interface
 * 
 * @export
 * @interface VulnerabilityApiInterface
 */
export interface VulnerabilityApiInterface {
    /**
     * Ingest CVEs found while scanning the agent
     * @summary Ingest CVEs
     * @param {Array<IngestersDfCveStruct>} [ingestersDfCveStruct] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    ingestCVEsRaw(requestParameters: IngestCVEsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Ingest CVEs found while scanning the agent
     * Ingest CVEs
     */
    ingestCVEs(requestParameters: IngestCVEsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Start CVE Scan on agent
     * @summary Start CVE Scan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    startCVEScanRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Start CVE Scan on agent
     * Start CVE Scan
     */
    startCVEScan(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class VulnerabilityApi extends runtime.BaseAPI implements VulnerabilityApiInterface {

    /**
     * Ingest CVEs found while scanning the agent
     * Ingest CVEs
     */
    async ingestCVEsRaw(requestParameters: IngestCVEsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ingest/cves`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ingestersDfCveStruct?.map(IngestersDfCveStructToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ingest CVEs found while scanning the agent
     * Ingest CVEs
     */
    async ingestCVEs(requestParameters: IngestCVEsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ingestCVEsRaw(requestParameters, initOverrides);
    }

    /**
     * Start CVE Scan on agent
     * Start CVE Scan
     */
    async startCVEScanRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/start/cves`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start CVE Scan on agent
     * Start CVE Scan
     */
    async startCVEScan(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startCVEScanRaw(initOverrides);
    }

}
