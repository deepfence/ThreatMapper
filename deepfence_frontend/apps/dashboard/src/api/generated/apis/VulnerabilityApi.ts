/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  IngestersDfVulnerabilityStruct,
  ModelScanTrigger,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    IngestersDfVulnerabilityStructFromJSON,
    IngestersDfVulnerabilityStructToJSON,
    ModelScanTriggerFromJSON,
    ModelScanTriggerToJSON,
} from '../models';

export interface IngestVulnerabilitiesRequest {
    ingestersDfVulnerabilityStruct?: Array<IngestersDfVulnerabilityStruct> | null;
}

export interface StartVulnerabilityScanRequest {
    modelScanTrigger?: ModelScanTrigger;
}

/**
 * VulnerabilityApi - interface
 * 
 * @export
 * @interface VulnerabilityApiInterface
 */
export interface VulnerabilityApiInterface {
    /**
     * Ingest vulnerabilities found while scanning the agent host or containers
     * @summary Ingest Vulnerabilities
     * @param {Array<IngestersDfVulnerabilityStruct>} [ingestersDfVulnerabilityStruct] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    ingestVulnerabilitiesRaw(requestParameters: IngestVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Ingest vulnerabilities found while scanning the agent host or containers
     * Ingest Vulnerabilities
     */
    ingestVulnerabilities(requestParameters: IngestVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Start Vulnerability Scan on agent or registry
     * @summary Start Vulnerability Scan
     * @param {ModelScanTrigger} [modelScanTrigger] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    startVulnerabilityScanRaw(requestParameters: StartVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Start Vulnerability Scan on agent or registry
     * Start Vulnerability Scan
     */
    startVulnerabilityScan(requestParameters: StartVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Stop Vulnerability Scan on agent or registry
     * @summary Stop Vulnerability Scan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    stopVulnerabilityScanRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Stop Vulnerability Scan on agent or registry
     * Stop Vulnerability Scan
     */
    stopVulnerabilityScan(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class VulnerabilityApi extends runtime.BaseAPI implements VulnerabilityApiInterface {

    /**
     * Ingest vulnerabilities found while scanning the agent host or containers
     * Ingest Vulnerabilities
     */
    async ingestVulnerabilitiesRaw(requestParameters: IngestVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ingest/vulnerabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ingestersDfVulnerabilityStruct?.map(IngestersDfVulnerabilityStructToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ingest vulnerabilities found while scanning the agent host or containers
     * Ingest Vulnerabilities
     */
    async ingestVulnerabilities(requestParameters: IngestVulnerabilitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ingestVulnerabilitiesRaw(requestParameters, initOverrides);
    }

    /**
     * Start Vulnerability Scan on agent or registry
     * Start Vulnerability Scan
     */
    async startVulnerabilityScanRaw(requestParameters: StartVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/start/vulnerability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelScanTriggerToJSON(requestParameters.modelScanTrigger),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start Vulnerability Scan on agent or registry
     * Start Vulnerability Scan
     */
    async startVulnerabilityScan(requestParameters: StartVulnerabilityScanRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startVulnerabilityScanRaw(requestParameters, initOverrides);
    }

    /**
     * Stop Vulnerability Scan on agent or registry
     * Stop Vulnerability Scan
     */
    async stopVulnerabilityScanRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/stop/vulnerability`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stop Vulnerability Scan on agent or registry
     * Stop Vulnerability Scan
     */
    async stopVulnerabilityScan(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stopVulnerabilityScanRaw(initOverrides);
    }

}
