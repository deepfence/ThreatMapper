/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: v2.3.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  IngestersCloudResource,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    IngestersCloudResourceFromJSON,
    IngestersCloudResourceToJSON,
} from '../models';

export interface IngestCloudResourcesRequest {
    ingestersCloudResource?: Array<IngestersCloudResource> | null;
}

/**
 * CloudResourcesApi - interface
 * 
 * @export
 * @interface CloudResourcesApiInterface
 */
export interface CloudResourcesApiInterface {
    /**
     * Ingest Clouds Resources found while scanning cloud provider
     * @summary Ingest Cloud resources
     * @param {Array<IngestersCloudResource>} [ingestersCloudResource] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudResourcesApiInterface
     */
    ingestCloudResourcesRaw(requestParameters: IngestCloudResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Ingest Clouds Resources found while scanning cloud provider
     * Ingest Cloud resources
     */
    ingestCloudResources(requestParameters: IngestCloudResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class CloudResourcesApi extends runtime.BaseAPI implements CloudResourcesApiInterface {

    /**
     * Ingest Clouds Resources found while scanning cloud provider
     * Ingest Cloud resources
     */
    async ingestCloudResourcesRaw(requestParameters: IngestCloudResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ingest/cloud-resources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ingestersCloudResource?.map(IngestersCloudResourceToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ingest Clouds Resources found while scanning cloud provider
     * Ingest Cloud resources
     */
    async ingestCloudResources(requestParameters: IngestCloudResourcesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ingestCloudResourcesRaw(requestParameters, initOverrides);
    }

}
