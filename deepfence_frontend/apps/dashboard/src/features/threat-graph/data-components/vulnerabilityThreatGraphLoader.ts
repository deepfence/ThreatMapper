import { LoaderFunctionArgs } from 'react-router-dom';

import { getThreatGraphApiClient } from '@/api/api';
import {
  GraphVulnerabilityThreatGraph,
  GraphVulnerabilityThreatGraphRequestGraphTypeEnum,
} from '@/api/generated';
import { apiWrapper } from '@/utils/api';

export type VulnerabilityThreatGraphLoaderData = Awaited<ReturnType<typeof loader>>;

const loader = async ({
  request,
}: LoaderFunctionArgs): Promise<GraphVulnerabilityThreatGraph[]> => {
  const url = new URL(request.url);
  const searchParams = new URLSearchParams(url.search);
  const type = searchParams.get(
    'type',
  ) as GraphVulnerabilityThreatGraphRequestGraphTypeEnum;

  const getVulnerabilityThreatGraphApi = apiWrapper({
    fn: getThreatGraphApiClient().getVulnerabilityThreatGraph,
  });

  const getVulnerabilityThreatGraphResponse = await getVulnerabilityThreatGraphApi({
    graphVulnerabilityThreatGraphRequest: {
      graph_type: type,
    },
  });

  if (!getVulnerabilityThreatGraphResponse.ok) {
    const error = await getVulnerabilityThreatGraphResponse.error.response.json();
    return error;
  }

  return getVulnerabilityThreatGraphResponse.value;
};

export const module = {
  loader,
};
