import { IGroup, NodeConfig, registerEdge, registerNode } from '@antv/g6';
import { truncate } from 'lodash-es';

import { GraphNodeInfo } from '@/api/generated';

export type ThreatGraphNodeModelConfig = NodeConfig & {
  id: string;
  label: string;
  nodeType: string;
  img: string;
  nonInteractive: boolean;
  cve_id: string[];
  cve_attack_vector: string;
  ports: string[];
  nodes?: { [key: string]: GraphNodeInfo } | null;
};

registerNode(
  'vulnerability-threat-graph-node',
  {
    draw(_cfg, _group) {
      const cfg = _cfg as ThreatGraphNodeModelConfig;
      const group = _group as IGroup;
      const size =
        (typeof cfg?.size === 'number'
          ? cfg.size
          : Array.isArray(cfg?.size)
          ? cfg?.size[0]
          : cfg?.size) ?? 40;
      const mainOpacity = 0.9;
      // Add keyshape, which is the main shape which g6 considers
      // for edge connections etc.
      const keyShape = group.addShape('circle', {
        attrs: {
          ...cfg.style,
          x: 0,
          y: 0,
          r: size / 2,
          cursor: cfg?.nonInteractive ? 'default' : 'pointer',
        },
        draggable: true,
      });

      if (cfg?.img) {
        group
          ?.addShape('image', {
            attrs: {
              x: -size / 2,
              y: -size / 2,
              width: size,
              height: size,
              img: cfg.img,
              opacity: mainOpacity,
              cursor: cfg?.nonInteractive ? 'default' : 'pointer',
            },
            // must be assigned in G6 3.3 and later versions. it can be any value you want
            name: 'image-shape',
            draggable: true,
          })
          .setClip({
            attrs: {
              r: size / 2,
            },
            type: 'circle',
          });
      }

      if (cfg?.label) {
        const label = group?.addShape('text', {
          attrs: {
            x: 0, // center
            y: 24,
            textAlign: 'center',
            textBaseline: 'middle',
            cursor: 'pointer',
            text: `${truncate(cfg.label, { length: 20 })}`,
            ...(cfg.labelCfg?.style ?? {}),
          },
          // must be assigned in G6 3.3 and later versions. it can be any value you want
          name: 'text-shape',
          // allow the shape to response the drag events
          draggable: true,
        });

        const bbox = label?.getBBox?.();
        const padding = (cfg?.labelCfg as any)?.background?.padding ?? [2, 4, 2, 4];
        const backgroundWidth = bbox?.width + padding[1] + padding[3];
        const backgroundHeight = bbox?.height + padding[0] + padding[2];

        group?.addShape?.('rect', {
          name: 'text-bg-shape',
          attrs: {
            x: bbox.minX - padding[3],
            y: bbox.minY - padding[0],
            fill: '#ffffff',
            fillOpacity: 0.1,
            padding,
            radius: 2,
            width: backgroundWidth,
            height: backgroundHeight,
          },
        });
      }

      return keyShape;
    },
  },
  'circle',
);

registerEdge(
  'circles-running',
  {
    afterDraw(_, group) {
      const circleCount = 4;
      const shape = group?.get('children')[0];

      const _loop = function _loop(i: number) {
        const circle = group?.addShape('circle', {
          attrs: {
            x: 0,
            y: 0,
            r: 1,
            opacity: 1,
            fill: '#D03801',
          },
          name: 'circle-shape',
        });
        circle?.animate(
          (ratio: number) => {
            ratio += i / circleCount;
            if (ratio > 1) {
              ratio %= 1;
            }
            const tmpPoint = shape.getPoint(ratio);

            return {
              x: tmpPoint.x,
              y: tmpPoint.y,
              fillOpacity: 0.8,
            };
          },
          {
            repeat: true,
            duration: 10 * 1000,
            easing: 'easeLinear',
          },
        );
      };

      for (let i = 0; i < circleCount; i++) {
        _loop(i);
      }
    },
  },
  'cubic-vertical',
);
