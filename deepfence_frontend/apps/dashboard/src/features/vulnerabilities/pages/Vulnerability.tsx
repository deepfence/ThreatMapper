import { Suspense } from 'react';
import { HiArrowSmRight, HiArrowUp } from 'react-icons/hi';
import { IconContext } from 'react-icons/lib';
import { Await, useLoaderData } from 'react-router-dom';
import { Card } from 'ui-components';

import { getSearchApiClient, getVulnerabilityApiClient } from '@/api/api';
import {
  ModelContainer,
  ModelContainerImage,
  ModelHost,
  ModelNodeIdentifierNodeTypeEnum,
} from '@/api/generated';
import { DFLink } from '@/components/DFLink';
import { MostExploitableChartVertial } from '@/features/vulnerabilities/components/landing/MostExploitableChartVertical';
import { MostExploitableCount } from '@/features/vulnerabilities/components/landing/MostExploitablesVulnerabilities';
import { TopAttackPaths } from '@/features/vulnerabilities/components/landing/TopAttackPaths';
import { TopNVulnerableCard } from '@/features/vulnerabilities/components/landing/TopNVulnerableCard';
import { TopNVulnerableChartData } from '@/features/vulnerabilities/components/landing/TopNVulnerableChart';
import { UniqueVulnerabilitiesCount } from '@/features/vulnerabilities/components/landing/UniqueVulnerabilities';
import { UniqueVulnerabilitiesCountVertical } from '@/features/vulnerabilities/components/landing/UniqueVulnerabilitiesVertical';
import { useTheme } from '@/theme/ThemeContext';
import { ApiError, makeRequest } from '@/utils/api';
import { typedDefer, TypedDeferredData } from '@/utils/router';

const CardViewType: any = 'vertical';

async function getTop5VulnerableImageData(nodeType: 'image' | 'host' | 'container') {
  const top5Nodes = await makeRequest({
    apiFunction: {
      [ModelNodeIdentifierNodeTypeEnum.Image]: getSearchApiClient().searchContainerImages,
      [ModelNodeIdentifierNodeTypeEnum.Host]: getSearchApiClient().searchHosts,
      [ModelNodeIdentifierNodeTypeEnum.Container]: getSearchApiClient().searchContainers,
    }[nodeType],
    apiArgs: [
      {
        searchSearchNodeReq: {
          node_filter: {
            filters: {
              contains_filter: {
                filter_in: {},
              },
              match_filter: {
                filter_in: {},
              },
              order_filter: {
                order_field: 'vulnerabilities_count',
              },
            },
            in_field_filter: [],
          },
          window: {
            offset: 0,
            size: 5,
          },
        },
      },
    ],
  });
  if (ApiError.isApiError(top5Nodes)) {
    throw new Error('error getting top 5 container images');
  }
  const top5NodeScans = await makeRequest({
    apiFunction: getVulnerabilityApiClient().listVulnerabilityScans,
    apiArgs: [
      {
        modelScanListReq: {
          node_ids: top5Nodes.map((node) => {
            return {
              node_id: node.node_id,
              node_type: nodeType,
            };
          }),
          window: {
            offset: 0,
            size: 1,
          },
        },
      },
    ],
  });
  if (ApiError.isApiError(top5NodeScans)) {
    throw new Error('error getting top 5 container image scans');
  }

  return top5Nodes.map((node) => {
    const latestScan = top5NodeScans.scans_info?.find(
      (scan) => (scan.node_id = node.node_id),
    );
    let name = '';
    if (nodeType === 'image') {
      name = `${(node as ModelContainerImage).docker_image_name}:${
        (node as ModelContainerImage).docker_image_tag
      }`;
    } else if (nodeType === 'container') {
      name = (node as ModelContainer).host_name;
    } else if (nodeType === 'host') {
      name = (node as ModelHost).host_name;
    }
    return {
      name,
      critical: latestScan?.severity_counts?.critical ?? 0,
      high: latestScan?.severity_counts?.high ?? 0,
      medium: latestScan?.severity_counts?.medium ?? 0,
      low: latestScan?.severity_counts?.low ?? 0,
    };
  });
}

type LoaderData = {
  imageSeverityResults: Array<TopNVulnerableChartData>;
  hostSeverityResults: Array<TopNVulnerableChartData>;
  containerSeverityResults: Array<TopNVulnerableChartData>;
};

const loader = async (): Promise<TypedDeferredData<LoaderData>> => {
  return typedDefer({
    imageSeverityResults: getTop5VulnerableImageData('image'),
    hostSeverityResults: getTop5VulnerableImageData('host'),
    containerSeverityResults: getTop5VulnerableImageData('container'),
  });
};

const Vulnerability = () => {
  const { mode } = useTheme();
  const loaderData = useLoaderData() as LoaderData;
  return (
    <div>
      <div className="flex flex-col p-2 w-full shadow bg-white dark:bg-gray-800">
        <span className="text-md font-medium text-gray-700 dark:text-gray-200 uppercase">
          Vulnerabilities
        </span>
      </div>
      <div className="m-2 grid grid-cols-6 gap-2">
        <div className="col-span-2">
          <Suspense
            fallback={
              <TopNVulnerableCard
                title="Top Vulnerable Running Containers"
                link="/vulnerability/scans?nodeType=container"
                data={[]}
                loading
              />
            }
          >
            <Await resolve={loaderData.containerSeverityResults}>
              {(resolvedData: LoaderData['containerSeverityResults']) => {
                return (
                  <TopNVulnerableCard
                    title="Top Vulnerable Running Containers"
                    link="/vulnerability/scans?nodeType=container"
                    data={resolvedData}
                  />
                );
              }}
            </Await>
          </Suspense>
        </div>
        <div className="col-span-2">
          <Suspense
            fallback={
              <TopNVulnerableCard
                title="Top Vulnerable Running Hosts"
                link="/vulnerability/scans?nodeType=host"
                data={[]}
                loading
              />
            }
          >
            <Await resolve={loaderData.hostSeverityResults}>
              {(resolvedData: LoaderData['hostSeverityResults']) => {
                return (
                  <TopNVulnerableCard
                    title="Top Vulnerable Running Hosts"
                    link="/vulnerability/scans?nodeType=host"
                    data={resolvedData}
                  />
                );
              }}
            </Await>
          </Suspense>
        </div>
        <div className="col-span-2">
          <Suspense
            fallback={
              <TopNVulnerableCard
                title="Top Vulnerable Running Container Images"
                link="/vulnerability/scans?nodeType=container_image"
                data={[]}
                loading
              />
            }
          >
            <Await resolve={loaderData.imageSeverityResults}>
              {(resolvedData: LoaderData['imageSeverityResults']) => {
                return (
                  <TopNVulnerableCard
                    title="Top Vulnerable Running Container Images"
                    link="/vulnerability/scans?nodeType=container_image"
                    data={resolvedData}
                  />
                );
              }}
            </Await>
          </Suspense>
        </div>

        <div className="col-span-3">
          <TopAttackPaths />
        </div>

        {CardViewType === 'horizontal' && (
          <div className="col-span-3 flex flex-col gap-2">
            <Card className="flex flex-1 p-2">
              <div className="flex flex-col flex-1">
                <div className="p-2 flex">
                  <h4 className="text-gray-900 text-sm dark:text-white">
                    Most Exploitable Vulnerabilities
                  </h4>
                  <DFLink
                    to={'/vulnerability/most-exploitable'}
                    className="flex hover:no-underline ml-auto mr-2"
                  >
                    <span className="text-xs text-blue-600 dark:text-blue-500">
                      Details
                    </span>
                    <IconContext.Provider
                      value={{
                        className: 'text-blue-600 dark:text-blue-500 ',
                      }}
                    >
                      <HiArrowSmRight />
                    </IconContext.Provider>
                  </DFLink>
                </div>
                <MostExploitableCount theme={mode} />
              </div>
            </Card>
            <Card className="flex flex-1 p-2">
              <div className="flex flex-col flex-1">
                <div className="p-2 flex">
                  <h4 className="text-gray-900 text-sm dark:text-white">
                    Unique Vulnerabilities
                  </h4>
                  <DFLink
                    to={'/vulnerability/most-exploitable'}
                    className="flex hover:no-underline ml-auto mr-2"
                  >
                    <span className="text-xs text-blue-600 dark:text-blue-500">
                      Details
                    </span>
                    <IconContext.Provider
                      value={{
                        className: 'text-blue-600 dark:text-blue-500 ',
                      }}
                    >
                      <HiArrowSmRight />
                    </IconContext.Provider>
                  </DFLink>
                </div>
                <UniqueVulnerabilitiesCount theme={mode} />
              </div>
            </Card>
          </div>
        )}

        {CardViewType === 'vertical' && (
          <div className="col-span-3 flex gap-2 min-h-full">
            {['Unique Vulnerabilities', 'Most Exploitable Vulnerabilities'].map(
              (type) => {
                return (
                  <div className="flex-1" key={type}>
                    <Card className="flex h-full p-2">
                      <div className="flex flex-col flex-1">
                        <div className="p-2 flex">
                          <h4 className="text-gray-900 text-sm dark:text-white">
                            {type}
                          </h4>
                          <DFLink
                            to={'/vulnerability/most-exploitable'}
                            className="flex hover:no-underline ml-auto mr-2"
                          >
                            <span className="text-xs text-blue-600 dark:text-blue-500">
                              Details
                            </span>
                            <IconContext.Provider
                              value={{
                                className: 'text-blue-600 dark:text-blue-500 ',
                              }}
                            >
                              <HiArrowSmRight />
                            </IconContext.Provider>
                          </DFLink>
                        </div>
                        <div className="flex flex-col gap-2 items-center justify-center">
                          <div className="flex-1 min-h-[250px] self-stretch">
                            <MostExploitableChartVertial theme={mode} />
                          </div>
                          <div className="flex-1 pt-4">
                            <div className="flex gap-4">
                              <div className="text-[2.5rem] text-gray-900 dark:text-gray-200 font-light">
                                923
                              </div>
                              <div>
                                <div className="text-base text-gray-400 dark:text-gray-500 pt-1">
                                  {type}
                                </div>
                                <div className="flex text-red-500 dark:text-red-400 items-center">
                                  <IconContext.Provider
                                    value={{
                                      className: 'text-red-500 dark:text-red-400',
                                    }}
                                  >
                                    <HiArrowUp />
                                  </IconContext.Provider>
                                  <div>+30 NEW</div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div>
                            <UniqueVulnerabilitiesCountVertical />
                          </div>
                        </div>
                      </div>
                    </Card>
                  </div>
                );
              },
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export const module = {
  loader,
  element: <Vulnerability />,
};
