import cx from 'classnames';
import { capitalize, replace, truncate } from 'lodash-es';
import { Suspense, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { RefObject } from 'react';
import { FaHistory } from 'react-icons/fa';
import { FiFilter } from 'react-icons/fi';
import {
  HiArchive,
  HiArrowSmLeft,
  HiBell,
  HiDotsVertical,
  HiExternalLink,
  HiEye,
  HiEyeOff,
  HiOutlineExclamationCircle,
} from 'react-icons/hi';
import { IconContext } from 'react-icons/lib';
import {
  ActionFunctionArgs,
  Await,
  generatePath,
  LoaderFunctionArgs,
  Outlet,
  useFetcher,
  useLoaderData,
  useSearchParams,
} from 'react-router-dom';
import { Form } from 'react-router-dom';
import {
  Badge,
  Button,
  Card,
  CircleSpinner,
  createColumnHelper,
  Dropdown,
  DropdownItem,
  getRowSelectionColumn,
  IconButton,
  Modal,
  RowSelectionState,
  Select,
  SelectItem,
  Table,
  TableSkeleton,
} from 'ui-components';
import { ModalHeader, SlidingModal } from 'ui-components';

import { getScanResultsApiClient, getVulnerabilityApiClient } from '@/api/api';
import {
  ApiDocsBadRequestResponse,
  ModelScanResultsActionRequestScanTypeEnum,
} from '@/api/generated';
import { DFLink } from '@/components/DFLink';
import { VulnerabilityIcon } from '@/components/sideNavigation/icons/Vulnerability';
import { ApiVulnerableLoaderDataType } from '@/features/vulnerabilities/api/apiLoader';
import { MostExploitableChart } from '@/features/vulnerabilities/components/landing/MostExploitableChart';
import { Mode, useTheme } from '@/theme/ThemeContext';
import { ApiError, makeRequest } from '@/utils/api';
import { formatMilliseconds } from '@/utils/date';
import { typedDefer, TypedDeferredData } from '@/utils/router';
import { usePageNavigation } from '@/utils/usePageNavigation';

export interface FocusableElement {
  focus(options?: FocusOptions): void;
}
enum ActionEnumType {
  MASK = 'mask',
  UNMASK = 'unmask',
  DELETE = 'delete',
  NOTIFY = 'notify',
}
type TableType = {
  cveId: string;
  package: string;
  severity: string;
  description: string;
  link: string;
  action?: null;
};
type ScanResult = {
  totalSeverity: number;
  severityCounts: { [key: string]: number };
  hostName: string;
  nodeType: string;
  nodeId: string;
  timestamp: number;
  tableData: TableType[];
};

export type LoaderDataType = {
  error?: string;
  message?: string;
  data: ScanResult;
};

const emptyData = {
  totalSeverity: 0,
  severityCounts: {},
  hostName: '',
  nodeType: '',
  nodeId: '',
  timestamp: 0,
  tableData: [],
};

const getSeveritySearch = (searchParams: URLSearchParams) => {
  return searchParams.getAll('severity');
};

async function getScans(
  scanId: string,
  searchParams: URLSearchParams,
): Promise<ScanResult> {
  const severity = getSeveritySearch(searchParams);
  const filters = {} as {
    cve_severity: string[];
  };
  if (severity.length) {
    filters.cve_severity = severity;
  }
  const result = await makeRequest({
    apiFunction: getVulnerabilityApiClient().resultVulnerabilityScan,
    apiArgs: [
      {
        modelScanResultsReq: {
          fields_filter: {
            contains_filter: {
              filter_in: {
                ...filters,
              },
            },
            match_filter: { filter_in: {} },
            order_filter: { order_field: '' },
          },
          scan_id: scanId,
          window: {
            offset: 0,
            size: 1000000,
          },
        },
      },
    ],
    errorHandler: async (r) => {
      const error = new ApiError<LoaderDataType>({ data: emptyData });
      if (r.status === 400) {
        const modelResponse: ApiDocsBadRequestResponse = await r.json();
        return error.set({
          message: modelResponse.message,
          data: emptyData,
        });
      }
    },
  });

  if (ApiError.isApiError(result)) {
    throw result.value();
  }

  if (result === null) {
    return emptyData;
  }
  const totalSeverity = Object.values(result.severity_counts ?? {}).reduce(
    (acc, value) => {
      acc = acc + value;
      return acc;
    },
    0,
  );

  const vulnerabilities =
    result?.vulnerabilities?.map((res) => {
      return {
        cveId: res.cve_id,
        package: res.cve_caused_by_package,
        severity: res.cve_severity,
        description: res.cve_description,
        link: res.cve_link,
      };
    }) ?? [];

  return {
    totalSeverity,
    severityCounts: result.severity_counts ?? {},
    hostName: result.host_name,
    nodeType: result.node_type,
    nodeId: result.node_id,
    timestamp: result.updated_at,
    tableData: vulnerabilities,
  };
}

type ActionFunctionType =
  | ReturnType<typeof getScanResultsApiClient>['deleteVulnerabilities']
  | ReturnType<typeof getScanResultsApiClient>['maskVulnerabilities']
  | ReturnType<typeof getScanResultsApiClient>['notifyVulnerabilities']
  | ReturnType<typeof getScanResultsApiClient>['unMaskVulnerabilities'];

const action = async ({
  params: { scanId = '' },
  request,
}: ActionFunctionArgs): Promise<null> => {
  const formData = await request.formData();
  const cveIds = (formData.getAll('cveIds[]') ?? []) as string[];
  const actionType = formData.get('actionType');
  const _scanId = scanId;
  const mask = formData.get('maskHostAndImages');
  if (!_scanId) {
    throw new Error('Scan ID is required');
  }
  if (!actionType) {
    return null;
  }

  let result = null;
  let apiFunction: ActionFunctionType | null = null;
  if (actionType === ActionEnumType.DELETE || actionType === ActionEnumType.NOTIFY) {
    apiFunction =
      actionType === ActionEnumType.DELETE
        ? getScanResultsApiClient().deleteVulnerabilities
        : getScanResultsApiClient().notifyVulnerabilities;
    result = await makeRequest({
      apiFunction: apiFunction,
      apiArgs: [
        {
          modelScanResultsActionRequest: {
            node_ids: [...cveIds],
            scan_id: _scanId,
            scan_type: ModelScanResultsActionRequestScanTypeEnum.VulnerabilityScan,
          },
        },
      ],
      errorHandler: async (r) => {
        const error = new ApiError<{
          message?: string;
        }>({});
        if (r.status === 400 || r.status === 409) {
          const modelResponse: ApiDocsBadRequestResponse = await r.json();
          return error.set({
            message: modelResponse.message ?? '',
          });
        }
      },
    });
  } else if (actionType === ActionEnumType.MASK || actionType === ActionEnumType.UNMASK) {
    apiFunction =
      actionType === ActionEnumType.MASK
        ? getScanResultsApiClient().maskVulnerabilities
        : getScanResultsApiClient().unMaskVulnerabilities;
    result = await makeRequest({
      apiFunction: apiFunction,
      apiArgs: [
        {
          modelScanResultsMaskRequest: {
            mask_across_hosts_and_images: mask === 'maskHostAndImages',
            node_ids: [...cveIds],
            scan_id: _scanId,
            scan_type: ModelScanResultsActionRequestScanTypeEnum.VulnerabilityScan,
          },
        },
      ],
      errorHandler: async (r) => {
        const error = new ApiError<{
          message?: string;
        }>({});
        if (r.status === 400 || r.status === 409) {
          const modelResponse: ApiDocsBadRequestResponse = await r.json();
          return error.set({
            message: modelResponse.message ?? '',
          });
        }
      },
    });
  }

  if (ApiError.isApiError(result)) {
    // TODO: Handle error toasts message
    return null;
  }
  return null;
};

const loader = async ({
  params,
  request,
}: LoaderFunctionArgs): Promise<TypedDeferredData<LoaderDataType>> => {
  const scanId = params?.scanId ?? '';

  const searchParams = new URL(request.url).searchParams;

  return typedDefer({
    data: getScans(scanId, searchParams),
  });
};

const FilterHeader = () => {
  return (
    <ModalHeader>
      <div className="flex gap-x-2 items-center p-4">
        <span className="font-medium text-lg">Filters</span>
      </div>
    </ModalHeader>
  );
};

const ScanResultFilterModal = ({
  showFilter,
  elementToFocusOnClose,
  setShowFilter,
}: {
  elementToFocusOnClose: RefObject<FocusableElement> | null;
  showFilter: boolean;
  setShowFilter: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  const [searchParams, setSearchParams] = useSearchParams();
  return (
    <SlidingModal
      header={<FilterHeader />}
      open={showFilter}
      onOpenChange={() => setShowFilter(false)}
      elementToFocusOnCloseRef={elementToFocusOnClose}
      width={'w-[350px]'}
    >
      <div className="dark:text-white p-4">
        <div className="flex flex-col gap-y-6">
          <fieldset>
            <Select
              noPortal
              name="severity"
              label={'Severity'}
              placeholder="Select Severity"
              value={searchParams.getAll('severity')}
              sizing="xs"
              onChange={(value) => {
                setSearchParams((prev) => {
                  prev.delete('severity');
                  value.forEach((language) => {
                    prev.append('severity', language);
                  });
                  return prev;
                });
              }}
            >
              {['critical', 'high', 'medium', 'low', 'unknown'].map(
                (severity: string) => {
                  return (
                    <SelectItem value={severity} key={severity}>
                      {capitalize(severity)}
                    </SelectItem>
                  );
                },
              )}
            </Select>
          </fieldset>
        </div>
      </div>
    </SlidingModal>
  );
};
const DeleteConfirmationModal = ({
  showDialog,
  ids,
}: {
  showDialog: boolean;
  ids: string[];
}) => {
  const fetcher = useFetcher();
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    setIsOpen(showDialog);
  }, [showDialog]);

  const onDeleteAction = useCallback(
    (actionType: string) => {
      const formData = new FormData();
      formData.append('actionType', actionType);
      ids.forEach((item) => formData.append('cveIds[]', item));
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [ids, fetcher],
  );

  return (
    <Modal open={isOpen} onOpenChange={() => setIsOpen(false)}>
      <div className="grid place-items-center">
        <IconContext.Provider
          value={{
            className: 'mb-3 dark:text-red-600 text-red-400 w-[70px] h-[70px]',
          }}
        >
          <HiOutlineExclamationCircle />
        </IconContext.Provider>
        <h3 className="mb-4 font-normal text-sm">
          The selected vulnerabilities will be deleted. Are you sure you want to delete?
        </h3>
        <div className="flex items-center justify-right gap-4">
          <Button size="xs" onClick={() => setIsOpen(false)}>
            No, cancel
          </Button>
          <Button
            size="xs"
            color="danger"
            onClick={() => {
              onDeleteAction(ActionEnumType.DELETE);
              setIsOpen(false);
            }}
          >
            Yes, I&apos;m sure
          </Button>
        </div>
      </div>
    </Modal>
  );
};
const MaskTypeSelectionModal = ({
  showDialog,
  ids,
  type,
}: {
  showDialog: boolean;
  ids: string[];
  type: string;
}) => {
  const fetcher = useFetcher();
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    setIsOpen(showDialog);
  }, [showDialog]);

  const onMaskAction = useCallback(
    (maskHostAndImages: string) => {
      const formData = new FormData();
      formData.append('actionType', type);
      formData.append('maskHostAndImages', maskHostAndImages);
      ids.forEach((item) => formData.append('cveIds[]', item));
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [ids, fetcher],
  );

  return (
    <Modal open={isOpen} onOpenChange={() => setIsOpen(false)}>
      <div className="grid place-items-center">
        <IconContext.Provider
          value={{
            className: 'mb-3 dark:text-gray--400 text-gray-700 w-[70px] h-[70px]',
          }}
        >
          {type === ActionEnumType.MASK ? <HiEyeOff /> : <HiEye />}
        </IconContext.Provider>
        <h3 className="mb-4 font-normal text-sm">Select your masking option</h3>
        <div className="flex flex-col gap-1">
          <Button
            onClick={() => {
              onMaskAction('');
              setIsOpen(false);
            }}
            color="normal"
            size="sm"
            className="itmes-start"
          >
            {capitalize(type)}&nbsp;this vulnerability
          </Button>
          <Button
            onClick={() => {
              onMaskAction('maskHostAndImages');
              setIsOpen(false);
            }}
            color="normal"
            size="sm"
            className="items-start"
          >
            {capitalize(type)}&nbsp;this vulnerability across host and images
          </Button>
        </div>
      </div>
    </Modal>
  );
};
const HistoryDropdown = () => {
  const { navigate } = usePageNavigation();
  const fetcher = useFetcher<ApiVulnerableLoaderDataType>();
  const loaderData = useLoaderData() as LoaderDataType;
  const isSubmitting = fetcher.state === 'loading';

  const onHistoryClick = (nodeType: string, nodeId: string) => {
    fetcher.load(
      generatePath('/_api/vulnerability/scan-results/history/:nodeType/:nodeId', {
        nodeId: nodeId,
        nodeType: nodeType,
      }),
    );
  };

  return (
    <Suspense fallback={<CircleSpinner size="xs" />}>
      <Await resolve={loaderData.data ?? []}>
        {(resolvedData: LoaderDataType['data']) => {
          return (
            <>
              {!isSubmitting && !fetcher.data ? (
                <IconButton
                  size="xs"
                  color="normal"
                  className="rounded-lg bg-transparent"
                  icon={<FaHistory />}
                  onClick={() => {
                    onHistoryClick(resolvedData.nodeType, resolvedData.nodeId);
                  }}
                />
              ) : (
                <Dropdown
                  triggerAsChild={true}
                  open={!!fetcher.data}
                  content={
                    <>
                      {fetcher?.data?.data?.map((item) => {
                        return (
                          <DropdownItem
                            className="text-sm"
                            key={item.scanId}
                            onClick={() => {
                              navigate(
                                generatePath('/vulnerability/scan-results/:scanId', {
                                  scanId: item.scanId,
                                }),
                                {
                                  replace: true,
                                },
                              );
                            }}
                          >
                            <span className="flex items-center text-gray-700 dark:text-gray-400">
                              {formatMilliseconds(item.updatedAt)}
                            </span>
                          </DropdownItem>
                        );
                      })}
                    </>
                  }
                >
                  <IconButton
                    size="xs"
                    color="normal"
                    className="rounded-lg bg-transparent"
                    icon={<FaHistory />}
                    type="button"
                    loading={isSubmitting}
                  />
                </Dropdown>
              )}
            </>
          );
        }}
      </Await>
    </Suspense>
  );
};
const MaskDropdown = ({ ids }: { ids: string[] }) => {
  const fetcher = useFetcher();

  const onMaskAction = useCallback(
    (maskHostAndImages: string) => {
      const formData = new FormData();
      formData.append('actionType', ActionEnumType.MASK);
      formData.append('maskHostAndImages', maskHostAndImages);
      ids.forEach((item) => formData.append('cveIds[]', item));
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [ids, fetcher],
  );

  return (
    <Dropdown
      triggerAsChild={true}
      content={
        <>
          <DropdownItem className="text-sm" onClick={() => onMaskAction('')}>
            <span className="flex items-center gap-x-2 text-gray-700 dark:text-gray-400">
              <IconContext.Provider
                value={{ className: 'text-gray-700 dark:text-gray-400' }}
              >
                <HiEyeOff />
              </IconContext.Provider>
              Mask this vulnerability
            </span>
          </DropdownItem>
          <DropdownItem
            className="text-sm"
            onClick={() => onMaskAction('maskHostAndImages')}
          >
            <span className="flex items-center gap-x-2 text-gray-700 dark:text-gray-400">
              <IconContext.Provider
                value={{ className: 'text-gray-700 dark:text-gray-400' }}
              >
                <HiEyeOff />
              </IconContext.Provider>
              Mask this vulnerability across host and images
            </span>
          </DropdownItem>
        </>
      }
    >
      <Button
        size="xs"
        color="normal"
        className="hover:bg-transparent"
        startIcon={<HiEyeOff />}
        type="button"
      >
        Mask
      </Button>
    </Dropdown>
  );
};
const UnMaskDropdown = ({ ids }: { ids: string[] }) => {
  const fetcher = useFetcher();

  const onUnMaskAction = useCallback(
    (unMaskHostAndImages: string) => {
      const formData = new FormData();
      formData.append('actionType', ActionEnumType.UNMASK);
      formData.append('maskHostAndImages', unMaskHostAndImages);
      ids.forEach((item) => formData.append('cveIds[]', item));
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [ids],
  );

  return (
    <Dropdown
      triggerAsChild={true}
      content={
        <>
          <DropdownItem className="text-sm" onClick={() => onUnMaskAction('')}>
            <span className="flex items-center gap-x-2 text-gray-700 dark:text-gray-400">
              <IconContext.Provider
                value={{ className: 'text-gray-700 dark:text-gray-400' }}
              >
                <HiEye />
              </IconContext.Provider>
              Unmask this vulnerability
            </span>
          </DropdownItem>
          <DropdownItem
            className="text-sm"
            onClick={() => onUnMaskAction('maskHostAndImages')}
          >
            <span className="flex items-center gap-x-2 text-gray-700 dark:text-gray-400">
              <IconContext.Provider
                value={{ className: 'text-gray-700 dark:text-gray-400' }}
              >
                <HiEye />
              </IconContext.Provider>
              Unmask this vulnerability across host and images
            </span>
          </DropdownItem>
        </>
      }
    >
      <Button
        size="xs"
        color="normal"
        className="hover:bg-transparent"
        startIcon={<HiEye />}
        type="button"
      >
        Un mask
      </Button>
    </Dropdown>
  );
};
const ActionDropdown = ({
  icon,
  ids,
  label,
}: {
  icon: React.ReactNode;
  ids: string[];
  label?: string;
}) => {
  const fetcher = useFetcher();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [mask, setMask] = useState({
    show: false,
    type: '',
  });

  const onTableAction = useCallback(
    (actionType: string) => {
      const formData = new FormData();
      formData.append('actionType', actionType);
      ids.forEach((item) => formData.append('cveIds[]', item));
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [ids],
  );

  return (
    <>
      <MaskTypeSelectionModal
        showDialog={mask.show}
        ids={Object.keys(ids)}
        type={mask.type}
      />
      <DeleteConfirmationModal showDialog={showDeleteDialog} ids={ids} />
      <Dropdown
        triggerAsChild={true}
        content={
          <>
            <DropdownItem
              className="text-sm"
              onClick={() =>
                setMask({
                  show: true,
                  type: ActionEnumType.MASK,
                })
              }
            >
              <span className="flex items-center gap-x-2 text-gray-700 dark:text-gray-400">
                <IconContext.Provider
                  value={{ className: 'text-gray-700 dark:text-gray-400' }}
                >
                  <HiEyeOff />
                </IconContext.Provider>
                Mask
              </span>
            </DropdownItem>
            <DropdownItem
              className="text-sm"
              onClick={() =>
                setMask({
                  show: true,
                  type: ActionEnumType.MASK,
                })
              }
            >
              <span className="flex items-center gap-x-2 text-gray-700 dark:text-gray-400">
                <IconContext.Provider
                  value={{ className: 'text-gray-700 dark:text-gray-400' }}
                >
                  <HiEye />
                </IconContext.Provider>
                Un Mask
              </span>
            </DropdownItem>
            <DropdownItem
              className="text-sm"
              onClick={() => onTableAction(ActionEnumType.NOTIFY)}
            >
              <span className="flex items-center gap-x-2 text-gray-700 dark:text-gray-400">
                <IconContext.Provider
                  value={{ className: 'text-gray-700 dark:text-gray-400' }}
                >
                  <HiBell />
                </IconContext.Provider>
                Notify
              </span>
            </DropdownItem>
            <DropdownItem
              className="text-sm"
              onClick={() => {
                setShowDeleteDialog(true);
              }}
            >
              <span className="flex items-center gap-x-2 text-red-700 dark:text-red-400">
                <IconContext.Provider
                  value={{ className: 'text-red-700 dark:text-red-400' }}
                >
                  <HiArchive />
                </IconContext.Provider>
                Delete
              </span>
            </DropdownItem>
          </>
        }
      >
        <Button size="xs" color="normal" className="hover:bg-transparent">
          <IconContext.Provider value={{ className: 'text-gray-700 dark:text-gray-400' }}>
            {icon}
          </IconContext.Provider>
          {label ? <span className="ml-2">{label}</span> : null}
        </Button>
      </Dropdown>
    </>
  );
};
const CVETable = () => {
  const fetcher = useFetcher();
  const loaderData = useLoaderData() as LoaderDataType;
  const columnHelper = createColumnHelper<TableType>();
  const [searchParams] = useSearchParams();
  const [rowSelectionState, setRowSelectionState] = useState<RowSelectionState>({});
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);

  const columns = useMemo(() => {
    const columns = [
      getRowSelectionColumn(columnHelper, {
        size: 0,
        minSize: 0,
        maxSize: 0,
      }),

      columnHelper.accessor('cveId', {
        enableSorting: false,
        cell: (info) => (
          <DFLink
            to={{
              pathname: `./${info.getValue()}`,
              search: searchParams.toString(),
            }}
            className="flex items-center gap-x-2"
          >
            <>
              <div className="p-2 bg-gray-100 dark:bg-gray-500/10 rounded-lg">
                <div className="w-5 h-5">
                  <VulnerabilityIcon />
                </div>
              </div>
              {info.getValue()}
            </>
          </DFLink>
        ),
        header: () => 'CVE ID',
        minSize: 200,
        size: 200,
        maxSize: 250,
      }),
      columnHelper.accessor('package', {
        enableSorting: true,
        cell: (info) => info.getValue(),
        header: () => 'Package',
        minSize: 100,
        size: 250,
        maxSize: 250,
      }),
      columnHelper.accessor('severity', {
        enableSorting: false,
        cell: (info) => (
          <Badge
            label={info.getValue().toUpperCase()}
            className={cx({
              'bg-red-100 dark:bg-red-600/10 text-red-600 dark:text-red-400':
                info.getValue().toLowerCase() === 'critical',
              'bg-pink-100 dark:bg-pink-600/10 text-pink-600 dark:text-pink-400':
                info.getValue().toLowerCase() === 'high',
              'bg-blue-100 dark:bg-blue-600/10 text-blue-600 dark:text-blue-400':
                info.getValue().toLowerCase() === 'medium',
              'bg-yellow-300/20 dark:bg-yellow-400/10 text-yellow-500 dark:text-yellow-400':
                info.getValue().toLowerCase() === 'low',
            })}
            size="sm"
          />
        ),
        header: () => 'Severity',
        minSize: 60,
        size: 80,
        maxSize: 80,
      }),
      columnHelper.accessor('description', {
        enableSorting: false,
        cell: (info) => truncate(info.getValue(), { length: 40 }) || 'N/A',
        header: () => 'Description',
        minSize: 300,
        size: 400,
        maxSize: 400,
      }),
      columnHelper.accessor('link', {
        enableSorting: false,
        cell: (info) => (
          <DFLink to={info.getValue()} target="_blank" rel="noopener noreferrer">
            <IconContext.Provider
              value={{
                className: 'w-4 h-4',
              }}
            >
              <HiExternalLink />
            </IconContext.Provider>
          </DFLink>
        ),
        header: () => 'Link',
        minSize: 30,
        size: 50,
        maxSize: 50,
      }),
      columnHelper.accessor('action', {
        enableSorting: false,
        cell: (info) => (
          <ActionDropdown icon={<HiDotsVertical />} ids={[info.row.original.cveId]} />
        ),
        header: () => '',
        minSize: 10,
        size: 10,
        maxSize: 10,
      }),
    ];

    return columns;
  }, []);

  const onTableAction = useCallback(
    (actionType: string) => {
      const formData = new FormData();
      formData.append('actionType', actionType);
      Object.keys(rowSelectionState).forEach((item) => formData.append('cveIds[]', item));
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [rowSelectionState],
  );

  return (
    <>
      <Suspense fallback={<TableSkeleton columns={10} rows={10} size={'md'} />}>
        <Await resolve={loaderData.data ?? []}>
          {(resolvedData: LoaderDataType['data']) => {
            return (
              <Form>
                {Object.keys(rowSelectionState).length === 0 ? (
                  <div className="text-sm text-gray-400 font-medium py-2.5">
                    No rows selected
                  </div>
                ) : (
                  <>
                    <DeleteConfirmationModal
                      showDialog={showDeleteDialog}
                      ids={Object.keys(rowSelectionState)}
                    />
                    <div className="mb-2 flex gap-x-2">
                      <Button
                        size="xs"
                        color="normal"
                        className="hover:bg-transparent"
                        startIcon={<HiArchive />}
                        onClick={() => setShowDeleteDialog(true)}
                      >
                        Delete
                      </Button>
                      <MaskDropdown ids={Object.keys(rowSelectionState)} />
                      <UnMaskDropdown ids={Object.keys(rowSelectionState)} />
                      <Button
                        size="xs"
                        color="normal"
                        className="hover:bg-transparent"
                        startIcon={<HiBell />}
                        onClick={() => onTableAction(ActionEnumType.NOTIFY)}
                      >
                        Notify
                      </Button>
                    </div>
                  </>
                )}

                <Table
                  size="sm"
                  data={resolvedData.tableData}
                  columns={columns}
                  enableRowSelection
                  rowSelectionState={rowSelectionState}
                  onRowSelectionChange={setRowSelectionState}
                  enableSorting
                  enablePagination
                  manualPagination
                  getRowId={(row) => row.cveId}
                />
              </Form>
            );
          }}
        </Await>
      </Suspense>
    </>
  );
};

const HeaderComponent = ({
  elementToFocusOnClose,
  setShowFilter,
}: {
  elementToFocusOnClose: React.MutableRefObject<null>;
  setShowFilter: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  const [searchParams] = useSearchParams();
  const loaderData = useLoaderData() as LoaderDataType;
  const isFilterApplied = searchParams.has('severity');

  return (
    <div className="flex p-2 pl-2 w-full items-center shadow bg-white dark:bg-gray-800">
      <Suspense fallback={<CircleSpinner size="xs" />}>
        <Await resolve={loaderData.data ?? []}>
          {(resolvedData: LoaderDataType['data']) => {
            const { nodeType, hostName } = resolvedData;
            return (
              <>
                <DFLink
                  to={`/vulnerability/scans?nodeType=${nodeType}`}
                  className="flex hover:no-underline items-center justify-center  mr-2"
                >
                  <IconContext.Provider
                    value={{
                      className: 'w-5 h-5 text-blue-600 dark:text-blue-500 ',
                    }}
                  >
                    <HiArrowSmLeft />
                  </IconContext.Provider>
                </DFLink>
                <span className="text-sm font-medium text-gray-700 dark:text-gray-200">
                  VULNERABILITY SCAN RESULTS - {nodeType} / {hostName}
                </span>
              </>
            );
          }}
        </Await>
      </Suspense>
      <div className="ml-auto flex items-center gap-x-4">
        <div className="flex flex-col">
          <span className="text-xs text-gray-500 dark:text-gray-200">
            <Suspense fallback={<CircleSpinner size="xs" />}>
              <Await resolve={loaderData.data ?? []}>
                {(resolvedData: LoaderDataType['data']) => {
                  const { timestamp } = resolvedData;
                  return formatMilliseconds(timestamp);
                }}
              </Await>
            </Suspense>
          </span>
          <span className="text-gray-400 text-[10px]">Last scan</span>
        </div>
        <div className="ml-auto bg-blue-100 dark:bg-blue-500/10">
          <HistoryDropdown />
        </div>

        <div className="relative">
          {isFilterApplied && (
            <span className="absolute left-0 top-0 inline-flex h-2 w-2 rounded-full bg-blue-400 opacity-75"></span>
          )}
          <div className="ml-auto bg-blue-100 dark:bg-blue-500/10">
            <IconButton
              size="xs"
              color="normal"
              className="rounded-lg bg-transparent"
              onClick={() => setShowFilter(true)}
              icon={<FiFilter />}
            />
          </div>
        </div>
      </div>
    </div>
  );
};
const SeverityCountComponent = ({ theme }: { theme: Mode }) => {
  const loaderData = useLoaderData() as LoaderDataType;
  return (
    <Card className="p-4 grid grid-flow-row-dense gap-y-8">
      <Suspense
        fallback={
          <div className="min-h-[300px] flex items-center justify-center">
            <CircleSpinner size="md" />
          </div>
        }
      >
        <Await resolve={loaderData.data}>
          {(resolvedData: ScanResult) => {
            const { totalSeverity, severityCounts } = resolvedData;
            return (
              <>
                <div className="grid grid-flow-col-dense gap-x-4">
                  <div className="bg-red-100 dark:bg-red-500/10 rounded-lg flex items-center justify-center">
                    <div className="w-14 h-14 text-red-500 dark:text-red-400">
                      <VulnerabilityIcon />
                    </div>
                  </div>
                  <div>
                    <h4 className="text-md font-semibold text-gray-900 dark:text-gray-200 tracking-wider">
                      Total vulnerabilities
                    </h4>
                    <div className="mt-2">
                      <span className="text-2xl text-gray-900 dark:text-gray-200">
                        {totalSeverity}
                      </span>
                      <h5 className="text-xs text-gray-500 dark:text-gray-200 mb-2">
                        Total count
                      </h5>
                      <div>
                        <span className="text-sm text-gray-900 dark:text-gray-200">
                          {0}
                        </span>
                        <span className="ml-2 text-xs text-gray-500 dark:text-gray-400">
                          Active containers
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="min-h-[220px]">
                  <MostExploitableChart theme={theme} data={severityCounts} />
                </div>
                <div>
                  {Object.keys(severityCounts)?.map((key: string) => {
                    return (
                      <div key={key} className="flex items-center gap-2 p-1">
                        <div
                          className={cx('h-3 w-3 rounded-full', {
                            'bg-red-400 dark:bg-red-500':
                              key.toLowerCase() === 'critical',
                            'bg-pink-400 dark:bg-pink-500': key.toLowerCase() === 'high',
                            'bg-blue-400 dark:bg-blue-500':
                              key.toLowerCase() === 'medium',
                            'bg-yellow-400 dark:bg-yellow-500':
                              key.toLowerCase() === 'low',
                          })}
                        />
                        <span className="text-sm text-gray-500 dark:text-gray-200">
                          {capitalize(key)}
                        </span>
                        <span
                          className={cx(
                            'text-sm text-gray-900 dark:text-gray-200 ml-auto',
                          )}
                        >
                          {severityCounts[key]}
                        </span>
                      </div>
                    );
                  })}
                </div>
              </>
            );
          }}
        </Await>
      </Suspense>
    </Card>
  );
};
const VulnerabilityScanResults = () => {
  const elementToFocusOnClose = useRef(null);
  const [showFilter, setShowFilter] = useState(false);
  const { mode } = useTheme();

  return (
    <>
      <ScanResultFilterModal
        showFilter={showFilter}
        setShowFilter={setShowFilter}
        elementToFocusOnClose={elementToFocusOnClose.current}
      />
      <HeaderComponent
        elementToFocusOnClose={elementToFocusOnClose}
        setShowFilter={setShowFilter}
      />
      <div className="grid grid-cols-[400px_1fr] p-2 gap-x-2">
        <div className="self-start grid gap-y-2">
          <SeverityCountComponent theme={mode} />
        </div>
        <CVETable />
      </div>
      <Outlet />
    </>
  );
};

export const module = {
  loader,
  action,
  element: <VulnerabilityScanResults />,
};
