import { useSuspenseQuery } from '@suspensive/react-query';
import { Suspense } from 'react';
import { useParams, useSearchParams } from 'react-router-dom';
import {
  Button,
  CircleSpinner,
  SlidingModal,
  SlidingModalCloseButton,
  SlidingModalContent,
  SlidingModalHeader,
} from 'ui-components';

import { ModelVulnerability } from '@/api/generated';
import { useCopyToClipboardState } from '@/components/CopyToClipboard';
import { DFLink } from '@/components/DFLink';
import { CopyLineIcon } from '@/components/icons/common/CopyLine';
import { PopOutIcon } from '@/components/icons/common/PopOut';
import { CveCVSSScore, SeverityBadge } from '@/components/SeverityBadge';
import { VulnerabilityIcon } from '@/components/sideNavigation/icons/Vulnerability';
import { queries } from '@/queries';
import { usePageNavigation } from '@/utils/usePageNavigation';

function useGetCVEDetails() {
  const { cveId } = useParams();
  return useSuspenseQuery({
    ...queries.vulnerability.vulnerability({
      cveId: cveId ?? '',
    }),
  });
}

function processLabel(labelKey: string) {
  return labelKey
    .replaceAll('_', ' ')
    .replaceAll('cve', 'CVE')
    .replaceAll('id', 'ID')
    .replaceAll('poc', 'POC');
}

const Header = () => {
  const {
    data: { data },
  } = useGetCVEDetails();

  const { copy, isCopied } = useCopyToClipboardState();

  return (
    <SlidingModalHeader>
      <div className="pt-5 px-5 dark:bg-[linear-gradient(to_bottom,_#15253e_96px,_transparent_0)]">
        <div className="flex items-center gap-2 dark:text-text-text-and-icon">
          <div className="h-4 w-4 shrink-0">
            <VulnerabilityIcon />
          </div>
          <h3 className="text-h3">{data?.cve_id ?? '-'}</h3>
        </div>
        <div className="mt-[18px] flex">
          <div className="px-4 flex flex-col gap-2">
            <div className="dark:bg-bg-left-nav p-2 rounded flex flex-col gap-1">
              <div className="text-p9 dark:text-text-text-and-icon whitespace-nowrap">
                CVSS score
              </div>
              <div>
                <CveCVSSScore
                  score={data?.cve_overall_score ?? 0}
                  className="text-h1"
                  iconClassName="h-9 w-9"
                />
              </div>
            </div>
            <div>
              <SeverityBadge
                className="w-full max-w-none"
                severity={data?.cve_severity ?? '-'}
              />
            </div>
          </div>
          <div className="flex-1">
            <div className="flex">
              <Button
                variant="flat"
                size="sm"
                className="ml-auto"
                onClick={() => {
                  copy(JSON.stringify(data ?? {}));
                }}
                startIcon={<CopyLineIcon />}
              >
                {isCopied ? 'Copied JSON' : 'Copy JSON'}
              </Button>
            </div>
            <div className="mt-7 text-sm leading-5 dark:text-text-text-and-icon max-h-64 overflow-y-auto">
              {data?.cve_description ?? '-'}
            </div>
            {data?.cve_link?.length ? (
              <div className="mt-1">
                <DFLink
                  href={data.cve_link}
                  className="text-p2 flex items-center gap-3"
                  target="_blank"
                >
                  <span className="h-4 w-4 shrink-0">
                    <PopOutIcon />
                  </span>
                  <span>{data.cve_link}</span>
                </DFLink>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </SlidingModalHeader>
  );
};

const DetailsComponent = () => {
  const {
    data: { data: cve },
  } = useGetCVEDetails();

  if (!cve) {
    return (
      <div className="flex items-center p-4 justify-center">
        <h3 className="text-p1">No details found</h3>
      </div>
    );
  }

  const omitFields: (keyof ModelVulnerability)[] = [
    'cve_id',
    'updated_at',
    'cve_description',
    'cve_link',
    'cve_severity',
    'cve_cvss_score',
    'urls',
  ];

  return (
    <div>
      <div className="flex flex-wrap gap-y-[30px] gap-x-[14px]">
        {Object.keys(cve ?? {})
          .filter((key) => {
            if (omitFields.includes(key as keyof ModelVulnerability)) return false;
            return true;
          })
          .map((key) => {
            const label = processLabel(key);
            const value = (cve ?? {})[key as keyof ModelVulnerability];
            return (
              <div key={key} className="flex flex-col grow basis-[45%] max-w-full gap-1">
                <div className="text-p3 dark:text-text-text-and-icon first-letter:capitalize">
                  {label}
                </div>
                <div className="text-p1 dark:text-text-input-value">
                  {String(value).length ? String(value) : '-'}
                </div>
              </div>
            );
          })}
        {cve.urls?.length ? (
          <div className="flex flex-col grow basis-[45%] max-w-full gap-1">
            <div className="text-p3 dark:text-text-text-and-icon">URLs</div>
            <div className="text-p1">
              {cve.urls.map((url) => {
                return (
                  <DFLink
                    key={url}
                    href={url}
                    className="text-p2 flex items-center gap-3"
                    target="_blank"
                  >
                    <span className="h-4 w-4 shrink-0">
                      <PopOutIcon />
                    </span>
                    <span className="truncate">{url}</span>
                  </DFLink>
                );
              })}
            </div>
          </div>
        ) : null}
      </div>
    </div>
  );
};

const VulnerabilityDetails = () => {
  const { navigate } = usePageNavigation();
  const [searchParams] = useSearchParams();
  return (
    <SlidingModal
      open={true}
      onOpenChange={() => {
        navigate(`..?${searchParams.toString()}`);
      }}
      size="l"
    >
      <SlidingModalCloseButton />
      <Suspense
        fallback={
          <SlidingModalContent>
            <div className="h-full w-full flex items-center justify-center">
              <CircleSpinner size="lg" />
            </div>
          </SlidingModalContent>
        }
      >
        <Header />
        <SlidingModalContent>
          <div className="py-[18px] px-5">
            <DetailsComponent />
          </div>
        </SlidingModalContent>
      </Suspense>
    </SlidingModal>
  );
};

export const module = {
  element: <VulnerabilityDetails />,
};
