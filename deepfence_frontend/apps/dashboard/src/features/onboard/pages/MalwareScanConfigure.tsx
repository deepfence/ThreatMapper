import { useState } from 'react';
import {
  ActionFunctionArgs,
  generatePath,
  Navigate,
  redirect,
  useActionData,
  useFetcher,
  useLocation,
  useNavigation,
} from 'react-router-dom';
import { Button, Tooltip, Typography } from 'ui-components';

import { getMalwareScanApiClient } from '@/api/api';
import {
  ApiDocsBadRequestResponse,
  ModelMalwareScanTriggerReq,
  ModelNodeIdentifierNodeTypeEnum,
} from '@/api/generated';
import { ConnectorHeader } from '@/features/onboard/components/ConnectorHeader';
import { OnboardConnectionNode } from '@/features/onboard/pages/connectors/MyConnectors';
import { ApiError, makeRequest } from '@/utils/api';
import { usePageNavigation } from '@/utils/usePageNavigation';

export type ScanActionReturnType = {
  message?: string;
};

const action = async ({ request }: ActionFunctionArgs): Promise<ScanActionReturnType> => {
  const formData = await request.formData();
  const nodeIds = formData.get('_nodeIds')?.toString().split(',') ?? [];
  const nodeType = formData.get('_nodeType')?.toString() ?? '';

  const requestBody: ModelMalwareScanTriggerReq = {
    filters: {
      cloud_account_scan_filter: { filter_in: null },
      kubernetes_cluster_scan_filter: { filter_in: null },
      container_scan_filter: { filter_in: null },
      host_scan_filter: { filter_in: null },
      image_scan_filter: { filter_in: null },
    },
    node_ids: nodeIds.map((nodeId) => ({
      node_id: nodeId,
      node_type: (nodeType === 'kubernetes_cluster'
        ? 'cluster'
        : nodeType) as ModelNodeIdentifierNodeTypeEnum,
    })),
  };

  const r = await makeRequest({
    apiFunction: getMalwareScanApiClient().startMalwareScan,
    apiArgs: [
      {
        modelMalwareScanTriggerReq: requestBody,
      },
    ],
    errorHandler: async (r) => {
      const error = new ApiError<ScanActionReturnType>({});
      if (r.status === 400 || r.status === 409) {
        const modelResponse: ApiDocsBadRequestResponse = await r.json();
        return error.set({
          message: modelResponse.message ?? '',
        });
      }
    },
  });

  if (ApiError.isApiError(r)) {
    return r.value();
  }
  throw redirect(
    generatePath('/onboard/scan/view-summary/running/:nodeType/:scanType/:bulkScanId', {
      nodeType,
      scanType: 'malware',
      bulkScanId: r.bulk_scan_id,
    }),
    302,
  );
};

const SelectedAccountComponent = ({
  type,
  accounts,
}: {
  type: string;
  accounts: string[];
}) => {
  return (
    <span className={`${Typography.size.sm} text-gray-600 dark:text-gray-400`}>
      {accounts.length > 0 ? `${type} / ${accounts[0]}` : null}
      &nbsp;
      {accounts.length > 1 && (
        <Tooltip content={accounts.slice(1).join(', ')}>
          <span className={`${Typography.size.sm} text-blue-500 dark:text-blue-400`}>
            +{accounts.length - 1} more
          </span>
        </Tooltip>
      )}
    </span>
  );
};

const MalwareScanConfigure = () => {
  const { goBack } = usePageNavigation();
  const actionData = useActionData() as ScanActionReturnType;
  const location = useLocation();
  const fetcher = useFetcher();
  const navigation = useNavigation();

  const [pageState] = useState<unknown>(location.state);
  if (!Array.isArray(pageState) || !pageState.length) {
    return <Navigate to="/onboard/connectors/my-connectors" />;
  }
  const state = pageState as OnboardConnectionNode[];

  const isStatusPageLoading =
    navigation.location?.pathname.includes('/view-summary/running') &&
    navigation.state === 'loading';

  return (
    <fetcher.Form method="post">
      <input
        type="text"
        name="_nodeIds"
        hidden
        readOnly
        value={state.map((node) => node.urlId).join(',')}
      />
      <input type="text" name="_nodeType" readOnly hidden value={state[0].urlType} />
      <ConnectorHeader
        title="Configure Malware Scan"
        description="Just click the start scan button to start your malware scanning"
        endComponent={
          <SelectedAccountComponent
            accounts={state.map((node) => node.urlId)}
            type={state[0].urlType}
          />
        }
      />
      {actionData?.message && (
        <section className="mb-4">
          <p className={`text-sm text-red-500`}>{actionData.message}</p>
        </section>
      )}
      <section className="flex">
        <div></div>
        <Button
          disabled={fetcher.state === 'submitting' || isStatusPageLoading}
          loading={fetcher.state === 'submitting' || isStatusPageLoading}
          size="sm"
          color="primary"
          className="ml-auto"
          type="submit"
        >
          Start scan
        </Button>
      </section>

      <Button onClick={goBack} color="default" size="xs" className="mt-16">
        Go Back
      </Button>
    </fetcher.Form>
  );
};

export const module = {
  action,
  element: <MalwareScanConfigure />,
};
