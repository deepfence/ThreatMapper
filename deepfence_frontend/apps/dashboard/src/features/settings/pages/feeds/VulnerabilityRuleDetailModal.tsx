import { useSuspenseQuery } from '@suspensive/react-query';
import { isNil } from 'lodash-es';
import { Suspense, useMemo } from 'react';
import { useParams, useSearchParams } from 'react-router-dom';
import {
  Button,
  CircleSpinner,
  SlidingModal,
  SlidingModalCloseButton,
  SlidingModalContent,
  SlidingModalHeader,
} from 'ui-components';

import { CopyButton, useCopyToClipboardState } from '@/components/CopyToClipboard';
import { DFLink } from '@/components/DFLink';
import { CopyLineIcon } from '@/components/icons/common/CopyLine';
import { PopOutIcon } from '@/components/icons/common/PopOut';
import { SeverityBadge, SeverityBadgeIcon } from '@/components/SeverityBadge';
import { VulnerabilityIcon } from '@/components/sideNavigation/icons/Vulnerability';
import { TruncatedText } from '@/components/TruncatedText';
import { queries } from '@/queries';
import { useTheme } from '@/theme/ThemeContext';
import { VulnerabilitySeverityType } from '@/types/common';
import { sortBySeverity } from '@/utils/array';
import { formatMilliseconds } from '@/utils/date';
import { getFieldsKeyValue } from '@/utils/detailsPanel';
import { replacebyUppercaseCharacters } from '@/utils/label';
import { usePageNavigation } from '@/utils/usePageNavigation';

function useLookupVulnerabilityRule() {
  const { ruleId } = useParams();
  return useSuspenseQuery({
    ...queries.lookup.lookupVulnerabilityRule({
      nodeId: ruleId ?? '',
    }),
  });
}

const timeFormatKey = {
  updated_at: 'updated_at',
};

const Header = () => {
  const {
    data: { rule },
  } = useLookupVulnerabilityRule();
  const data = rule ?? undefined;
  const { copy, isCopied } = useCopyToClipboardState();

  const maxSeverity = useMemo(() => {
    if (!data?.cve_severities || data.cve_severities.length === 0) return null;
    return sortBySeverity(
      data.cve_severities.map((s) => ({ severity: s })),
      'severity',
    )[0].severity;
  }, [data?.cve_severities]);

  return (
    <SlidingModalHeader>
      <div className="py-5 px-5 dark:bg-[linear-gradient(to_bottom,_#15253e_96px,_transparent_0)] bg-[linear-gradient(to_bottom,_#EEEEEE_96px,_transparent_0)]">
        <div className="flex items-center gap-2 text-text-text-and-icon pr-8">
          <div className="h-4 w-4 shrink-0">
            <VulnerabilityIcon />
          </div>
          <h3 className="text-h3 grow-0 overflow-hidden">
            <TruncatedText text={data?.cve_id ?? '-'} />
          </h3>
        </div>
        <div className="mt-[18px] flex">
          <div className="px-4 flex flex-col gap-2">
            <div>
              <SeverityBadge
                className="w-full max-w-none"
                severity={maxSeverity ?? '-'}
              />
            </div>
          </div>
          <div className="flex-1">
            <div className="flex">
              <Button
                variant="flat"
                size="sm"
                className="ml-auto"
                onClick={() => {
                  copy(JSON.stringify(data ?? {}));
                }}
                startIcon={<CopyLineIcon />}
              >
                {isCopied ? 'Copied JSON' : 'Copy JSON'}
              </Button>
            </div>
          </div>
        </div>
      </div>
    </SlidingModalHeader>
  );
};

function processLabel(labelKey: string) {
  return replacebyUppercaseCharacters(labelKey);
}

interface PackageData {
  packageName: string;
  cve_attack_vector?: string;
  cve_cvss_score?: unknown;
  cve_description?: string;
  cve_fixed_in?: string;
  cve_overall_score?: unknown;
  cve_severitie?: string;
  cve_type?: string;
  namespace?: string;
  package_name?: string;
  parsed_attack_vector?: string;
}

const DetailsComponent = () => {
  const {
    data: { rule },
  } = useLookupVulnerabilityRule();

  if (!rule) {
    return (
      <div className="flex items-center p-4 justify-center">
        <h3 className="text-p1a">No details found</h3>
      </div>
    );
  }

  const updatedRule = { ...rule, epss_score: `${rule.epss_score}%` };

  const keyValues = getFieldsKeyValue(updatedRule ?? {}, {
    hiddenFields: [
      'cve_attack_vectors',
      'cve_cvss_scores',
      'cve_descriptions',
      'cve_fixed_ins',
      'cve_links',
      'cve_overall_scores',
      'cve_severities',
      'cve_types',
      'exploit_pocs',
      'namespaces',
      'package_names',
      'parsed_attack_vectors',
      'urls',
      'node_id',
      'resources',
    ],
    priorityFields: ['cve_id'],
  });

  const packageData: PackageData[] = (updatedRule.package_names ?? []).map(
    (packageName, idx) => {
      return {
        packageName,
        cve_attack_vector: updatedRule.cve_attack_vectors?.[idx],
        cve_cvss_score: updatedRule.cve_cvss_scores?.[idx],
        cve_description: updatedRule.cve_descriptions?.[idx],
        cve_fixed_in: updatedRule.cve_fixed_ins?.[idx],
        cve_overall_score: updatedRule.cve_overall_scores?.[idx],
        cve_severity: updatedRule.cve_severities?.[idx],
        cve_type: updatedRule.cve_types?.[idx],
        namespace: updatedRule.namespaces?.[idx],
        package_name: updatedRule.package_names?.[idx],
        parsed_attack_vector: updatedRule.parsed_attack_vectors?.[idx],
      };
    },
  );

  return (
    <div className="flex flex-wrap gap-y-[30px] gap-x-[14px] py-[18px] px-5">
      {keyValues.map(({ key, value, isCode }) => {
        const label = processLabel(key);
        let valueAsStr = '-';
        if (Array.isArray(value)) {
          valueAsStr = value.join(', ');
        } else if (typeof value === 'string') {
          valueAsStr = value;
        } else {
          valueAsStr = String(value);
        }
        const DetailsComponent = isCode
          ? ({
              children,
              ...rest
            }: React.DetailedHTMLProps<
              React.HTMLAttributes<HTMLPreElement>,
              HTMLPreElement
            >) => <pre {...rest}>{children}</pre>
          : ({
              children,
              ...rest
            }: React.DetailedHTMLProps<
              React.HTMLAttributes<HTMLDivElement>,
              HTMLDivElement
            >) => <div {...rest}>{children}</div>;
        return (
          <div
            key={key}
            className="flex flex-col grow basis-[45%] max-w-full gap-1 group"
          >
            <div className="flex relative">
              <div className="text-p3 text-text-text-and-icon first-letter:capitalize">
                {label}
              </div>
              <CopyButton value={valueAsStr} className="hidden group-hover:block" />
            </div>
            <DetailsComponent className="text-p1 dark:text-text-input-value text-text-text-and-icon break-words overflow-auto">
              {key in timeFormatKey ? formatMilliseconds(+valueAsStr) : valueAsStr}
            </DetailsComponent>
          </div>
        );
      })}
      {updatedRule.urls?.length ? (
        <div className="flex flex-col grow basis-[45%] max-w-full gap-1">
          <div className="text-p3 text-text-text-and-icon">URLs</div>
          <div className="text-p1">
            {updatedRule.urls.map((url) => {
              return (
                <DFLink
                  key={url}
                  href={url}
                  className="text-p2 flex items-center gap-3"
                  target="_blank"
                >
                  <span className="h-4 w-4 shrink-0">
                    <PopOutIcon />
                  </span>
                  <span className="truncate">{url}</span>
                </DFLink>
              );
            })}
          </div>
        </div>
      ) : null}
      {updatedRule.cve_links?.length ? (
        <div className="flex flex-col grow basis-[45%] max-w-full gap-1">
          <div className="text-p3 text-text-text-and-icon">Links</div>
          <div className="text-p1">
            {updatedRule.cve_links.map((url) => {
              return (
                <DFLink
                  key={url}
                  href={url}
                  className="text-p2 flex items-center gap-3"
                  target="_blank"
                >
                  <span className="h-4 w-4 shrink-0">
                    <PopOutIcon />
                  </span>
                  <span className="truncate">{url}</span>
                </DFLink>
              );
            })}
          </div>
        </div>
      ) : null}
      {updatedRule.exploit_pocs?.length ? (
        <div className="flex flex-col grow basis-[45%] max-w-full gap-1">
          <div className="text-p3 text-text-text-and-icon">Exploit POCs</div>
          <div className="text-p1">
            {updatedRule.exploit_pocs.map((url) => {
              return (
                <DFLink
                  key={url}
                  href={url}
                  className="text-p2 flex items-center gap-3"
                  target="_blank"
                >
                  <span className="h-4 w-4 shrink-0">
                    <PopOutIcon />
                  </span>
                  <span className="truncate">{url}</span>
                </DFLink>
              );
            })}
          </div>
        </div>
      ) : null}
      {packageData && packageData.length > 0 && (
        <div className="w-full">
          <h3 className="text-p3 text-text-text-and-icon mb-2">Affected Packages</h3>
          <div className="grid grid-cols-1 gap-4">
            {packageData.map((pkg, index) => (
              <PackageComponent key={index} pkg={pkg} />
            ))}
          </div>
        </div>
      )}
    </div>
  );
};
const PackageComponent = ({ pkg }: { pkg: PackageData }) => {
  const { mode } = useTheme();

  return (
    <div className="border border-bg-grid-border rounded-md p-2">
      <h3 className="text-h5 mb-2">{pkg.packageName}</h3>
      <div className="grid grid-cols-2 gap-x-4 gap-y-2">
        {Object.entries(pkg).map(([key, value]) => {
          if (key === 'packageName') return null;
          const isDescription = key === 'cve_description';
          const isSeverity = key === 'cve_severity';
          const label = replacebyUppercaseCharacters(key);
          let valueAsStr = '';
          if (Array.isArray(value)) {
            valueAsStr = value.join(', ');
          } else if (typeof value === 'string') {
            valueAsStr = value.length ? value : '-';
          } else {
            valueAsStr = !isNil(value) ? String(value) : '-';
          }
          return (
            <div
              key={key}
              className={`flex flex-col grow basis-[45%] max-w-full gap-1 group ${
                isDescription ? 'col-span-2' : ''
              }`}
            >
              <div className="flex relative">
                <div className="text-p7 text-text-text-and-icon first-letter:uppercase">
                  {label}
                </div>
                <CopyButton value={valueAsStr} className="hidden group-hover:block" />
              </div>
              {isSeverity ? (
                <div className="flex items-center gap-x-1">
                  <SeverityBadgeIcon
                    severity={valueAsStr as VulnerabilitySeverityType}
                    className="w-[18px] h-[18px]"
                    theme={mode}
                  />
                  <span className="text-p4 text-text-input-value first-letter:uppercase">
                    {valueAsStr}
                  </span>
                </div>
              ) : (
                <span className="text-p4 text-text-input-value break-words">
                  {valueAsStr}
                </span>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

const NetworkIncidentRuleDetailModal = () => {
  const { navigate } = usePageNavigation();
  const [searchParams] = useSearchParams();

  return (
    <SlidingModal
      open={true}
      onOpenChange={() => {
        navigate(`..?${searchParams.toString()}`);
      }}
      size="xl"
    >
      <SlidingModalCloseButton />
      <Suspense
        fallback={
          <SlidingModalContent>
            <div className="h-full w-full flex items-center justify-center">
              <CircleSpinner size="lg" />
            </div>
          </SlidingModalContent>
        }
      >
        <Header />
        <SlidingModalContent>
          <div className="h-full">
            <DetailsComponent />
          </div>
        </SlidingModalContent>
      </Suspense>
    </SlidingModal>
  );
};

export const module = {
  element: <NetworkIncidentRuleDetailModal />,
};
