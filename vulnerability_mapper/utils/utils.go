package utils

import (
	"io/ioutil"
	"os"
	"strconv"
	"strings"
	"time"
)

const metasploitURLPattern = "github.com/rapid7/metasploit-framework"

func ValidateSbom(userInput []byte) error {
	return nil
}

// Escape escapes the user input to be used as a command line argument
// removes all the double quotes
func Escape(userInput []byte) []byte {
	st := string(userInput)
	// re is \"
	re := `\"`
	st = strings.Replace(st, "\"", re, -1)
	return []byte(st)
}

func CreateTempFile(userInput []byte) (*os.File, error) {
	file, err := ioutil.TempFile("/tmp", "sbom.*.json")
	if err != nil {
		return nil, err
	}
	_, err = file.Write(userInput)
	if err != nil {
		return nil, err
	}

	return file, err
}

func TrimSuffix(s, suffix string) string {
	if strings.HasSuffix(s, suffix) {
		s = s[:len(s)-len(suffix)]
	}
	return s
}

func Contains(s []string, str string) bool {
	for _, v := range s {
		if v == str {
			return true
		}
	}

	return false
}

func ExtractExploitPocUrl(url []string) (string, []string) {
	if len(url) == 0 {
		return "", nil
	}
	nonExploitPocUrls := make([]string, len(url))
	var msfURL string
	for _, u := range url {
		if strings.Contains(u, metasploitURLPattern) {
			msfURL = u
		} else {
			nonExploitPocUrls = append(nonExploitPocUrls, u)
		}
	}
	return msfURL, nonExploitPocUrls
}

func getTimestamp() string {
	return strconv.FormatInt(time.Now().UTC().UnixNano(), 10)
}

func getIntTimestamp() int64 {
	return time.Now().UTC().UnixNano() / 1000000
}

func getDatetimeNow() string {
	return time.Now().UTC().Format("2006-01-02T15:04:05.000")
}
